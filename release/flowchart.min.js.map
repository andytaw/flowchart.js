{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///flowchart.min.js","webpack:///webpack/bootstrap 7060ba7236a412e91d31","webpack:///./index.js","webpack:///./src/flowchart.helpers.js","webpack:///./src/flowchart.symbol.js","webpack:///./src/flowchart.functions.js","webpack:///./src/flowchart.parse.js","webpack:///./src/flowchart.symbol.condition.js","webpack:///./src/flowchart.symbol.parallel.js","webpack:///./src/flowchart.chart.js","webpack:///./src/flowchart.defaults.js","webpack:///./src/flowchart.shim.js","webpack:///./src/flowchart.symbol.end.js","webpack:///./src/flowchart.symbol.inputoutput.js","webpack:///./src/flowchart.symbol.operation.js","webpack:///./src/flowchart.symbol.start.js","webpack:///./src/flowchart.symbol.subroutine.js","webpack:///./src/jquery-plugin.js","webpack:///external \"Raphael\""],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE_16__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","parse","FlowChart","window","flowchart","_defaults","options","defaultOptions","merged","attrname","_inherits","ctor","superCtor","Object","super_","prototype","create","constructor","value","enumerable","writable","configurable","TempCtor","defaults","inherits","Symbol","chart","symbol","group","paper","set","connectedTo","symbolType","flowstate","lineStyle","key","leftLines","rightLines","topLines","bottomLines","params","next_direction","next","undefined","text","node","setAttribute","getAttr","attr","text-anchor","x","fill","font-size","font","fontF","fontW","font-family","font-weight","link","function","cursor","addEventListener","evt","target","maxWidth","words","split","tempText","ii","length","word","getBBox","width","substring","push","tmpMargin","stroke","stroke-width","height","insertBefore","y","initialize","drawAPI","drawLine","checkLineIntersection","attName","opt1","opt3","opt2","symbols","transform","getCenter","getX","getY","shiftX","setX","shiftY","setY","getTop","getBottom","getLeft","getRight","render","self","lineLength","rightPoint","isPositioned","shift","symb","hasSymbolUnder","len","diff","Math","abs","leftPoint","bottomPoint","renderLines","drawLineTo","origin","indexOf","line","yOffset","right","bottom","top","left","symbolX","symbolY","symbolTop","symbolRight","symbolLeft","isOnSameColumn","isOnSameLine","isUnder","isUpper","isLeft","isRight","maxX","lineWith","max","rightStart","topEnd","bottomStart","diffX","leftStart","topStart","leftEnd","rightEnd","l","llen","lines","otherLine","ePath","lPath","iP","lenP","newPath","line1_from_x","line1_from_y","line1_to_x","line1_to_y","lP","lenlP","newLinePath","line2_from_x","line2_from_y","line2_to_x","line2_to_y","res","onLine1","onLine2","newSegment","splice","minXFromSymbols","maxXFromLine","drawPath","location","points","path","pathValues","from","to","toString","arrow-end","centerText","textPath","textAnchor","isHorizontal","firstTo","line1StartX","line1StartY","line1EndX","line1EndY","line2StartX","line2StartY","line2EndX","line2EndY","denominator","b","numerator1","numerator2","result","input","getStyle","s","startIndex","endIndex","getSymbValue","getSymbol","getNextPath","flowSymb","getAnnotation","tmp","tmp_split","trim","start","drawSVG","container","getDisplaySymbol","dispSymbols","Start","diagram","End","Operation","InputOutput","Subroutine","Condition","Parallel","Error","clean","constructChart","prevDisp","prev","dispSymb","startWith","pathOk","yes","no","path1","path2","path3","then","prevBreak","i0","i0len","line0","replace","substr","currentLine","parts","match","entries","entry","sub","join","txtAndState","pop","ann","flowSymbols","iS","lenS","symbVal","realSymb","direction","condOpt","yes_annotation","no_annotation","nextSymb","lineStyleSymbols","iSS","lenSS","curSymb","nextSymbol","JSON","textMargin","yes_direction","direction_yes","no_direction","direction_no","startX","startY","dominant-baseline","yes_symbol","no_symbol","bottom_symbol","right_symbol","left_symbol","rect","path1_direction","path2_direction","path3_direction","direction_next","direction_path1","direction_path2","direction_path3","path1_symbol","path2_symbol","path3_symbol","top_symbol","topPoint","Raphael","handle","flowChart","maxHeight","maxY","minX","minY","leftX","x2","y2","scale","lineWidth","setSize","setViewBox","paperDom","canvas","parentNode","removeChild","line-width","line-length","text-margin","font-color","line-color","element-color","yes-text","no-text","class","end","condition","inputoutput","operation","subroutine","parallel","Array","searchElement","TypeError","t","n","arguments","Number","Infinity","floor","k","lastIndexOf","min","String","innerWrap","jQuery","$","paramFit","needle","haystack","isArray","includes","methods","init","each","$this","html","setFlowStateByParam","param","paramValue","newFlowState","nextSymbolKeys","property","hasOwnProperty","val","nski","nextSymbolKey","clearFlowState","fn","methodOrOptions","apply","slice","error"],"mappings":";;;;;CAAA,SAAAA,EAAAC,GACA,mBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,EAAAG,QAAA,gBACA,sBAAAC,gBAAAC,IACAD,QAAA,WAAAJ,OACA,CACA,GAAAM,GAAAN,EAAA,gBAAAC,SAAAE,QAAA,WAAAJ,EAAA,QACA,QAAAQ,KAAAD,IAAA,gBAAAL,iBAAAF,GAAAQ,GAAAD,EAAAC,KAECC,KAAA,SAAAC,GACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAX,OAGA,IAAAC,GAAAW,EAAAD,IACAX,WACAa,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAd,EAAAD,QAAAC,IAAAD,QAAAU,GAGAT,EAAAa,QAAA,EAGAb,EAAAD,QAvBA,GAAAY,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDmBM,SAAUT,EAAQD,EAASU,GEzDjCA,EAAA,EACA,IAAAS,GAAAT,EAAA,EACAA,GAAA,GAEA,IAAAU,IACAD,QAGA,oBAAAE,UACAA,OAAAC,UAAAF,GAGAnB,EAAAD,QAAAoB,GFmEM,SAAUnB,EAAQD,GG/ExB,QAAAuB,GAAAC,EAAAC,GACA,IAAAD,GAAA,kBAAAA,GACA,MAAAC,EAGA,IAAAC,KACA,QAAAC,KAAAF,GACAC,EAAAC,GAAAF,EAAAE,EAGA,KAAAA,IAAAH,GACAA,EAAAG,KACA,gBAAAD,GAAAC,GACAD,EAAAC,GAAAJ,EAAAG,EAAAC,GAAAH,EAAAG,IAEAD,EAAAC,GAAAH,EAAAG,GAIA,OAAAD,GAGA,QAAAE,GAAAC,EAAAC,GACA,qBAAAC,QAAA,OAEAF,EAAAG,OAAAF,EACAD,EAAAI,UAAAF,OAAAG,OAAAJ,EAAAG,WACAE,aACAC,MAAAP,EACAQ,YAAA,EACAC,UAAA,EACAC,cAAA,SAGA,CAEAV,EAAAG,OAAAF,CACA,IAAAU,GAAA,YACAA,GAAAP,UAAAH,EAAAG,UACAJ,EAAAI,UAAA,GAAAO,GACAX,EAAAI,UAAAE,YAAAN,GAMA5B,EAAAD,SACAyC,SAAAlB,EACAmB,SAAAd,IH0FM,SAAU3B,EAAQD,EAASU,GItIjC,QAAAiC,GAAAC,EAAApB,EAAAqB,GACAtC,KAAAqC,QACArC,KAAAuC,MAAAvC,KAAAqC,MAAAG,MAAAC,MACAzC,KAAAsC,SACAtC,KAAA0C,eACA1C,KAAA2C,WAAA1B,EAAA0B,WACA3C,KAAA4C,UAAA3B,EAAA2B,WAAA,SACA5C,KAAA6C,UAAA5B,EAAA4B,cACA7C,KAAA8C,IAAA7B,EAAA6B,KAAA,GACA9C,KAAA+C,aACA/C,KAAAgD,cACAhD,KAAAiD,YACAjD,KAAAkD,eACAlD,KAAAmD,OAAAlC,EAAAkC,OAEAnD,KAAAoD,eAAAnC,EAAAoC,MAAApC,EAAA,eAAAA,EAAA,eAAAqC,OAEAtD,KAAAuD,KAAAvD,KAAAqC,MAAAG,MAAAe,KAAA,IAAAtC,EAAAsC,MAEAtC,EAAA6B,MAAA9C,KAAAuD,KAAAC,KAAAlD,GAAAW,EAAA6B,IAAA,KACA9C,KAAAuD,KAAAC,KAAAC,aAAA,QAAAzD,KAAA0D,QAAA,cAEA1D,KAAAuD,KAAAI,MACAC,cAAA,QACAC,EAAA7D,KAAA0D,QAAA,eACAI,KAAA9D,KAAA0D,QAAA,cACAK,YAAA/D,KAAA0D,QAAA,cAGA,IAAAM,GAAAhE,KAAA0D,QAAA,QACAO,EAAAjE,KAAA0D,QAAA,eACAQ,EAAAlE,KAAA0D,QAAA,cAEAM,IAAAhE,KAAAuD,KAAAI,MAAAK,SACAC,GAAAjE,KAAAuD,KAAAI,MAAAQ,cAAAF,IACAC,GAAAlE,KAAAuD,KAAAI,MAAAS,cAAAF,IAEAjD,EAAAoD,MAAArE,KAAAuD,KAAAI,KAAA,OAAA1C,EAAAoD,MAGApD,EAAAqD,WACAtE,KAAAuD,KAAAI,MAAAY,OAAA,YAEAvE,KAAAuD,KAAAC,KAAAgB,iBAAA,iBAAAC,GACA3D,OAAAG,EAAAqD,UAAAG,EAAAxD,KACA,IAGAA,EAAAyD,QAAA1E,KAAAuD,KAAAI,KAAA,SAAA1C,EAAAyD,OAEA,IAAAC,GAAA3E,KAAA0D,QAAA,WACA,IAAAiB,EAAA,CAIA,OAFAC,GAAA3D,EAAAsC,KAAAsB,MAAA,KACAC,EAAA,GACA/E,EAAA,EAAAgF,EAAAH,EAAAI,OAAAjF,EAAAgF,EAAAhF,IAAA,CACA,GAAAkF,GAAAL,EAAA7E,EACAC,MAAAuD,KAAAI,KAAA,OAAAmB,EAAA,IAAAG,GAEAH,GADA9E,KAAAuD,KAAA2B,UAAAC,MAAAR,EACA,KAAAM,EAEA,IAAAA,EAGAjF,KAAAuD,KAAAI,KAAA,OAAAmB,EAAAM,UAAA,IAKA,GAFApF,KAAAuC,MAAA8C,KAAArF,KAAAuD,MAEAjB,EAAA,CACA,GAAAgD,GAAAtF,KAAA0D,QAAA,cAEApB,GAAAqB,MACAG,KAAA9D,KAAA0D,QAAA,QACA6B,OAAAvF,KAAA0D,QAAA,iBACA8B,eAAAxF,KAAA0D,QAAA,cACAyB,MAAAnF,KAAAuD,KAAA2B,UAAAC,MAAA,EAAAG,EACAG,OAAAzF,KAAAuD,KAAA2B,UAAAO,OAAA,EAAAH,IAGAhD,EAAAkB,KAAAC,aAAA,QAAAzD,KAAA0D,QAAA,UAEAzC,EAAAoD,MAAA/B,EAAAqB,KAAA,OAAA1C,EAAAoD,MACApD,EAAAyD,QAAApC,EAAAqB,KAAA,SAAA1C,EAAAyD,QAGAzD,EAAAqD,WACAhC,EAAAkB,KAAAgB,iBAAA,iBAAAC,GACA3D,OAAAG,EAAAqD,UAAAG,EAAAxD,KACA,GACAqB,EAAAqB,MAAAY,OAAA,aAEAtD,EAAA6B,MAAAR,EAAAkB,KAAAlD,GAAAW,EAAA6B,KAEA9C,KAAAuC,MAAA8C,KAAA/C,GACAA,EAAAoD,aAAA1F,KAAAuD,MAEAvD,KAAAuD,KAAAI,MACAgC,EAAArD,EAAA4C,UAAAO,OAAA,IAGAzF,KAAA4F,cAzGA,GAAAC,GAAA1F,EAAA,GACA2F,EAAAD,EAAAC,SACAC,EAAAF,EAAAE,qBA6GA3D,GAAAV,UAAAgC,QAAA,SAAAsC,GACA,GAAAhG,KAAAqC,MAAA,CAGA,GAEA4D,GAFAC,EAAAlG,KAAAqC,MAAA,QAAArC,KAAAqC,MAAApB,QAAA+E,GAAA1C,OACA6C,EAAAnG,KAAAqC,MAAApB,QAAA,QAAAjB,KAAAqC,MAAApB,QAAAmF,QAAApG,KAAA2C,YAAAqD,GAAA1C,MAKA,OAHAtD,MAAAqC,MAAApB,QAAA2B,WAAA5C,KAAAqC,MAAApB,QAAA2B,UAAA5C,KAAA4C,aACAqD,EAAAjG,KAAAqC,MAAApB,QAAA2B,UAAA5C,KAAA4C,WAAAoD,IAEAC,GAAAE,GAAAD,IAGA9D,EAAAV,UAAAkE,WAAA,WACA5F,KAAAuC,MAAA8D,UAAA,IAAArG,KAAA0D,QAAA,kBAAA1D,KAAA0D,QAAA,eAEA1D,KAAAmF,MAAAnF,KAAAuC,MAAA2C,UAAAC,MACAnF,KAAAyF,OAAAzF,KAAAuC,MAAA2C,UAAAO,QAGArD,EAAAV,UAAA4E,UAAA,WACA,OAAAzC,EAAA7D,KAAAuG,OAAAvG,KAAAmF,MAAA,EACAQ,EAAA3F,KAAAwG,OAAAxG,KAAAyF,OAAA,IAGArD,EAAAV,UAAA6E,KAAA,WACA,MAAAvG,MAAAuC,MAAA2C,UAAArB,GAGAzB,EAAAV,UAAA8E,KAAA,WACA,MAAAxG,MAAAuC,MAAA2C,UAAAS,GAGAvD,EAAAV,UAAA+E,OAAA,SAAA5C,GACA7D,KAAAuC,MAAA8D,UAAA,KAAArG,KAAAuG,OAAA1C,GAAA,IAAA7D,KAAAwG,SAGApE,EAAAV,UAAAgF,KAAA,SAAA7C,GACA7D,KAAAuC,MAAA8D,UAAA,IAAAxC,EAAA,IAAA7D,KAAAwG,SAGApE,EAAAV,UAAAiF,OAAA,SAAAhB,GACA3F,KAAAuC,MAAA8D,UAAA,IAAArG,KAAAuG,OAAA,KAAAvG,KAAAwG,OAAAb,KAGAvD,EAAAV,UAAAkF,KAAA,SAAAjB,GACA3F,KAAAuC,MAAA8D,UAAA,IAAArG,KAAAuG,OAAA,IAAAZ,IAGAvD,EAAAV,UAAAmF,OAAA,WACA,GAAAlB,GAAA3F,KAAAwG,OACA3C,EAAA7D,KAAAuG,OAAAvG,KAAAmF,MAAA,CACA,QAAAtB,IAAA8B,MAGAvD,EAAAV,UAAAoF,UAAA,WACA,GAAAnB,GAAA3F,KAAAwG,OAAAxG,KAAAyF,OACA5B,EAAA7D,KAAAuG,OAAAvG,KAAAmF,MAAA,CACA,QAAAtB,IAAA8B,MAGAvD,EAAAV,UAAAqF,QAAA,WACA,GAAApB,GAAA3F,KAAAwG,OAAAxG,KAAAuC,MAAA2C,UAAAO,OAAA,EACA5B,EAAA7D,KAAAuG,MACA,QAAA1C,IAAA8B,MAGAvD,EAAAV,UAAAsF,SAAA,WACA,GAAArB,GAAA3F,KAAAwG,OAAAxG,KAAAuC,MAAA2C,UAAAO,OAAA,EACA5B,EAAA7D,KAAAuG,OAAAvG,KAAAuC,MAAA2C,UAAAC,KACA,QAAAtB,IAAA8B,MAGAvD,EAAAV,UAAAuF,OAAA,WACA,GAAAjH,KAAAqD,KAAA,CAEA,GAAA6D,GAAAlH,KACAmH,EAAAnH,KAAA0D,QAAA,cAEA,cAAA1D,KAAAoD,eAAA,CAEA,GAAAgE,GAAApH,KAAAgH,UAEAhH,MAAAqD,KAAAgE,eACArH,KAAAqD,KAAAuD,KAAAQ,EAAAzB,EAAA3F,KAAAqD,KAAAoC,OAAA,GACAzF,KAAAqD,KAAAoD,OAAAzG,KAAAuC,MAAA2C,UAAArB,EAAA7D,KAAAmF,MAAAgC,GAEA,QAAAG,KAGA,OADAC,GADAC,GAAA,EAEAzH,EAAA,EAAA0H,EAAAP,EAAA7E,MAAA+D,QAAApB,OAAAjF,EAAA0H,EAAA1H,IAAA,CACAwH,EAAAL,EAAA7E,MAAA+D,QAAArG,EAEA,IAAA2H,GAAAC,KAAAC,IAAAL,EAAAjB,YAAAzC,EAAAqD,EAAA7D,KAAAiD,YAAAzC,EACA,IAAA0D,EAAAjB,YAAAX,EAAAuB,EAAA7D,KAAAiD,YAAAX,GAAA+B,GAAAR,EAAA7D,KAAA8B,MAAA,GACAqC,GAAA,CACA,QAIA,GAAAA,EAAA,CACA,WAAAN,EAAA7D,KAAAV,WAAA,MACAuE,GAAA7D,KAAAqD,KAAAa,EAAAhB,OAAAgB,EAAApC,MAAAgC,GACAG,QAIAtH,KAAAqD,KAAAgE,cAAA,EAEArH,KAAAqD,KAAA4D,cAEA,aAAAjH,KAAAoD,eAAA,CAEA,GAAAyE,GAAA7H,KAAA+G,SAEA/G,MAAAqD,KAAAgE,eACArH,KAAAqD,KAAAuD,KAAAiB,EAAAlC,EAAA3F,KAAAqD,KAAAoC,OAAA,GACAzF,KAAAqD,KAAAoD,SAAAzG,KAAAuC,MAAA2C,UAAArB,EAAA7D,KAAAmF,MAAAgC,IAEA,QAAAG,KAGA,OADAC,GADAC,GAAA,EAEAzH,EAAA,EAAA0H,EAAAP,EAAA7E,MAAA+D,QAAApB,OAAAjF,EAAA0H,EAAA1H,IAAA,CACAwH,EAAAL,EAAA7E,MAAA+D,QAAArG,EAEA,IAAA2H,GAAAC,KAAAC,IAAAL,EAAAjB,YAAAzC,EAAAqD,EAAA7D,KAAAiD,YAAAzC,EACA,IAAA0D,EAAAjB,YAAAX,EAAAuB,EAAA7D,KAAAiD,YAAAX,GAAA+B,GAAAR,EAAA7D,KAAA8B,MAAA,GACAqC,GAAA,CACA,QAIA,GAAAA,EAAA,CACA,WAAAN,EAAA7D,KAAAV,WAAA,MACAuE,GAAA7D,KAAAqD,KAAAa,EAAAhB,OAAAgB,EAAApC,MAAAgC,GACAG,QAIAtH,KAAAqD,KAAAgE,cAAA,EAEArH,KAAAqD,KAAA4D,cAEA,CACA,GAAAa,GAAA9H,KAAA8G,WAEA9G,MAAAqD,KAAAgE,eACArH,KAAAqD,KAAAsD,OAAA3G,KAAAwG,OAAAxG,KAAAyF,OAAA0B,GACAnH,KAAAqD,KAAAqD,KAAAoB,EAAAjE,EAAA7D,KAAAqD,KAAA8B,MAAA,GACAnF,KAAAqD,KAAAgE,cAAA,EAEArH,KAAAqD,KAAA4D,aAMA7E,EAAAV,UAAAqG,YAAA,WACA/H,KAAAqD,OACArD,KAAAoD,eACApD,KAAAgI,WAAAhI,KAAAqD,KAAArD,KAAA0D,QAAA,kBAAA1D,KAAAoD,gBAEApD,KAAAgI,WAAAhI,KAAAqD,KAAArD,KAAA0D,QAAA,qBAKAtB,EAAAV,UAAAsG,WAAA,SAAA1F,EAAAiB,EAAA0E,GACAjI,KAAA0C,YAAAwF,QAAA5F,GAAA,GACAtC,KAAA0C,YAAA2C,KAAA/C,EAGA,IAqBA6F,GACAC,EAtBAvE,EAAA7D,KAAAsG,YAAAzC,EACA8B,EAAA3F,KAAAsG,YAAAX,EACA0C,EAAArI,KAAAgH,WACAsB,EAAAtI,KAAA8G,YACAyB,EAAAvI,KAAA6G,SACA2B,EAAAxI,KAAA+G,UAEA0B,EAAAnG,EAAAgE,YAAAzC,EACA6E,EAAApG,EAAAgE,YAAAX,EACAgD,EAAArG,EAAAuE,SACA+B,EAAAtG,EAAA0E,WACA6B,EAAAvG,EAAAyE,UAEA+B,EAAAjF,IAAA4E,EACAM,EAAApD,IAAA+C,EACAM,EAAArD,EAAA+C,EACAO,EAAAtD,EAAA+C,GAAA1I,OAAAsC,EACA4G,EAAArF,EAAA4E,EACAU,EAAAtF,EAAA4E,EAEAW,EAAA,EAGAjC,EAAAnH,KAAA0D,QAAA,eACA2F,EAAArJ,KAAA0D,QAAA,aAEA,IAAAuE,GAAA,WAAAA,IAAAa,IAAAE,EAeA,GAAAf,GAAA,UAAAA,IAAAc,IAAAI,EAiBA,GAAAlB,GAAA,SAAAA,IAAAc,IAAAG,EAiBA,GAAAjB,GAAA,UAAAA,IAAAa,IAAAG,EAaA,GAAAhB,GAAA,UAAAA,IAAAa,IAAAE,EAaA,GAAAf,GAAA,WAAAA,IAAAiB,EAsBA,GAAAjB,GAAA,WAAAA,IAAAkB,IAAAH,EAaA,GAAAf,GAAA,WAAAA,IAAAkB,EAcA,GAAAlB,GAAA,UAAAA,GAAAiB,EACAd,EAAA,GAAAT,KAAA2B,IAAAhH,EAAAW,SAAA+B,OAAAhF,KAAAgD,WAAAgC,QACAmD,EAAArC,EAAA9F,KAAAqC,MAAAgG,IACAxE,EAAAwE,EAAAxE,EAAAsD,EAAA,EAAAxB,EAAA0C,EAAA1C,IACA9B,EAAAwE,EAAAxE,EAAAsD,EAAA,EAAAxB,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,IACApC,GACAvD,KAAAgD,WAAAqC,KAAA8C,GACA7F,EAAAW,SAAAoC,KAAA8C,GACAnI,KAAAuJ,YAAA,EACAjH,EAAAkH,QAAA,EACAJ,EAAAf,EAAAxE,EAAAsD,EAAA,MACA,IAAAc,GAAA,UAAAA,GAAAkB,EACAf,EAAA,GAAAT,KAAA2B,IAAAhH,EAAAW,SAAA+B,OAAAhF,KAAAgD,WAAAgC,QACAmD,EAAArC,EAAA9F,KAAAqC,MAAAgG,IACAxE,EAAA8E,EAAA9E,EAAA8B,EAAA0C,EAAA1C,EAAAyC,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,EAAAyC,IACA7E,GACAvD,KAAAgD,WAAAqC,KAAA8C,GACA7F,EAAAW,SAAAoC,KAAA8C,GACAnI,KAAAuJ,YAAA,EACAjH,EAAAkH,QAAA,EACAJ,EAAAf,EAAAxE,EAAAsD,EAAA,MACA,IAAAc,GAAA,WAAAA,GAAAa,GAAAG,EACAb,EAAA,GAAAT,KAAA2B,IAAAhH,EAAAW,SAAA+B,OAAAhF,KAAAkD,YAAA8B,QACAmD,EAAArC,EAAA9F,KAAAqC,MAAAiG,IACAzE,EAAAyE,EAAAzE,EAAA8B,EAAA2C,EAAA3C,EAAAwB,EAAA,EAAAiB,IACAvE,EAAAwE,EAAAxE,EAAAsD,EAAA,EAAAxB,EAAA2C,EAAA3C,EAAAwB,EAAA,EAAAiB,IACAvE,EAAAwE,EAAAxE,EAAAsD,EAAA,EAAAxB,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,IACApC,GACAvD,KAAAkD,YAAAmC,KAAA8C,GACA7F,EAAAW,SAAAoC,KAAA8C,GACAnI,KAAAyJ,aAAA,EACAnH,EAAAkH,QAAA,EACAJ,EAAAd,EAAAzE,EAAAsD,EAAA,MACA,aAAAc,GAAAa,GAAAG,EAAA,CACA,GAAAS,GAAAlB,EAAA3E,EAAAsD,EAAA,CACA0B,GAAAhF,EAAA2E,EAAA3E,IACA6F,EAAAb,EAAAhF,EAAAsD,EAAA,GAEAiB,EAAA,GAAAT,KAAA2B,IAAAhH,EAAAW,SAAA+B,OAAAhF,KAAA+C,UAAAiC,QACAmD,EAAArC,EAAA9F,KAAAqC,MAAAmG,IACA3E,EAAA6F,EAAA/D,EAAA6C,EAAA7C,EAAAyC,IACAvE,EAAA6F,EAAA/D,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,IACApC,GACAvD,KAAA+C,UAAAsC,KAAA8C,GACA7F,EAAAW,SAAAoC,KAAA8C,GACAnI,KAAA2J,WAAA,EACArH,EAAAkH,QAAA,EACAJ,EAAAZ,EAAA3E,MACA,SAAAoE,GACAG,EAAA,GAAAT,KAAA2B,IAAAhH,EAAAW,SAAA+B,OAAAhF,KAAA+C,UAAAiC,QACAmD,EAAArC,EAAA9F,KAAAqC,MAAAmG,IACA3E,EAAA8E,EAAA9E,GAAA2E,EAAA3E,EAAA8E,EAAA9E,GAAA,EAAA8B,EAAA6C,EAAA7C,IACA9B,EAAA8E,EAAA9E,GAAA2E,EAAA3E,EAAA8E,EAAA9E,GAAA,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,IACApC,GACAvD,KAAA+C,UAAAsC,KAAA8C,GACA7F,EAAAW,SAAAoC,KAAA8C,GACAnI,KAAA2J,WAAA,EACArH,EAAAkH,QAAA,EACAJ,EAAAZ,EAAA3E,GACA,QAAAoE,IACAG,EAAA,GAAAT,KAAA2B,IAAAhH,EAAAW,SAAA+B,OAAAhF,KAAAiD,SAAA+B,QACAmD,EAAArC,EAAA9F,KAAAqC,MAAAkG,IACA1E,EAAA0E,EAAA1E,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,IACApC,GACAvD,KAAAiD,SAAAoC,KAAA8C,GACA7F,EAAAW,SAAAoC,KAAA8C,GACAnI,KAAA4J,UAAA,EACAtH,EAAAkH,QAAA,EACAJ,EAAAb,EAAA1E,OA5FAuE,GAAA,GAAAT,KAAA2B,IAAAhH,EAAAW,SAAA+B,OAAAhF,KAAAkD,YAAA8B,QACAmD,EAAArC,EAAA9F,KAAAqC,MAAAiG,IACAzE,EAAAyE,EAAAzE,EAAA8B,EAAA2C,EAAA3C,EAAAwB,EAAA,EAAAiB,IACAvE,EAAAyE,EAAAzE,GAAAyE,EAAAzE,EAAA8E,EAAA9E,GAAA,EAAA8B,EAAA2C,EAAA3C,EAAAwB,EAAA,EAAAiB,IACAvE,EAAAyE,EAAAzE,GAAAyE,EAAAzE,EAAA8E,EAAA9E,GAAA,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,IACApC,GACAvD,KAAAkD,YAAAmC,KAAA8C,GACA7F,EAAAW,SAAAoC,KAAA8C,GACAnI,KAAAyJ,aAAA,EACAnH,EAAAkH,QAAA,EACAJ,EAAAd,EAAAzE,GAAAyE,EAAAzE,EAAA8E,EAAA9E,GAAA,MAzBAuE,GAAA,GAAAT,KAAA2B,IAAAhH,EAAAW,SAAA+B,OAAAhF,KAAAkD,YAAA8B,QACAmD,EAAArC,EAAA9F,KAAAqC,MAAAiG,IACAzE,EAAAyE,EAAAzE,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,IACApC,GACAvD,KAAAkD,YAAAmC,KAAA8C,GACA7F,EAAAW,SAAAoC,KAAA8C,GACAnI,KAAAyJ,aAAA,EACAnH,EAAAkH,QAAA,EACAJ,EAAAd,EAAAzE,EACA8E,EAAA9E,EAAAuF,MAAAT,EAAA9E,OAjCAuE,GAAA,GAAAT,KAAA2B,IAAAhH,EAAAW,SAAA+B,OAAAhF,KAAAkD,YAAA8B,QAEAmD,EADAnI,KAAA6J,SAAAZ,EACAnD,EAAA9F,KAAAqC,MAAAiG,IACAzE,EAAAyE,EAAAzE,EAAA8B,EAAA2C,EAAA3C,EAAAwB,EAAA,EAAAiB,IACAvE,EAAAyE,EAAAzE,GAAAyE,EAAAzE,EAAA8E,EAAA9E,GAAA,EAAA8B,EAAA2C,EAAA3C,EAAAwB,EAAA,EAAAiB,IACAvE,EAAAyE,EAAAzE,GAAAyE,EAAAzE,EAAA8E,EAAA9E,GAAA,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,IACApC,GAEAuC,EAAA9F,KAAAqC,MAAAiG,IACAzE,EAAAyE,EAAAzE,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,IACApC,GAEAvD,KAAAkD,YAAAmC,KAAA8C,GACA7F,EAAAW,SAAAoC,KAAA8C,GACAnI,KAAAyJ,aAAA,EACAnH,EAAAkH,QAAA,EACAJ,EAAAd,EAAAzE,GAAAyE,EAAAzE,EAAA8E,EAAA9E,GAAA,MAjCAuE,GAAA,GAAAT,KAAA2B,IAAAhH,EAAAW,SAAA+B,OAAAhF,KAAAgD,WAAAgC,QACAmD,EAAArC,EAAA9F,KAAAqC,MAAAgG,IACAxE,EAAAwE,EAAAxE,EAAAsD,EAAA,EAAAxB,EAAA0C,EAAA1C,EAAAyC,IACAvE,EAAAwE,EAAAxE,EAAAsD,EAAA,EAAAxB,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,IACApC,GACAvD,KAAAgD,WAAAqC,KAAA8C,GACA7F,EAAAW,SAAAoC,KAAA8C,GACAnI,KAAAuJ,YAAA,EACAjH,EAAAkH,QAAA,EACAJ,EAAAf,EAAAxE,EAAAsD,EAAA,MAxBAiB,GAAA,GAAAT,KAAA2B,IAAAhH,EAAAW,SAAA+B,OAAAhF,KAAAgD,WAAAgC,QACAmD,EAAArC,EAAA9F,KAAAqC,MAAAgG,IACAxE,EAAAwE,EAAAxE,EAAAsD,EAAA,EAAAxB,EAAA0C,EAAA1C,EAAAyC,IACAvE,EAAAwE,EAAAxE,EAAAsD,EAAA,EAAAxB,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,EAAAwB,EAAA,EAAAiB,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,IACApC,GACAvD,KAAAgD,WAAAqC,KAAA8C,GACA7F,EAAAW,SAAAoC,KAAA8C,GACAnI,KAAAuJ,YAAA,EACAjH,EAAAkH,QAAA,EACAJ,EAAAf,EAAAxE,EAAAsD,EAAA,MA5BA,KAAA7E,EAAAU,WAAAgC,QAAA,IAAAhF,KAAA+C,UAAAiC,OACAmD,EAAArC,EAAA9F,KAAAqC,MAAAmG,EAAAI,EAAArF,IAEA6E,EAAA,GAAAT,KAAA2B,IAAAhH,EAAAU,WAAAgC,OAAAhF,KAAA+C,UAAAiC,QACAmD,EAAArC,EAAA9F,KAAAqC,MAAAgG,IACAxE,EAAAwE,EAAAxE,EAAA8B,EAAA0C,EAAA1C,EAAAyC,IACAvE,EAAAwE,EAAAxE,EAAA8B,EAAAiD,EAAAjD,EAAAyC,IACAvE,EAAA+E,EAAA/E,EAAA8B,EAAAiD,EAAAjD,EAAAyC,IACAvE,EAAA+E,EAAA/E,EAAA8B,EAAAiD,EAAAjD,IACApC,IAEAvD,KAAA+C,UAAAsC,KAAA8C,GACA7F,EAAAU,WAAAqC,KAAA8C,GACAnI,KAAA2J,WAAA,EACArH,EAAAwH,UAAA,EACAV,EAAAR,EAAA/E,MAhCA,KAAAvB,EAAAS,UAAAiC,QAAA,IAAAhF,KAAAgD,WAAAgC,OACAmD,EAAArC,EAAA9F,KAAAqC,MAAAgG,EAAAQ,EAAAtF,IAEA6E,EAAA,GAAAT,KAAA2B,IAAAhH,EAAAS,UAAAiC,OAAAhF,KAAAgD,WAAAgC,QACAmD,EAAArC,EAAA9F,KAAAqC,MAAAgG,IACAxE,EAAAwE,EAAAxE,EAAA8B,EAAA0C,EAAA1C,EAAAyC,IACAvE,EAAAwE,EAAAxE,EAAA8B,EAAAkD,EAAAlD,EAAAyC,IACAvE,EAAAgF,EAAAhF,EAAA8B,EAAAkD,EAAAlD,EAAAyC,IACAvE,EAAAgF,EAAAhF,EAAA8B,EAAAkD,EAAAlD,IACApC,IAEAvD,KAAAgD,WAAAqC,KAAA8C,GACA7F,EAAAS,UAAAsC,KAAA8C,GACAnI,KAAAuJ,YAAA,EACAjH,EAAAuH,SAAA,EACAT,EAAAP,EAAAhF,MA9BA,KAAAvB,EAAAW,SAAA+B,QAAA,IAAAhF,KAAAkD,YAAA8B,OACAmD,EAAArC,EAAA9F,KAAAqC,MAAAiG,EAAAK,EAAApF,IAEA6E,EAAA,GAAAT,KAAA2B,IAAAhH,EAAAW,SAAA+B,OAAAhF,KAAAkD,YAAA8B,QACAmD,EAAArC,EAAA9F,KAAAqC,MAAAiG,IACAzE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,EAAAyC,IACAvE,EAAA8E,EAAA9E,EAAA8B,EAAAgD,EAAAhD,IACApC,IAEAvD,KAAAkD,YAAAmC,KAAA8C,GACA7F,EAAAW,SAAAoC,KAAA8C,GACAnI,KAAAyJ,aAAA,EACAnH,EAAAkH,QAAA,EACAJ,EAAAd,EAAAzE,CAqMA,IAJA7D,KAAA6C,UAAAP,EAAAQ,MAAAqF,GACAA,EAAAxE,KAAA3D,KAAA6C,UAAAP,EAAAQ,MAGAqF,EAAA,CACA,OAAA4B,GAAA,EAAAC,EAAAhK,KAAAqC,MAAA4H,MAAAjF,OAAA+E,EAAAC,EAAAD,IAMA,OALAG,GAAAlK,KAAAqC,MAAA4H,MAAAF,GAEAI,EAAAD,EAAAvG,KAAA,QACAyG,EAAAjC,EAAAxE,KAAA,QAEA0G,EAAA,EAAAC,EAAAH,EAAAnF,OAAA,EAAAqF,EAAAC,EAAAD,IAAA,CACA,GAAAE,KACAA,GAAAlF,MAAA,IAAA8E,EAAAE,GAAA,GAAAF,EAAAE,GAAA,KACAE,EAAAlF,MAAA,IAAA8E,EAAAE,EAAA,MAAAF,EAAAE,EAAA,OAOA,QALAG,GAAAD,EAAA,MACAE,EAAAF,EAAA,MACAG,EAAAH,EAAA,MACAI,EAAAJ,EAAA,MAEAK,EAAA,EAAAC,EAAAT,EAAApF,OAAA,EAAA4F,EAAAC,EAAAD,IAAA,CACA,GAAAE,KACAA,GAAAzF,MAAA,IAAA+E,EAAAQ,GAAA,GAAAR,EAAAQ,GAAA,KACAE,EAAAzF,MAAA,IAAA+E,EAAAQ,EAAA,MAAAR,EAAAQ,EAAA,OAEA,IAAAG,GAAAD,EAAA,MACAE,EAAAF,EAAA,MACAG,EAAAH,EAAA,MACAI,EAAAJ,EAAA,MAEAK,EAAApF,EAAAyE,EAAAC,EAAAC,EAAAC,EAAAI,EAAAC,EAAAC,EAAAC,EACA,IAAAC,EAAAC,SAAAD,EAAAE,QAAA,CAEA,GAAAC,EACAN,KAAAE,EACAH,EAAAE,GACAK,GAAA,IAAAH,EAAAtH,EAAA,EAAAwF,EAAA2B,GACAZ,EAAAmB,OAAAX,EAAA,IAAAU,GACAA,GAAA,IAAAH,EAAAtH,EAAA,EAAAwF,EAAA2B,EAAAG,EAAAtH,EAAAmH,EAAA,EAAA3B,EAAA8B,EAAAtH,EAAA,EAAAwF,EAAA2B,GACAZ,EAAAmB,OAAAX,EAAA,IAAAU,GACAnD,EAAAxE,KAAA,OAAAyG,KAEAkB,GAAA,IAAAH,EAAAtH,EAAA,EAAAwF,EAAA2B,GACAZ,EAAAmB,OAAAX,EAAA,IAAAU,GACAA,GAAA,IAAAH,EAAAtH,EAAA,EAAAwF,EAAA2B,EAAAG,EAAAtH,EAAAmH,EAAA,EAAA3B,EAAA8B,EAAAtH,EAAA,EAAAwF,EAAA2B,GACAZ,EAAAmB,OAAAX,EAAA,IAAAU,GACAnD,EAAAxE,KAAA,OAAAyG,IAGAY,EAAAE,GACAI,GAAA,IAAAP,EAAAI,EAAAxF,EAAA,EAAA0D,GACAe,EAAAmB,OAAAX,EAAA,IAAAU,GACAA,GAAA,IAAAP,EAAAI,EAAAxF,EAAA,EAAA0D,EAAA0B,EAAA,EAAA1B,EAAA8B,EAAAxF,EAAAoF,EAAAI,EAAAxF,EAAA,EAAA0D,GACAe,EAAAmB,OAAAX,EAAA,IAAAU,GACAnD,EAAAxE,KAAA,OAAAyG,KAEAkB,GAAA,IAAAP,EAAAI,EAAAxF,EAAA,EAAA0D,GACAe,EAAAmB,OAAAX,EAAA,IAAAU,GACAA,GAAA,IAAAP,EAAAI,EAAAxF,EAAA,EAAA0D,EAAA0B,EAAA,EAAA1B,EAAA8B,EAAAxF,EAAAoF,EAAAI,EAAAxF,EAAA,EAAA0D,GACAe,EAAAmB,OAAAX,EAAA,IAAAU,GACAnD,EAAAxE,KAAA,OAAAyG,IAIAQ,GAAA,IAMA5K,KAAAqC,MAAA4H,MAAA5E,KAAA8C,IACA7E,SAAAtD,KAAAqC,MAAAmJ,iBAAAxL,KAAAqC,MAAAmJ,gBAAAhD,EAAA3E,KACA7D,KAAAqC,MAAAmJ,gBAAAhD,EAAA3E,KAIA7D,KAAAqC,MAAAoJ,cAAAzL,KAAAqC,MAAAoJ,cAAArC,EAAApJ,KAAAqC,MAAAoJ,gBACAzL,KAAAqC,MAAAoJ,aAAArC,IAIA1J,EAAAD,QAAA2C,GJoJM,SAAU1C,EAAQD,GK1uBxB,QAAAiM,GAAArJ,EAAAsJ,EAAAC,GACA,GAAA7L,GAAA0H,EACAoE,EAAA,UACA,KAAA9L,EAAA,EAAA0H,EAAA,EAAAmE,EAAA5G,OAAA,EAAAjF,EAAA0H,EAAA1H,GAAA,EACA8L,GAAA,MAAA9L,EAAA,OAAAA,EAAA,MAEA,IAAA+L,IAAAH,EAAA9H,EAAA8H,EAAAhG,EACA,KAAA5F,EAAA,EAAA0H,EAAAmE,EAAA5G,OAAAjF,EAAA0H,EAAA1H,IACA+L,EAAAzG,KAAAuG,EAAA7L,GAAA8D,GACAiI,EAAAzG,KAAAuG,EAAA7L,GAAA4F,EAEA,IAAArD,GAAAD,EAAAG,MAAAqJ,OAAAC,EACAxJ,GAAAqB,KAAA,SAAAtB,EAAApB,QAAA,kBACAqB,EAAAqB,KAAA,eAAAtB,EAAApB,QAAA,cAEA,IAAA+C,GAAA3B,EAAApB,QAAA+C,KACAC,EAAA5B,EAAApB,QAAA,eACAiD,EAAA7B,EAAApB,QAAA,cAMA,OAJA+C,IAAA1B,EAAAqB,MAAAK,SACAC,GAAA3B,EAAAqB,MAAAQ,cAAAF,IACAC,GAAA5B,EAAAqB,MAAAS,cAAAF,IAEA5B,EAGA,QAAAwD,GAAAzD,EAAA0J,EAAAC,EAAAzI,GACA,GAAAxD,GAAA0H,CAEA,oBAAAjG,OAAAE,UAAAuK,SAAAzL,KAAAwL,KACAA,MAGA,IAAAH,GAAA,UACA,KAAA9L,EAAA,EAAA0H,EAAA,EAAAuE,EAAAhH,OAAA,EAAAjF,EAAA0H,EAAA1H,GAAA,EACA8L,GAAA,MAAA9L,EAAA,OAAAA,EAAA,MAEA,IAAA+L,IAAAC,EAAAlI,EAAAkI,EAAApG,EACA,KAAA5F,EAAA,EAAA0H,EAAAuE,EAAAhH,OAAAjF,EAAA0H,EAAA1H,IACA+L,EAAAzG,KAAA2G,EAAAjM,GAAA8D,GACAiI,EAAAzG,KAAA2G,EAAAjM,GAAA4F,EAGA,IAAAwC,GAAA9F,EAAAG,MAAAqJ,OAAAC,EACA3D,GAAAxE,MACA4B,OAAAlD,EAAApB,QAAA,cACAuE,eAAAnD,EAAApB,QAAA,cACAiL,YAAA7J,EAAApB,QAAA,cAGA,IAAA+C,GAAA3B,EAAApB,QAAA+C,KACAC,EAAA5B,EAAApB,QAAA,eACAiD,EAAA7B,EAAApB,QAAA,cAMA,IAJA+C,GAAAmE,EAAAxE,MAAAK,SACAC,GAAAkE,EAAAxE,MAAAQ,cAAAF,IACAC,GAAAiE,EAAAxE,MAAAS,cAAAF,IAEAX,EAAA,CAEA,GAAA4I,IAAA,EAEAC,EAAA/J,EAAAG,MAAAe,KAAA,IAAAA,GACA8I,EAAA,QAEAC,GAAA,EACAC,EAAAP,EAAA,EAEAD,GAAApG,IAAA4G,EAAA5G,IACA2G,GAAA,EAGA,IAAAzI,GAAA,EACA8B,EAAA,CAEAwG,IAEAtI,EADAkI,EAAAlI,EAAA0I,EAAA1I,EACAkI,EAAAlI,GAAAkI,EAAAlI,EAAA0I,EAAA1I,GAAA,EAEA0I,EAAA1I,GAAA0I,EAAA1I,EAAAkI,EAAAlI,GAAA,EAIA8B,EADAoG,EAAApG,EAAA4G,EAAA5G,EACAoG,EAAApG,GAAAoG,EAAApG,EAAA4G,EAAA5G,GAAA,EAEA4G,EAAA5G,GAAA4G,EAAA5G,EAAAoG,EAAApG,GAAA,EAGA2G,GACAzI,GAAAuI,EAAAlH,UAAAC,MAAA,EACAQ,GAAAtD,EAAApB,QAAA,iBAEA4C,GAAAxB,EAAApB,QAAA,eACA0E,GAAAyG,EAAAlH,UAAAO,OAAA,KAGA5B,EAAAkI,EAAAlI,EACA8B,EAAAoG,EAAApG,EAEA2G,GACAP,EAAAlI,EAAA0I,EAAA1I,GACAA,GAAAxB,EAAApB,QAAA,iBACAoL,EAAA,OAEAxI,GAAAxB,EAAApB,QAAA,iBAEA0E,GAAAtD,EAAApB,QAAA,iBAEA4C,GAAAxB,EAAApB,QAAA,iBACA0E,GAAAtD,EAAApB,QAAA,eACA8K,EAAApG,EAAA4G,EAAA5G,IACAA,GAAA,EAAAtD,EAAApB,QAAA,kBAKAmL,EAAAzI,MACAC,cAAAyI,EACAtI,YAAA1B,EAAApB,QAAA,aACA6C,KAAAzB,EAAApB,QAAA,cACA4C,IACA8B,MAGA3B,GAAAoI,EAAAzI,MAAAK,SACAC,GAAAmI,EAAAzI,MAAAQ,cAAAF,IACAC,GAAAkI,EAAAzI,MAAAS,cAAAF,IAGA,MAAAiE,GAGA,QAAApC,GAAAyG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAC,GAAAlN,EAAAmN,EAAAC,EAAAC,EAAAC,GACAvJ,EAAA,KACA8B,EAAA,KACAyF,SAAA,EACAC,SAAA,EAGA,OADA2B,IAAAD,EAAAF,IAAAH,EAAAF,IAAAM,EAAAF,IAAAD,EAAAF,GACA,IAAAO,EACAI,GAEAtN,EAAA2M,EAAAI,EACAI,EAAAT,EAAAI,EACAM,GAAAJ,EAAAF,GAAA9M,GAAAiN,EAAAF,GAAAI,EACAE,GAAAT,EAAAF,GAAA1M,GAAA6M,EAAAF,GAAAQ,EACAnN,EAAAoN,EAAAF,EACAC,EAAAE,EAAAH,EAGAI,EAAAvJ,EAAA2I,EAAA1M,GAAA4M,EAAAF,GACAY,EAAAzH,EAAA8G,EAAA3M,GAAA6M,EAAAF,GAOA3M,EAAA,GAAAA,EAAA,IACAsN,EAAAhC,SAAA,GAGA6B,EAAA,GAAAA,EAAA,IACAG,EAAA/B,SAAA,GAGA+B,GAGA1N,EAAAD,SACAiM,WACA5F,WACAC,0BLqvBM,SAAUrG,EAAQD,EAASU,GM15BjC,QAAAS,GAAAyM,GAgJA,QAAAC,GAAAC,GACA,GAAAC,GAAAD,EAAArF,QAAA,OACAuF,EAAAF,EAAArF,QAAA,IACA,OAAAsF,IAAA,GAAAC,GAAA,EACAF,EAAAnI,UAAAoI,EAAAC,GAEA,KAGA,QAAAC,GAAAH,GACA,GAAAC,GAAAD,EAAArF,QAAA,OACAuF,EAAAF,EAAArF,QAAA,IACA,OAAAsF,IAAA,GAAAC,GAAA,EACAF,EAAAnI,UAAAoI,EAAAC,GAEA,GAGA,QAAAE,GAAAJ,GACA,GAAAC,GAAAD,EAAArF,QAAA,OACAuF,EAAAF,EAAArF,QAAA,IACA,OAAAsF,IAAA,GAAAC,GAAA,EACApL,EAAA+D,QAAAmH,EAAAnI,UAAA,EAAAoI,EAAA,IAEAnL,EAAA+D,QAAAmH,GAGA,QAAAK,GAAAL,GACA,GAAAlK,GAAA,OACAmK,EAAAD,EAAArF,QAAA,OACAuF,EAAAF,EAAArF,QAAA,IASA,OARAsF,IAAA,GAAAC,GAAA,IACApK,EAAAwK,EAAAzI,UAAAoI,EAAAC,GACApK,EAAA6E,QAAA,QACA,QAAA7E,GAAA,OAAAA,IACAA,EAAA,SAAAA,IAIAA,EAGA,QAAAyK,GAAAP,GACA,GAAAC,GAAAD,EAAArF,QAAA,OAAAuF,EAAAF,EAAArF,QAAA,KACA6F,EAAAR,EAAAnI,UAAAoI,EAAAC,EACAM,GAAA7F,QAAA,SAAA6F,IAAA3I,UAAA,EAAA2I,EAAA7F,QAAA,MACA,IAAA8F,GAAAD,EAAAlJ,MAAA,IACA,IAAAmJ,EAAAhJ,OAAA,EACA,MAAAwI,IAAA,GAAAC,GAAA,EAAAO,EAAA,MA/LAX,KAAA,GACAA,IAAAY,MAsHA,QApHA5L,IACA+D,WACA8H,MAAA,KACAC,QAAA,SAAAC,EAAAnN,GAWA,QAAAoN,GAAAd,GACA,GAAAe,EAAAf,EAAAzK,KACA,MAAAwL,GAAAf,EAAAzK,IAGA,QAAAyK,EAAA5K,YACA,YACA2L,EAAAf,EAAAzK,KAAA,GAAAyL,GAAAC,EAAAjB,EACA,MACA,WACAe,EAAAf,EAAAzK,KAAA,GAAA2L,GAAAD,EAAAjB,EACA,MACA,iBACAe,EAAAf,EAAAzK,KAAA,GAAA4L,GAAAF,EAAAjB,EACA,MACA,mBACAe,EAAAf,EAAAzK,KAAA,GAAA6L,GAAAH,EAAAjB,EACA,MACA,kBACAe,EAAAf,EAAAzK,KAAA,GAAA8L,GAAAJ,EAAAjB,EACA,MACA,iBACAe,EAAAf,EAAAzK,KAAA,GAAA+L,GAAAL,EAAAjB,EACA,MACA,gBACAe,EAAAf,EAAAzK,KAAA,GAAAgM,GAAAN,EAAAjB,EACA,MACA,SACA,UAAAwB,OAAA,sBAGA,MAAAT,GAAAf,EAAAzK,KAzCA,GAAAoE,GAAAlH,IAEAA,MAAAwO,SACAxO,KAAAwO,QAAAQ,OAGA,IAAAR,GAAA,GAAA3N,GAAAuN,EAAAnN,EACAjB,MAAAwO,SACA,IAAAF,OAoCA,QAAAW,GAAA1B,EAAA2B,EAAAC,GACA,GAAAC,GAAAf,EAAAd,EA2BA,OAzBArG,GAAAgH,QAAAX,EACAiB,EAAAa,UAAAD,GACAF,GAAAC,IAAAD,EAAAI,SACAJ,YAAA,IACAC,EAAAI,MAAAhC,GACA2B,EAAAK,IAAAH,GAEAD,EAAAK,KAAAjC,GACA2B,EAAAM,GAAAJ,IAEAF,YAAA,IACAC,EAAAM,QAAAlC,GACA2B,EAAAO,MAAAL,GAEAD,EAAAO,QAAAnC,GACA2B,EAAAQ,MAAAN,GAEAD,EAAAQ,QAAApC,GACA2B,EAAAS,MAAAP,IAGAF,EAAAU,KAAAR,IAIAA,EAAAE,OACAF,GAGAA,YAAA,IACA7B,EAAAgC,KACAN,EAAA1B,EAAAgC,IAAAH,EAAA7B,GAEAA,EAAAiC,IACAP,EAAA1B,EAAAiC,GAAAJ,EAAA7B,IAEA6B,YAAA,IACA7B,EAAAkC,OACAR,EAAA1B,EAAAkC,MAAAL,EAAA7B,GAEAA,EAAAmC,OACAT,EAAA1B,EAAAmC,MAAAN,EAAA7B,GAEAA,EAAAoC,OACAV,EAAA1B,EAAAoC,MAAAP,EAAA7B,IAEAA,EAAAlK,MACA4L,EAAA1B,EAAAlK,KAAA+L,EAAA7B,GAGA6B,IACApP,KAAAkO,OAEAM,EAAAvH,UAEA+H,MAAA,WACAhP,KAAAwO,QAAAQ,SAEA/N,QAAA,WACA,MAAAjB,MAAAwO,QAAAvN,UAIAgJ,KACA4F,EAAA,EACAC,EAAA,EAAAC,EAAA1C,EAAArI,OAAA8K,EAAAC,EAAAD,IACA,UAAAzC,EAAAyC,IAAA,OAAAzC,EAAAyC,EAAA,IACA,GAAAE,GAAA3C,EAAAjI,UAAAyK,EAAAC,EACAD,GAAAC,EAAA,EACA7F,EAAA5E,KAAA2K,EAAAC,QAAA,eAIAJ,EAAAxC,EAAArI,QACAiF,EAAA5E,KAAAgI,EAAA6C,OAAAL,GAGA,QAAA9F,GAAA,EAAAtC,EAAAwC,EAAAjF,OAAA+E,EAAAtC,GAAA,CACA,GAAA0I,GAAAlG,EAAAF,EAEAoG,GAAAjI,QAAA,SAAAiI,EAAAjI,QAAA,SAAAiI,EAAAjI,QAAA,SACA+B,EAAAF,EAAA,SAAAoG,EACAlG,EAAAsB,OAAAxB,EAAA,GACAtC,KAEAsC,IAuDA,KAAAE,EAAAjF,OAAA,IACA,GAAAmD,GAAA8B,EAAAsB,OAAA,QAAA0C,MAEA,IAAA9F,EAAAD,QAAA,UAEA,GAAAkI,GAAAjI,EAAAtD,MAAA,MACAvC,GACAQ,IAAAsN,EAAA,GAAAH,QAAA,aACAtN,WAAAyN,EAAA,GACA7M,KAAA,KACAc,KAAA,KACAK,OAAA,KACA9B,UAAA,KACA0B,SAAA,KACAzB,aACAM,WAIAA,EAAAiN,EAAA,GAAAC,MAAA,WACA,IAAAlN,KAAA6B,OAAA,EAEA,OADAsL,GAAAnN,EAAA,GAAA0B,MAAA,KACA9E,EAAA,EAAAA,EAAAuQ,EAAAtL,OAAAjF,IAAA,CACA,GAAAwQ,GAAAD,EAAAvQ,GAAA8E,MAAA,IACA,IAAA0L,EAAAvL,SACA1C,EAAAa,OAAAoN,EAAA,IAAAA,EAAA,IAKA,GAAAC,EA+BA,IA7BAlO,EAAAK,WAAAuF,QAAA,WACAsI,EAAAlO,EAAAK,WAAAkC,MAAA,MACAvC,EAAAK,WAAA6N,EAAAlJ,QACAhF,EAAAiB,KAAAiN,EAAAC,KAAA,OAGAnO,EAAAiB,MAAAjB,EAAAiB,KAAA2E,QAAA,UACAsI,EAAAlO,EAAAiB,KAAAsB,MAAA,MACAvC,EAAAiB,KAAAiN,EAAAlJ,QACAhF,EAAAgC,SAAAkM,EAAAC,KAAA,OACAnO,EAAAK,WAAAuF,QAAA,UACAsI,EAAAlO,EAAAK,WAAAkC,MAAA,MACAvC,EAAAK,WAAA6N,EAAAlJ,QACAhF,EAAAgC,SAAAkM,EAAAC,KAAA,OACAnO,EAAAiB,MAAAjB,EAAAiB,KAAA2E,QAAA,UACAsI,EAAAlO,EAAAiB,KAAAsB,MAAA,MACAvC,EAAAiB,KAAAiN,EAAAlJ,QACAhF,EAAA+B,KAAAmM,EAAAC,KAAA,OACAnO,EAAAK,WAAAuF,QAAA,WACAsI,EAAAlO,EAAAK,WAAAkC,MAAA,MACAvC,EAAAK,WAAA6N,EAAAlJ,QACAhF,EAAA+B,KAAAmM,EAAAC,KAAA,OAGAnO,EAAAK,WAAAuF,QAAA,WACA5F,EAAAK,WAAAL,EAAAK,WAAAkC,MAAA,UAIAvC,EAAA+B,KAAA,CACA,GAAAmJ,GAAAlL,EAAA+B,KAAA6D,QAAA,OACAuF,EAAAnL,EAAA+B,KAAA6D,QAAA,IACAsF,IAAA,GAAAC,GAAA,IACAnL,EAAAoC,OAAApC,EAAA+B,KAAAe,UAAAoI,EAAAC,GACAnL,EAAA+B,KAAA/B,EAAA+B,KAAAe,UAAA,EAAAoI,EAAA,IAMA,GAAAlL,EAAAiB,MACAjB,EAAAiB,KAAA2E,QAAA,SACA,GAAAwI,GAAApO,EAAAiB,KAAAsB,MAAA,IACAvC,GAAAM,UAAA8N,EAAAC,MAAA1C,OACA3L,EAAAiB,KAAAmN,EAAAD,KAAA,KAKApO,EAAA+D,QAAA9D,EAAAQ,KAAAR,MAEA,IAAA6F,EAAAD,QAAA,UACA,GAAA0I,GAAA9C,EAAA3F,EACAyI,KACAzI,IAAA8H,QAAA,IAAAW,EAAA,IAIA,QADAC,GAAA1I,EAAAtD,MAAA,MACAiM,EAAA,EAAAC,EAAAF,EAAA7L,OAAA8L,EAAAC,EAAAD,IAAA,CACA,GAAAjD,GAAAgD,EAAAC,GACAE,EAAAtD,EAAAG,EAEA,UAAAmD,GAAA,UAAAA,IAEAnD,IAAAoC,QAAA,cACApC,IAAAoC,QAAA,cAGA,IAAA5M,GAAAuK,EAAAC,GACAoD,EAAAtD,EAAAE,GAEAqD,EAAA,IACA,IAAA7N,EAAA6E,QAAA,SACA,GAAAiJ,GAAA9N,EAAAwB,MAAA,IACAxB,GAAA8N,EAAA,GACAD,EAAAC,EAAA,GAAAlD,OAeA,GAZA2C,IACA,OAAAvN,GAAA,QAAAA,EACA4N,EAAAG,eAAAR,EAEAK,EAAAI,cAAAT,EACAA,EAAA,MAGAvO,EAAA6L,QACA7L,EAAA6L,MAAA+C,GAGAH,EAAA,EAAAC,EAAA,CACA,GAAAO,GAAAT,EAAAC,EAAA,EACAG,GAAA5N,GAAAsK,EAAA2D,GACAL,EAAA,aAAA5N,GAAA6N,EACAA,EAAA,WAGA,IAAA/I,EAAAD,QAAA,SAIA,OADAqJ,GAAApJ,EAAAtD,MAAA,MACA2M,EAAA,EAAAC,EAAAF,EAAAvM,OAAAwM,EAAAC,EAAAD,IACA,GAAAA,EAAA,IAAAC,EAAA,CACA,GAAAC,GAAA/D,EAAA4D,EAAAC,IACAG,EAAAhE,EAAA4D,EAAAC,EAAA,GAEAE,GAAA,UAAAC,EAAA7O,KAAA8O,KAAAhR,MAAA0M,EAAAiE,EAAAC,EAAA,MAMA,MAAAnP,GA5VA,GAAAxB,GAAAV,EAAA,GACAoO,EAAApO,EAAA,IACAsO,EAAAtO,EAAA,IACAuO,EAAAvO,EAAA,IACAwO,EAAAxO,EAAA,IACAyO,EAAAzO,EAAA,IACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,EAwVAT,GAAAD,QAAAmB,GN66BM,SAAUlB,EAAQD,EAASU,GOvwCjC,QAAA0O,GAAAxM,EAAApB,GACAA,QACAmB,EAAA5B,KAAAR,KAAAqC,EAAApB,GACAjB,KAAAoR,eAAAnQ,EAAAmQ,eACApR,KAAAqR,cAAApQ,EAAAoQ,cACArR,KAAA6R,WAAA7R,KAAA0D,QAAA,eACA1D,KAAA8R,cAAA7Q,EAAA8Q,cACA/R,KAAAgS,aAAA/Q,EAAAgR,aACAjS,KAAAgS,cAAA,UAAAhS,KAAA8R,cAEA9R,KAAA8R,eAAA,WAAA9R,KAAAgS,eACAhS,KAAA8R,cAAA,SAFA9R,KAAAgS,aAAA,SAIAhS,KAAA8R,cAAA9R,KAAA8R,eAAA,SACA9R,KAAAgS,aAAAhS,KAAAgS,cAAA,OAEA,IAAA7M,GAAA,IACAM,EAAA,IACAyM,EAAA,EACAC,EAAA,CAEAnS,MAAAuD,KAAAI,MACAE,EAAA,IACA8B,EAAA,GACA/B,cAAA,SACAwO,oBAAA,UAGA,IAAAlE,IAAArK,EAAAqO,EAAAvM,EAAAwM,GAEAvG,IACA/H,EAAAqO,EAAAvM,EAAAwM,IACAtO,EAAAqO,EAAA/M,EAAAQ,EAAAwM,IACAtO,EAAAqO,EAAA/M,EAAAQ,EAAAwM,EAAA1M,IACA5B,EAAAqO,EAAAvM,EAAAwM,EAAA1M,IACA5B,EAAAqO,EAAAvM,EAAAwM,IAGA7P,EAAAoJ,EAAArJ,EAAA6L,EAAAtC,EAEAtJ,GAAAqB,MACA4B,OAAAvF,KAAA0D,QAAA,iBACA8B,eAAAxF,KAAA0D,QAAA,cACAI,KAAA9D,KAAA0D,QAAA,UAEAzC,EAAAoD,MAAA/B,EAAAqB,KAAA,OAAA1C,EAAAoD,MACApD,EAAAyD,QAAApC,EAAAqB,KAAA,SAAA1C,EAAAyD,QACAzD,EAAA6B,MAAAR,EAAAkB,KAAAlD,GAAAW,EAAA6B,KACAR,EAAAkB,KAAAC,aAAA,QAAAzD,KAAA0D,QAAA,UAEA1D,KAAAuC,MAAA8C,KAAA/C,GACAA,EAAAoD,aAAA1F,KAAAuD,MACAvD,KAAAsC,SAEAtC,KAAA4F,aA3DA,GAAAxD,GAAAjC,EAAA,GACAgC,EAAAhC,EAAA,GAAAgC,SACA0D,EAAA1F,EAAA,GACAuL,EAAA7F,EAAA6F,QA0DAvJ,GAAA0M,EAAAzM,GAEAyM,EAAAnN,UAAAuF,OAAA,WAEAjH,KAAA8R,gBACA9R,UAAA8R,cAAA,WAAA9R,KAAAqS,YAGArS,KAAAgS,eACAhS,UAAAgS,aAAA,WAAAhS,KAAAsS,UAGA,IAAAnL,GAAAnH,KAAA0D,QAAA,cAEA,IAAA1D,KAAAuS,cAAA,CACA,GAAAzK,GAAA9H,KAAA8G,WAEA9G,MAAAuS,cAAAlL,eACArH,KAAAuS,cAAA5L,OAAA3G,KAAAwG,OAAAxG,KAAAyF,OAAA0B,GACAnH,KAAAuS,cAAA7L,KAAAoB,EAAAjE,EAAA7D,KAAAuS,cAAApN,MAAA,GACAnF,KAAAuS,cAAAlL,cAAA,EAEArH,KAAAuS,cAAAtL,UAIA,GAAAjH,KAAAwS,aAAA,CACA,GAAApL,GAAApH,KAAAgH,UAEA,KAAAhH,KAAAwS,aAAAnL,aAAA,CAEArH,KAAAwS,aAAA5L,KAAAQ,EAAAzB,EAAA3F,KAAAwS,aAAA/M,OAAA,GACAzF,KAAAwS,aAAA/L,OAAAzG,KAAAuC,MAAA2C,UAAArB,EAAA7D,KAAAmF,MAAAgC,EAEA,IAAAD,GAAAlH,MACA,QAAAsH,KAGA,OADAC,GADAC,GAAA,EAEAzH,EAAA,EAAA0H,EAAAP,EAAA7E,MAAA+D,QAAApB,OAAAjF,EAAA0H,EAAA1H,IAGA,GAFAwH,EAAAL,EAAA7E,MAAA+D,QAAArG,IAEAmH,EAAA/D,OAAA,sBAAA+D,EAAA/D,OAAA,eACA,GAAAuE,GAAAC,KAAAC,IAAAL,EAAAjB,YAAAzC,EAAAqD,EAAAsL,aAAAlM,YAAAzC,EACA,IAAA0D,EAAAjB,YAAAX,EAAAuB,EAAAsL,aAAAlM,YAAAX,GAAA+B,GAAAR,EAAAsL,aAAArN,MAAA,GACAqC,GAAA,CACA,QAKA,GAAAA,EAAA,CACA,WAAAN,EAAAsL,aAAA7P,WAAA,MACAuE,GAAAsL,aAAA9L,KAAAa,EAAAhB,OAAAgB,EAAApC,MAAAgC,GACAG,QAIAtH,KAAAwS,aAAAnL,cAAA,EAEArH,KAAAwS,aAAAvL,UAIA,GAAAjH,KAAAyS,YAAA,CACA,GAAA5K,GAAA7H,KAAA+G,SAEA,KAAA/G,KAAAyS,YAAApL,aAAA,CACArH,KAAAyS,YAAA7L,KAAAiB,EAAAlC,EAAA3F,KAAAyS,YAAAhN,OAAA,GACAzF,KAAAyS,YAAAhM,SAAAzG,KAAAuC,MAAA2C,UAAArB,EAAA7D,KAAAmF,MAAAgC,GACA,IAAAD,GAAAlH,MACA,QAAAsH,KAGA,OADAC,GADAC,GAAA,EAEAzH,EAAA,EAAA0H,EAAAP,EAAA7E,MAAA+D,QAAApB,OAAAjF,EAAA0H,EAAA1H,IAGA,GAFAwH,EAAAL,EAAA7E,MAAA+D,QAAArG,IAEAmH,EAAA/D,OAAA,sBAAA+D,EAAA/D,OAAA,eACA,GAAAuE,GAAAC,KAAAC,IAAAL,EAAAjB,YAAAzC,EAAAqD,EAAAuL,YAAAnM,YAAAzC,EACA,IAAA0D,EAAAjB,YAAAX,EAAAuB,EAAAuL,YAAAnM,YAAAX,GAAA+B,GAAAR,EAAAuL,YAAAtN,MAAA,GACAqC,GAAA,CACA,QAKA,GAAAA,EAAA,CACA,WAAAN,EAAAuL,YAAA9P,WAAA,MACAuE,GAAAuL,YAAA/L,KAAAa,EAAAhB,OAAAgB,EAAApC,MAAAgC,GACAG,QAIAtH,KAAAyS,YAAApL,cAAA,EAEArH,KAAAyS,YAAAxL,YAKA4H,EAAAnN,UAAAqG,YAAA,WACA/H,KAAAqS,YACArS,KAAAgI,WAAAhI,KAAAqS,WAAArS,KAAAoR,eAAApR,KAAAoR,eAAApR,KAAA0D,QAAA,YAAA1D,KAAA8R,eAGA9R,KAAAsS,WACAtS,KAAAgI,WAAAhI,KAAAsS,UAAAtS,KAAAqR,cAAArR,KAAAqR,cAAArR,KAAA0D,QAAA,WAAA1D,KAAAgS,eAIAtS,EAAAD,QAAAoP,GPsxCM,SAAUnP,EAAQD,EAASU,GQ77CjC,QAAA2O,GAAAzM,EAAApB,GACA,GAAAqB,GAAAD,EAAAG,MAAAkQ,KAAA,QACAzR,SACAmB,EAAA5B,KAAAR,KAAAqC,EAAApB,EAAAqB,GACAtC,KAAA6R,WAAA7R,KAAA0D,QAAA,eACA1D,KAAA2S,gBAAA,SACA3S,KAAA4S,gBAAA,QACA5S,KAAA6S,gBAAA,MACA7S,KAAAmD,OAAAlC,EAAAkC,OACA,UAAAlC,EAAA6R,iBAAA7R,IAAA6R,iBAAA7R,EAAAoC,OACApC,IAAA6R,gBAAA7R,EAAAoC,MAEA,UAAApC,EAAA6R,iBAAA7R,IAAA6R,iBAAA7R,EAAAoC,OACApC,IAAA6R,gBAAA7R,EAAAoC,MAEA,UAAApC,EAAA6R,iBAAA7R,IAAA6R,iBAAA7R,EAAAoC,OACApC,IAAA6R,gBAAA7R,EAAAoC,MAGApC,EAAAwO,OAAAxO,EAAA8R,iBAAA9R,EAAAyO,QAAAzO,EAAA+R,iBAAA/R,EAAA0O,QAAA1O,EAAAgS,gBACA,UAAAhS,EAAA8R,iBACA/S,KAAA4S,gBAAA,SACA5S,KAAA2S,gBAAA,QACA3S,KAAA6S,gBAAA,OACA,QAAA5R,EAAA8R,iBACA/S,KAAA4S,gBAAA,QACA5S,KAAA2S,gBAAA,MACA3S,KAAA6S,gBAAA,UACA,SAAA5R,EAAA8R,iBACA/S,KAAA4S,gBAAA,QACA5S,KAAA2S,gBAAA,OACA3S,KAAA6S,gBAAA,WAEA7S,KAAA4S,gBAAA,QACA5S,KAAA2S,gBAAA,SACA3S,KAAA6S,gBAAA,OAEA5R,EAAAwO,QAAAxO,EAAA8R,iBAAA9R,EAAAyO,OAAAzO,EAAA+R,iBAAA/R,EAAA0O,QAAA1O,EAAAgS,gBACA,UAAAhS,EAAA+R,iBACAhT,KAAA2S,gBAAA,SACA3S,KAAA4S,gBAAA,QACA5S,KAAA6S,gBAAA,OACA,SAAA5R,EAAA+R,iBACAhT,KAAA2S,gBAAA,SACA3S,KAAA4S,gBAAA,OACA5S,KAAA6S,gBAAA,UAEA7S,KAAA2S,gBAAA,QACA3S,KAAA4S,gBAAA,SACA5S,KAAA6S,gBAAA,OAEA5R,EAAAwO,QAAAxO,EAAA8R,iBAAA9R,EAAAyO,QAAAzO,EAAA+R,iBAAA/R,EAAA0O,OAAA1O,EAAAgS,gBACA,UAAAhS,EAAA+R,iBACAhT,KAAA2S,gBAAA,SACA3S,KAAA4S,gBAAA,MACA5S,KAAA6S,gBAAA,SACA,SAAA5R,EAAA+R,iBACAhT,KAAA2S,gBAAA,SACA3S,KAAA4S,gBAAA,QACA5S,KAAA6S,gBAAA,SAEA7S,KAAA2S,gBAAA,QACA3S,KAAA4S,gBAAA,SACA5S,KAAA6S,gBAAA,QAGA7S,KAAA2S,gBAAA1R,EAAA8R,gBACA/S,KAAA4S,gBAAA3R,EAAA+R,gBACAhT,KAAA6S,gBAAA5R,EAAAgS,iBAGAjT,KAAA2S,gBAAA3S,KAAA2S,iBAAA,SACA3S,KAAA4S,gBAAA5S,KAAA4S,iBAAA,QACA5S,KAAA6S,gBAAA7S,KAAA6S,iBAAA,MAEA7S,KAAA4F,aA9EA,GAAAxD,GAAAjC,EAAA,GACAgC,EAAAhC,EAAA,GAAAgC,QA+EAA,GAAA2M,EAAA1M,GAEA0M,EAAApN,UAAAuF,OAAA,WAEAjH,KAAA2S,kBACA3S,UAAA2S,gBAAA,WAAA3S,KAAAkT,cAGAlT,KAAA4S,kBACA5S,UAAA4S,gBAAA,WAAA5S,KAAAmT,cAGAnT,KAAA6S,kBACA7S,UAAA6S,gBAAA,WAAA7S,KAAAoT,aAGA,IAAAjM,GAAAnH,KAAA0D,QAAA,cAEA,IAAA1D,KAAAuS,cAAA,CACA,GAAAzK,GAAA9H,KAAA8G,WAEA9G,MAAAuS,cAAAlL,eACArH,KAAAuS,cAAA5L,OAAA3G,KAAAwG,OAAAxG,KAAAyF,OAAA0B,GACAnH,KAAAuS,cAAA7L,KAAAoB,EAAAjE,EAAA7D,KAAAuS,cAAApN,MAAA,GACAnF,KAAAuS,cAAAlL,cAAA,EAEArH,KAAAuS,cAAAtL,UAIA,GAAAjH,KAAAqT,WAAA,CACA,GAAAC,GAAAtT,KAAA6G,QAEA7G,MAAAqT,WAAAhM,eACArH,KAAAqT,WAAA1M,OAAA3G,KAAAwG,OAAAxG,KAAAqT,WAAA5N,OAAA0B,GACAnH,KAAAqT,WAAA3M,KAAA4M,EAAAzP,EAAA7D,KAAAqT,WAAAlO,OACAnF,KAAAqT,WAAAhM,cAAA,EAEArH,KAAAqT,WAAApM,UAIA,GAAAC,GAAAlH,IAEA,IAAAA,KAAAyS,YAAA,CACA,GAAA5K,GAAA7H,KAAA+G,SAEA/G,MAAAyS,YAAApL,eACArH,KAAAyS,YAAA7L,KAAAiB,EAAAlC,EAAA3F,KAAAyS,YAAAhN,OAAA,GACAzF,KAAAyS,YAAAhM,SAAAzG,KAAAuC,MAAA2C,UAAArB,EAAA7D,KAAAmF,MAAAgC,IACA,QAAAG,KAGA,OADAC,GADAC,GAAA,EAEAzH,EAAA,EAAA0H,EAAAP,EAAA7E,MAAA+D,QAAApB,OAAAjF,EAAA0H,EAAA1H,IAGA,GAFAwH,EAAAL,EAAA7E,MAAA+D,QAAArG,IAEAmH,EAAA/D,OAAA,sBAAA+D,EAAA/D,OAAA,eACA,GAAAuE,GAAAC,KAAAC,IAAAL,EAAAjB,YAAAzC,EAAAqD,EAAAuL,YAAAnM,YAAAzC,EACA,IAAA0D,EAAAjB,YAAAX,EAAAuB,EAAAuL,YAAAnM,YAAAX,GAAA+B,GAAAR,EAAAuL,YAAAtN,MAAA,GACAqC,GAAA,CACA,QAKA,GAAAA,EAAA,CACA,WAAAN,EAAAuL,YAAA9P,WAAA,MACAuE,GAAAuL,YAAA/L,KAAAa,EAAAhB,OAAAgB,EAAApC,MAAAgC,GACAG,QAIAtH,KAAAyS,YAAApL,cAAA,EAEArH,KAAAyS,YAAAxL,UAIA,GAAAjH,KAAAwS,aAAA,CACA,GAAApL,GAAApH,KAAAgH,UAEAhH,MAAAwS,aAAAnL,eACArH,KAAAwS,aAAA5L,KAAAQ,EAAAzB,EAAA3F,KAAAwS,aAAA/M,OAAA,GACAzF,KAAAwS,aAAA/L,OAAAzG,KAAAuC,MAAA2C,UAAArB,EAAA7D,KAAAmF,MAAAgC,GACA,QAAAG,KAGA,OADAC,GADAC,GAAA,EAEAzH,EAAA,EAAA0H,EAAAP,EAAA7E,MAAA+D,QAAApB,OAAAjF,EAAA0H,EAAA1H,IAGA,GAFAwH,EAAAL,EAAA7E,MAAA+D,QAAArG,IAEAmH,EAAA/D,OAAA,sBAAA+D,EAAA/D,OAAA,eACA,GAAAuE,GAAAC,KAAAC,IAAAL,EAAAjB,YAAAzC,EAAAqD,EAAAsL,aAAAlM,YAAAzC,EACA,IAAA0D,EAAAjB,YAAAX,EAAAuB,EAAAsL,aAAAlM,YAAAX,GAAA+B,GAAAR,EAAAsL,aAAArN,MAAA,GACAqC,GAAA,CACA,QAKA,GAAAA,EAAA,CACA,WAAAN,EAAAsL,aAAA7P,WAAA,MACAuE,GAAAsL,aAAA9L,KAAAa,EAAAhB,OAAAgB,EAAApC,MAAAgC,GACAG,QAIAtH,KAAAwS,aAAAnL,cAAA,EAEArH,KAAAwS,aAAAvL,YAKA6H,EAAApN,UAAAqG,YAAA,WACA/H,KAAAkT,cACAlT,KAAAgI,WAAAhI,KAAAkT,aAAA,GAAAlT,KAAA2S,iBAGA3S,KAAAmT,cACAnT,KAAAgI,WAAAhI,KAAAmT,aAAA,GAAAnT,KAAA4S,iBAGA5S,KAAAoT,cACApT,KAAAgI,WAAAhI,KAAAoT,aAAA,GAAApT,KAAA6S,kBAIAnT,EAAAD,QAAAqP,GRy8CM,SAAUpP,EAAQD,EAASU,GSlpDjC,QAAAU,GAAAuN,EAAAnN,GACAA,QAEAjB,KAAAwC,MAAA,GAAA+Q,GAAAnF,GAEApO,KAAAiB,QAAAiB,EAAAjB,EAAAC,GAEAlB,KAAAoG,WACApG,KAAAiK,SACAjK,KAAAkO,MAAA,KAfA,GAAAqF,GAAApT,EAAA,IACA+B,EAAA/B,EAAA,GAAA+B,SACAhB,EAAAf,EAAA,GACA0O,EAAA1O,EAAA,GACA2O,EAAA3O,EAAA,EAcAU,GAAAa,UAAA8R,OAAA,SAAAlR,GACAtC,KAAAoG,QAAA8B,QAAA5F,KAAA,GACAtC,KAAAoG,QAAAf,KAAA/C,EAGA,IAAAmR,GAAAzT,IA+CA,OA7CAsC,aAAA,IACAA,EAAAiN,IAAA,SAAAoC,GAKA,MAJArP,GAAA+P,WAAAV,EACArP,EAAAgQ,YACAhQ,EAAAgN,QAAA,GAEAmE,EAAAD,OAAA7B,IAEArP,EAAAkN,GAAA,SAAAmC,GAKA,MAJArP,GAAAgQ,UAAAX,EACArP,EAAA+P,aACA/P,EAAAgN,QAAA,GAEAmE,EAAAD,OAAA7B,KAEArP,YAAA,IACAA,EAAAmN,MAAA,SAAAkC,GAKA,MAJArP,GAAA4Q,aAAAvB,EACArP,EAAA6Q,eACA7Q,EAAAgN,QAAA,GAEAmE,EAAAD,OAAA7B,IAEArP,EAAAoN,MAAA,SAAAiC,GAKA,MAJArP,GAAA6Q,aAAAxB,EACArP,EAAA8Q,eACA9Q,EAAAgN,QAAA,GAEAmE,EAAAD,OAAA7B,IAEArP,EAAAqN,MAAA,SAAAgC,GAKA,MAJArP,GAAA8Q,aAAAzB,EACArP,EAAA4Q,eACA5Q,EAAAgN,QAAA,GAEAmE,EAAAD,OAAA7B,KAGArP,EAAAsN,KAAA,SAAA+B,GAGA,MAFArP,GAAAe,KAAAsO,EACArP,EAAAgN,QAAA,EACAmE,EAAAD,OAAA7B,IAIArP,GAGAzB,EAAAa,UAAA2N,UAAA,SAAA/M,GAEA,MADAtC,MAAAkO,MAAA5L,EACAtC,KAAAwT,OAAAlR,IAGAzB,EAAAa,UAAAuF,OAAA,WACA,GAQA3E,GACA6F,EATAxD,EAAA,EACA+O,EAAA,EACA3T,EAAA,EACA0H,EAAA,EACA2B,EAAA,EACAuK,EAAA,EACAC,EAAA,EACAC,EAAA,CAIA,KAAA9T,EAAA,EAAA0H,EAAAzH,KAAAoG,QAAApB,OAAAjF,EAAA0H,EAAA1H,IACAuC,EAAAtC,KAAAoG,QAAArG,GACAuC,EAAA6C,MAAAR,IACAA,EAAArC,EAAA6C,OAEA7C,EAAAmD,OAAAiO,IACAA,EAAApR,EAAAmD,OAIA,KAAA1F,EAAA,EAAA0H,EAAAzH,KAAAoG,QAAApB,OAAAjF,EAAA0H,EAAA1H,IACAuC,EAAAtC,KAAAoG,QAAArG,GACAuC,EAAAmE,OAAAzG,KAAAiB,QAAA4C,GAAAc,EAAArC,EAAA6C,OAAA,EAAAnF,KAAAiB,QAAA,eACAqB,EAAAqE,OAAA3G,KAAAiB,QAAA0E,GAAA+N,EAAApR,EAAAmD,QAAA,EAAAzF,KAAAiB,QAAA,cASA,KANAjB,KAAAkO,MAAAjH,SAMAlH,EAAA,EAAA0H,EAAAzH,KAAAoG,QAAApB,OAAAjF,EAAA0H,EAAA1H,IACAuC,EAAAtC,KAAAoG,QAAArG,GACAuC,EAAAyF,aAGAqB,GAAApJ,KAAAyL,YAEA,IAAA5H,GACA8B,CAEA,KAAA5F,EAAA,EAAA0H,EAAAzH,KAAAoG,QAAApB,OAAAjF,EAAA0H,EAAA1H,IAAA,CACAuC,EAAAtC,KAAAoG,QAAArG,EACA,IAAA+T,GAAAxR,EAAAiE,MACA1C,GAAAiQ,EAAAxR,EAAA6C,MACAQ,EAAArD,EAAAkE,OAAAlE,EAAAmD,OACAqO,EAAAF,IACAA,EAAAE,GAEAjQ,EAAAuF,IACAA,EAAAvF,GAEA8B,EAAAgO,IACAA,EAAAhO,GAIA,IAAA5F,EAAA,EAAA0H,EAAAzH,KAAAiK,MAAAjF,OAAAjF,EAAA0H,EAAA1H,IAAA,CACAoI,EAAAnI,KAAAiK,MAAAlK,GAAAmF,UACArB,EAAAsE,EAAAtE,EACA8B,EAAAwC,EAAAxC,CACA,IAAAoO,GAAA5L,EAAA4L,GACAC,EAAA7L,EAAA6L,EACAnQ,GAAA+P,IACAA,EAAA/P,GAEA8B,EAAAkO,IACAA,EAAAlO,GAEAoO,EAAA3K,IACAA,EAAA2K,GAEAC,EAAAL,IACAA,EAAAK,GAIA,GAAAC,GAAAjU,KAAAiB,QAAA,MACAiT,EAAAlU,KAAAiB,QAAA,aAEAjB,MAAAwL,gBAAAoI,MAAA5T,KAAAwL,iBAEAoI,EAAA,IAAAA,GAAAM,GACAL,EAAA,IAAAA,GAAAK,EAEA,IAAA/O,GAAAiE,EAAA8K,EAAAN,EACAnO,EAAAkO,EAAAO,EAAAL,CAEA7T,MAAAwC,MAAA2R,QAAAhP,EAAA8O,EAAAxO,EAAAwO,GACAjU,KAAAwC,MAAA4R,WAAAR,EAAAC,EAAA1O,EAAAM,GAAA,IAGA5E,EAAAa,UAAAsN,MAAA,WACA,GAAAhP,KAAAwC,MAAA,CACA,GAAA6R,GAAArU,KAAAwC,MAAA8R,MACAD,GAAAE,YAAAF,EAAAE,WAAAC,YAAAH,KAIA3U,EAAAD,QAAAoB,GTiqDM,SAAUnB,EAAQD,GUp1DxBC,EAAAD,SACAoE,EAAA,EACA8B,EAAA,EACA8O,aAAA,EACAC,cAAA,GACAC,cAAA,GACA5Q,YAAA,GACA6Q,aAAA,QAIAC,aAAA,QACAC,gBAAA,QACAhR,KAAA,QACAiR,WAAA,MACAC,UAAA,KACA9I,YAAA,QACA+I,MAAA,YACAhB,MAAA,EACA7N,SACA8H,SACAgH,OACAC,aACAC,eACAC,aACAC,cACAC,eVs2DM,SAAU7V,EAAQD,GWh4DxB+V,MAAA9T,UAAAwG,UACAsN,MAAA9T,UAAAwG,QAAA,SAAAuN,GACA,YACA,WAAAzV,KACA,SAAA0V,UAEA,IAAAC,GAAAnU,OAAAxB,MACAyH,EAAAkO,EAAA3Q,SAAA,CACA,QAAAyC,EACA,QAEA,IAAAmO,GAAA,CASA,IARAC,UAAA7Q,OAAA,IACA4Q,EAAAE,OAAAD,UAAA,IACAD,KACAA,EAAA,EACA,IAAAA,MAAAG,KAAAH,KAAAG,OACAH,KAAA,OAAAjO,KAAAqO,MAAArO,KAAAC,IAAAgO,MAGAA,GAAAnO,EACA,QAGA,KADA,GAAAwO,GAAAL,GAAA,EAAAA,EAAAjO,KAAA2B,IAAA7B,EAAAE,KAAAC,IAAAgO,GAAA,GACAK,EAAAxO,EAAAwO,IACA,GAAAA,IAAAN,MAAAM,KAAAR,EACA,MAAAQ,EAGA,YAKAT,MAAA9T,UAAAwU,cACAV,MAAA9T,UAAAwU,YAAA,SAAAT,GACA,YACA,WAAAzV,KACA,SAAA0V,UAEA,IAAAC,GAAAnU,OAAAxB,MACAyH,EAAAkO,EAAA3Q,SAAA,CACA,QAAAyC,EACA,QAEA,IAAAmO,GAAAnO,CACAoO,WAAA7Q,OAAA,IACA4Q,EAAAE,OAAAD,UAAA,IACAD,KACAA,EAAA,EACA,IAAAA,MAAA,KAAAA,KAAA,OACAA,KAAA,OAAAjO,KAAAqO,MAAArO,KAAAC,IAAAgO,KAIA,KADA,GAAAK,GAAAL,GAAA,EAAAjO,KAAAwO,IAAAP,EAAAnO,EAAA,GAAAA,EAAAE,KAAAC,IAAAgO,GACAK,GAAA,EAAAA,IACA,GAAAA,IAAAN,MAAAM,KAAAR,EACA,MAAAQ,EAGA,YAIAG,OAAA1U,UAAAuM,OACAmI,OAAA1U,UAAAuM,KAAA,WACA,MAAAjO,MAAAiQ,QAAA,oBX44DM,SAAUvQ,EAAQD,EAASU,GY58DjC,QAAAsO,GAAApM,EAAApB,GACA,GAAAqB,GAAAD,EAAAG,MAAAkQ,KAAA,WACAzR,SACAA,EAAAsC,KAAAtC,EAAAsC,MAAA,MACAnB,EAAA5B,KAAAR,KAAAqC,EAAApB,EAAAqB,GAPA,GAAAF,GAAAjC,EAAA,GACAgC,EAAAhC,EAAA,GAAAgC,QAQAA,GAAAsM,EAAArM,GAEA1C,EAAAD,QAAAgP,GZy9DM,SAAU/O,EAAQD,EAASU,Ga/9DjC,QAAAwO,GAAAtM,EAAApB,GACAA,QACAmB,EAAA5B,KAAAR,KAAAqC,EAAApB,GACAjB,KAAA6R,WAAA7R,KAAA0D,QAAA,eAEA1D,KAAAuD,KAAAI,MACAE,EAAA,EAAA7D,KAAA6R,YAGA,IAAA1M,GAAAnF,KAAAuD,KAAA2B,UAAAC,MAAA,EAAAnF,KAAA6R,WACApM,EAAAzF,KAAAuD,KAAA2B,UAAAO,OAAA,EAAAzF,KAAA6R,WACAK,EAAAlS,KAAA6R,WACAM,EAAA1M,EAAA,EAEAyI,GAAArK,EAAAqO,EAAAvM,EAAAwM,GACAvG,IACA/H,EAAAqO,EAAAlS,KAAA6R,WAAAlM,EAAAF,IACA5B,EAAAqO,EAAAlS,KAAA6R,WAAA1M,EAAAQ,EAAAF,IACA5B,EAAAqO,EAAAlS,KAAA6R,WAAA1M,EAAA,EAAAnF,KAAA6R,WAAAlM,EAAA,IACA9B,EAAAqO,EAAAlS,KAAA6R,WAAA,EAAA7R,KAAA6R,WAAAlM,EAAA,IACA9B,EAAAqO,EAAAvM,EAAAwM,IAGA7P,EAAAoJ,EAAArJ,EAAA6L,EAAAtC,EAEAtJ,GAAAqB,MACA4B,OAAAvF,KAAA0D,QAAA,iBACA8B,eAAAxF,KAAA0D,QAAA,cACAI,KAAA9D,KAAA0D,QAAA,UAEAzC,EAAAoD,MAAA/B,EAAAqB,KAAA,OAAA1C,EAAAoD,MACApD,EAAAyD,QAAApC,EAAAqB,KAAA,SAAA1C,EAAAyD,QACAzD,EAAA6B,MAAAR,EAAAkB,KAAAlD,GAAAW,EAAA6B,KACAR,EAAAkB,KAAAC,aAAA,QAAAzD,KAAA0D,QAAA,UAEA1D,KAAAuD,KAAAI,MACAgC,EAAArD,EAAA4C,UAAAO,OAAA,IAGAzF,KAAAuC,MAAA8C,KAAA/C,GACAA,EAAAoD,aAAA1F,KAAAuD,MACAvD,KAAAsC,SAEAtC,KAAA4F,aAhDA,GAAAxD,GAAAjC,EAAA,GACAgC,EAAAhC,EAAA,GAAAgC,SACA0D,EAAA1F,EAAA,GACAuL,EAAA7F,EAAA6F,QA+CAvJ,GAAAwM,EAAAvM,GAEAuM,EAAAjN,UAAAqF,QAAA,WACA,GAAApB,GAAA3F,KAAAwG,OAAAxG,KAAAuC,MAAA2C,UAAAO,OAAA,EACA5B,EAAA7D,KAAAuG,OAAAvG,KAAA6R,UACA,QAAAhO,IAAA8B,MAGAgJ,EAAAjN,UAAAsF,SAAA,WACA,GAAArB,GAAA3F,KAAAwG,OAAAxG,KAAAuC,MAAA2C,UAAAO,OAAA,EACA5B,EAAA7D,KAAAuG,OAAAvG,KAAAuC,MAAA2C,UAAAC,MAAAnF,KAAA6R,UACA,QAAAhO,IAAA8B,MAGAjG,EAAAD,QAAAkP,Gb8+DM,SAAUjP,EAAQD,EAASU,Gc3iEjC,QAAAuO,GAAArM,EAAApB,GACA,GAAAqB,GAAAD,EAAAG,MAAAkQ,KAAA,QACAzR,SACAmB,EAAA5B,KAAAR,KAAAqC,EAAApB,EAAAqB,GANA,GAAAF,GAAAjC,EAAA,GACAgC,EAAAhC,EAAA,GAAAgC,QAOAA,GAAAuM,EAAAtM,GAEA1C,EAAAD,QAAAiP,GdwjEM,SAAUhP,EAAQD,EAASU,Ge/jEjC,QAAAoO,GAAAlM,EAAApB,GACA,GAAAqB,GAAAD,EAAAG,MAAAkQ,KAAA,WACAzR,SACAA,EAAAsC,KAAAtC,EAAAsC,MAAA,QACAnB,EAAA5B,KAAAR,KAAAqC,EAAApB,EAAAqB,GAPA,GAAAF,GAAAjC,EAAA,GACAgC,EAAAhC,EAAA,GAAAgC,QAQAA,GAAAoM,EAAAnM,GAEA1C,EAAAD,QAAA8O,GfmmEM,SAAU7O,EAAQD,EAASU,GgB3mEjC,QAAAyO,GAAAvM,EAAApB,GACA,GAAAqB,GAAAD,EAAAG,MAAAkQ,KAAA,QACAzR,SACAmB,EAAA5B,KAAAR,KAAAqC,EAAApB,EAAAqB,GAEAA,EAAAqB,MACAwB,MAAAnF,KAAAuD,KAAA2B,UAAAC,MAAA,EAAAnF,KAAA0D,QAAA,iBAGA1D,KAAAuD,KAAAI,MACAE,EAAA,EAAA7D,KAAA0D,QAAA,gBAGA,IAAA2S,GAAAhU,EAAAG,MAAAkQ,KAAA,QACA2D,GAAA1S,MACAE,EAAA7D,KAAA0D,QAAA,eACA6B,OAAAvF,KAAA0D,QAAA,iBACA8B,eAAAxF,KAAA0D,QAAA,cACAyB,MAAAnF,KAAAuD,KAAA2B,UAAAC,MAAA,EAAAnF,KAAA0D,QAAA,eACA+B,OAAAzF,KAAAuD,KAAA2B,UAAAO,OAAA,EAAAzF,KAAA0D,QAAA,eACAI,KAAA9D,KAAA0D,QAAA,UAEAzC,EAAA6B,MAAAuT,EAAA7S,KAAAlD,GAAAW,EAAA6B,IAAA,IAEA,IAAAkB,GAAAhE,KAAA0D,QAAA,QACAO,EAAAjE,KAAA0D,QAAA,eACAQ,EAAAlE,KAAA0D,QAAA,cAEAM,IAAAqS,EAAA1S,MAAAK,SACAC,GAAAoS,EAAA1S,MAAAQ,cAAAF,IACAC,GAAAmS,EAAA1S,MAAAS,cAAAF,IAEAjD,EAAAoD,MAAAgS,EAAA1S,KAAA,OAAA1C,EAAAoD,MACApD,EAAAyD,QAAA2R,EAAA1S,KAAA,SAAA1C,EAAAyD,QACA1E,KAAAuC,MAAA8C,KAAAgR,GACAA,EAAA3Q,aAAA1F,KAAAuD,MAEAvD,KAAA4F,aAxCA,GAAAxD,GAAAjC,EAAA,GACAgC,EAAAhC,EAAA,GAAAgC,QAyCAA,GAAAyM,EAAAxM,GAEA1C,EAAAD,QAAAmP,GhBwnEM,SAAUlP,EAAQD,EAASU,GiBpqEjC,sBAAAmW,QAAA,CACA,GAAA1V,GAAAT,EAAA,IAEA,SAAAoW,GACA,QAAAC,GAAAC,EAAAC,GACA,MAAAD,IAAAC,GACAlB,MAAAmB,QAAAD,OAAAE,SAAAH,IAAAC,EAAAE,SAAAd,OAAAW,KAEA,GAAAI,IACAC,KAAA,SAAA7V,GACA,MAAAjB,MAAA+W,KAAA,WACA,GAAAC,GAAAT,EAAAvW,KACAA,MAAAqC,MAAAzB,EAAAoW,EAAAzT,QACAyT,EAAAC,KAAA,IACAjX,KAAAqC,MAAA8L,QAAAnO,KAAAiB,MAGAiW,oBAAA,SAAAC,EAAAC,EAAAC,GACA,MAAArX,MAAA+W,KAAA,WACA,GAAA1U,GAAArC,KAAAqC,MAGAiV,GAAA,0CAEA,QAAAC,KAAAlV,GAAA+D,QACA,GAAA/D,EAAA+D,QAAAoR,eAAAD,GAAA,CACA,GAAAjV,GAAAD,EAAA+D,QAAAmR,GACAE,EAAAnV,EAAAa,OAAAgU,EACA,IAAAX,EAAAiB,EAAAL,GAAA,CACA9U,EAAAM,UAAAyU,CACA,QAAAK,GAAA,EAAAA,EAAAJ,EAAAtS,OAAA0S,IAAA,CACA,GAAAC,GAAAL,EAAAI,EAEApV,GAAAqV,IACArV,EAAAqV,GAAA,QACArV,EAAAqV,GAAA,OAAAR,IACAX,EAAAlU,EAAAqV,GAAA,OAAAR,GAAAC,KAEA9U,EAAAO,UAAAP,EAAAqV,GAAA,MAAApS,OAAAlD,EAAApB,UAAA,UAAAoW,GAAA,SAOAhV,EAAA2M,QACA3M,EAAA8L,QAAAnO,SAIA4X,eAAA,WACA,MAAA5X,MAAA+W,KAAA,WACA,GAAA1U,GAAArC,KAAAqC,KAEA,QAAAkV,KAAAlV,GAAA+D,QACA,GAAA/D,EAAA+D,QAAAoR,eAAAD,GAAA,CACA,GAAA/T,GAAAnB,EAAA+D,QAAAmR;AACA/T,EAAAZ,UAAA,GAIAP,EAAA2M,QACA3M,EAAA8L,QAAAnO,SAKAuW,GAAAsB,GAAApE,UAAA,SAAAqE,GACA,MAAAjB,GAAAiB,GACAjB,EAAAiB,GAAAC,MAAA/X,KAAAwV,MAAA9T,UAAAsW,MAAAxX,KAAAqV,UAAA,IACA,gBAAAiC,UAIAvB,GAAA0B,MAAA,UAAAH,EAAA,uCAFAjB,EAAAC,KAAAiB,MAAA/X,KAAA6V,aAMAS,UjB+qEM,SAAU5W,EAAQD,GkB7vExBC,EAAAD,QAAAQ","file":"flowchart.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"Raphael\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"Raphael\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"Raphael\")) : factory(root[\"Raphael\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_16__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"Raphael\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"Raphael\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"Raphael\")) : factory(root[\"Raphael\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_16__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/*!******************!*\\\n  !*** ./index.js ***!\n  \\******************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(/*! ./src/flowchart.shim */ 9);\r\n\tvar parse = __webpack_require__(/*! ./src/flowchart.parse */ 4);\r\n\t__webpack_require__(/*! ./src/jquery-plugin */ 15);\r\n\t\r\n\tvar FlowChart = {\r\n\t\tparse: parse\r\n\t};\r\n\t\r\n\tif (typeof window !== 'undefined') {\r\n\t\twindow.flowchart = FlowChart;\r\n\t}\r\n\t\r\n\tmodule.exports = FlowChart;\r\n\n\n/***/ }),\n/* 1 */\n/*!**********************************!*\\\n  !*** ./src/flowchart.helpers.js ***!\n  \\**********************************/\n/***/ (function(module, exports) {\n\n\tfunction _defaults(options, defaultOptions) {\r\n\t  if (!options || typeof options === 'function') {\r\n\t    return defaultOptions;\r\n\t  }\r\n\t\r\n\t  var merged = {};\r\n\t  for (var attrname in defaultOptions) {\r\n\t    merged[attrname] = defaultOptions[attrname];\r\n\t  }\r\n\t\r\n\t  for (attrname in options) {\r\n\t    if (options[attrname]) {\r\n\t      if (typeof merged[attrname] === 'object') {\r\n\t        merged[attrname] = _defaults(merged[attrname], options[attrname]);\r\n\t      } else {\r\n\t        merged[attrname] = options[attrname];\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t  return merged;\r\n\t}\r\n\t\r\n\tfunction _inherits(ctor, superCtor) {\r\n\t  if (typeof(Object.create) === 'function') {\r\n\t    // implementation from standard node.js 'util' module\r\n\t    ctor.super_ = superCtor;\r\n\t    ctor.prototype = Object.create(superCtor.prototype, {\r\n\t      constructor: {\r\n\t        value: ctor,\r\n\t        enumerable: false,\r\n\t        writable: true,\r\n\t        configurable: true\r\n\t      }\r\n\t    });\r\n\t  } else {\r\n\t    // old school shim for old browsers\r\n\t    ctor.super_ = superCtor;\r\n\t    var TempCtor = function () {};\r\n\t    TempCtor.prototype = superCtor.prototype;\r\n\t    ctor.prototype = new TempCtor();\r\n\t    ctor.prototype.constructor = ctor;\r\n\t  }\r\n\t}\r\n\t\r\n\t// move dependent functions to a container so that\r\n\t// they can be overriden easier in no jquery environment (node.js)\r\n\tmodule.exports = {\r\n\t  defaults: _defaults,\r\n\t  inherits: _inherits\r\n\t};\r\n\n\n/***/ }),\n/* 2 */\n/*!*********************************!*\\\n  !*** ./src/flowchart.symbol.js ***!\n  \\*********************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar drawAPI = __webpack_require__(/*! ./flowchart.functions */ 3);\r\n\tvar drawLine = drawAPI.drawLine;\r\n\tvar checkLineIntersection = drawAPI.checkLineIntersection;\r\n\t\r\n\tfunction Symbol(chart, options, symbol) {\r\n\t  this.chart = chart;\r\n\t  this.group = this.chart.paper.set();\r\n\t  this.symbol = symbol;\r\n\t  this.connectedTo = [];\r\n\t  this.symbolType = options.symbolType;\r\n\t  this.flowstate = (options.flowstate || 'future');\r\n\t  this.lineStyle = (options.lineStyle || {});\r\n\t  this.key = (options.key || '');\r\n\t  this.leftLines = [];\r\n\t  this.rightLines = [];\r\n\t  this.topLines = [];\r\n\t  this.bottomLines = [];\r\n\t  this.params = options.params;\r\n\t\r\n\t  this.next_direction = options.next && options['direction_next'] ? options['direction_next'] : undefined;\r\n\t\r\n\t  this.text = this.chart.paper.text(0, 0, options.text);\r\n\t  //Raphael does not support the svg group tag so setting the text node id to the symbol node id plus t\r\n\t  if (options.key) { this.text.node.id = options.key + 't'; }\r\n\t  this.text.node.setAttribute('class', this.getAttr('class') + 't');\r\n\t\r\n\t  this.text.attr({\r\n\t    'text-anchor': 'start',\r\n\t    'x'          : this.getAttr('text-margin'),\r\n\t    'fill'       : this.getAttr('font-color'),\r\n\t    'font-size'  : this.getAttr('font-size')\r\n\t  });\r\n\t\r\n\t  var font  = this.getAttr('font');\r\n\t  var fontF = this.getAttr('font-family');\r\n\t  var fontW = this.getAttr('font-weight');\r\n\t\r\n\t  if (font) this.text.attr({ 'font': font });\r\n\t  if (fontF) this.text.attr({ 'font-family': fontF });\r\n\t  if (fontW) this.text.attr({ 'font-weight': fontW });\r\n\t\r\n\t  if (options.link) { this.text.attr('href', options.link); }\r\n\t  \r\n\t  //ndrqu Add click function with event and options params\r\n\t  if (options.function) { \r\n\t    this.text.attr({ 'cursor' : 'pointer' });\r\n\t\r\n\t    this.text.node.addEventListener(\"click\", function(evt) {\r\n\t        window[options.function](evt,options);\r\n\t    }, false);\r\n\t  }\r\n\t\r\n\t  if (options.target) { this.text.attr('target', options.target); }\r\n\t\r\n\t  var maxWidth = this.getAttr('maxWidth');\r\n\t  if (maxWidth) {\r\n\t    // using this approach: http://stackoverflow.com/a/3153457/22466\r\n\t    var words = options.text.split(' ');\r\n\t    var tempText = \"\";\r\n\t    for (var i=0, ii=words.length; i<ii; i++) {\r\n\t      var word = words[i];\r\n\t      this.text.attr(\"text\", tempText + \" \" + word);\r\n\t      if (this.text.getBBox().width > maxWidth) {\r\n\t        tempText += \"\\n\" + word;\r\n\t      } else {\r\n\t        tempText += \" \" + word;\r\n\t      }\r\n\t    }\r\n\t    this.text.attr(\"text\", tempText.substring(1));\r\n\t  }\r\n\t\r\n\t  this.group.push(this.text);\r\n\t\r\n\t  if (symbol) {\r\n\t    var tmpMargin = this.getAttr('text-margin');\r\n\t\r\n\t    symbol.attr({\r\n\t      'fill' : this.getAttr('fill'),\r\n\t      'stroke' : this.getAttr('element-color'),\r\n\t      'stroke-width' : this.getAttr('line-width'),\r\n\t      'width' : this.text.getBBox().width + 2 * tmpMargin,\r\n\t      'height' : this.text.getBBox().height + 2 * tmpMargin\r\n\t    });\r\n\t\r\n\t    symbol.node.setAttribute('class', this.getAttr('class'));\r\n\t\r\n\t    if (options.link) { symbol.attr('href', options.link); }\r\n\t    if (options.target) { symbol.attr('target', options.target); }\r\n\t\r\n\t    //ndrqu Add click function with event and options params\r\n\t    if (options.function) { \r\n\t        symbol.node.addEventListener(\"click\", function(evt) {\r\n\t          window[options.function](evt,options);\r\n\t        }, false);\r\n\t      symbol.attr({ 'cursor' : 'pointer' });\r\n\t    }\r\n\t    if (options.key) { symbol.node.id = options.key; }\r\n\t\r\n\t    this.group.push(symbol);\r\n\t    symbol.insertBefore(this.text);\r\n\t\r\n\t    this.text.attr({\r\n\t      'y': symbol.getBBox().height/2\r\n\t    });\r\n\t\r\n\t    this.initialize();\r\n\t  }\r\n\t\r\n\t}\r\n\t\r\n\t/* Gets the attribute based on Flowstate, Symbol-Name and default, first found wins */\r\n\tSymbol.prototype.getAttr = function(attName) {\r\n\t  if (!this.chart) {\r\n\t    return undefined;\r\n\t  }\r\n\t  var opt3 = (this.chart.options) ? this.chart.options[attName] : undefined;\r\n\t  var opt2 = (this.chart.options.symbols) ? this.chart.options.symbols[this.symbolType][attName] : undefined;\r\n\t  var opt1;\r\n\t  if (this.chart.options.flowstate && this.chart.options.flowstate[this.flowstate]) {\r\n\t    opt1 = this.chart.options.flowstate[this.flowstate][attName];\r\n\t  }\r\n\t  return (opt1 || opt2 || opt3);\r\n\t};\r\n\t\r\n\tSymbol.prototype.initialize = function() {\r\n\t  this.group.transform('t' + this.getAttr('line-width') + ',' + this.getAttr('line-width'));\r\n\t\r\n\t  this.width = this.group.getBBox().width;\r\n\t  this.height = this.group.getBBox().height;\r\n\t};\r\n\t\r\n\tSymbol.prototype.getCenter = function() {\r\n\t  return {x: this.getX() + this.width/2,\r\n\t          y: this.getY() + this.height/2};\r\n\t};\r\n\t\r\n\tSymbol.prototype.getX = function() {\r\n\t  return this.group.getBBox().x;\r\n\t};\r\n\t\r\n\tSymbol.prototype.getY = function() {\r\n\t  return this.group.getBBox().y;\r\n\t};\r\n\t\r\n\tSymbol.prototype.shiftX = function(x) {\r\n\t  this.group.transform('t' + (this.getX() + x) + ',' + this.getY());\r\n\t};\r\n\t\r\n\tSymbol.prototype.setX = function(x) {\r\n\t  this.group.transform('t' + x + ',' + this.getY());\r\n\t};\r\n\t\r\n\tSymbol.prototype.shiftY = function(y) {\r\n\t  this.group.transform('t' + this.getX() + ',' + (this.getY() + y));\r\n\t};\r\n\t\r\n\tSymbol.prototype.setY = function(y) {\r\n\t  this.group.transform('t' + this.getX() + ',' + y);\r\n\t};\r\n\t\r\n\tSymbol.prototype.getTop = function() {\r\n\t  var y = this.getY();\r\n\t  var x = this.getX() + this.width/2;\r\n\t  return {x: x, y: y};\r\n\t};\r\n\t\r\n\tSymbol.prototype.getBottom = function() {\r\n\t  var y = this.getY() + this.height;\r\n\t  var x = this.getX() + this.width/2;\r\n\t  return {x: x, y: y};\r\n\t};\r\n\t\r\n\tSymbol.prototype.getLeft = function() {\r\n\t  var y = this.getY() + this.group.getBBox().height/2;\r\n\t  var x = this.getX();\r\n\t  return {x: x, y: y};\r\n\t};\r\n\t\r\n\tSymbol.prototype.getRight = function() {\r\n\t  var y = this.getY() + this.group.getBBox().height/2;\r\n\t  var x = this.getX() + this.group.getBBox().width;\r\n\t  return {x: x, y: y};\r\n\t};\r\n\t\r\n\tSymbol.prototype.render = function() {\r\n\t  if (this.next) {\r\n\t\r\n\t    var self = this;\r\n\t    var lineLength = this.getAttr('line-length');\r\n\t\r\n\t    if (this.next_direction === 'right') {\r\n\t\r\n\t      var rightPoint = this.getRight();\r\n\t\r\n\t      if (!this.next.isPositioned) {\r\n\t        this.next.setY(rightPoint.y - this.next.height/2);\r\n\t        this.next.shiftX(this.group.getBBox().x + this.width + lineLength);\r\n\t\r\n\t        (function shift() {\r\n\t          var hasSymbolUnder = false;\r\n\t          var symb;\r\n\t          for (var i = 0, len = self.chart.symbols.length; i < len; i++) {\r\n\t            symb = self.chart.symbols[i];\r\n\t\r\n\t            var diff = Math.abs(symb.getCenter().x - self.next.getCenter().x);\r\n\t            if (symb.getCenter().y > self.next.getCenter().y && diff <= self.next.width/2) {\r\n\t              hasSymbolUnder = true;\r\n\t              break;\r\n\t            }\r\n\t          }\r\n\t\r\n\t          if (hasSymbolUnder) {\r\n\t            if (self.next.symbolType === 'end') return;\r\n\t            self.next.setX(symb.getX() + symb.width + lineLength);\r\n\t            shift();\r\n\t          }\r\n\t        })();\r\n\t\r\n\t        this.next.isPositioned = true;\r\n\t\r\n\t        this.next.render();\r\n\t      }\r\n\t    } else if (this.next_direction === 'left') {\r\n\t\r\n\t      var leftPoint = this.getLeft();\r\n\t\r\n\t      if (!this.next.isPositioned) {\r\n\t        this.next.setY(leftPoint.y - this.next.height/2);\r\n\t        this.next.shiftX(-(this.group.getBBox().x + this.width + lineLength));\r\n\t\r\n\t        (function shift() {\r\n\t          var hasSymbolUnder = false;\r\n\t          var symb;\r\n\t          for (var i = 0, len = self.chart.symbols.length; i < len; i++) {\r\n\t            symb = self.chart.symbols[i];\r\n\t\r\n\t            var diff = Math.abs(symb.getCenter().x - self.next.getCenter().x);\r\n\t            if (symb.getCenter().y > self.next.getCenter().y && diff <= self.next.width/2) {\r\n\t              hasSymbolUnder = true;\r\n\t              break;\r\n\t            }\r\n\t          }\r\n\t\r\n\t          if (hasSymbolUnder) {\r\n\t            if (self.next.symbolType === 'end') return;\r\n\t            self.next.setX(symb.getX() + symb.width + lineLength);\r\n\t            shift();\r\n\t          }\r\n\t        })();\r\n\t\r\n\t        this.next.isPositioned = true;\r\n\t\r\n\t        this.next.render();\r\n\t      }\r\n\t    } else {\r\n\t      var bottomPoint = this.getBottom();\r\n\t\r\n\t      if (!this.next.isPositioned) {\r\n\t        this.next.shiftY(this.getY() + this.height + lineLength);\r\n\t        this.next.setX(bottomPoint.x - this.next.width/2);\r\n\t        this.next.isPositioned = true;\r\n\t\r\n\t        this.next.render();\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\tSymbol.prototype.renderLines = function() {\r\n\t  if (this.next) {\r\n\t    if (this.next_direction) {\r\n\t      this.drawLineTo(this.next, this.getAttr('arrow-text') || '', this.next_direction);\r\n\t    } else {\r\n\t      this.drawLineTo(this.next, this.getAttr('arrow-text') || '');\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\tSymbol.prototype.drawLineTo = function(symbol, text, origin) {\r\n\t  if (this.connectedTo.indexOf(symbol) < 0) {\r\n\t    this.connectedTo.push(symbol);\r\n\t  }\r\n\t\r\n\t  var x = this.getCenter().x,\r\n\t      y = this.getCenter().y,\r\n\t      right = this.getRight(),\r\n\t      bottom = this.getBottom(),\r\n\t      top = this.getTop(),\r\n\t      left = this.getLeft();\r\n\t\r\n\t  var symbolX = symbol.getCenter().x,\r\n\t      symbolY = symbol.getCenter().y,\r\n\t      symbolTop = symbol.getTop(),\r\n\t      symbolRight = symbol.getRight(),\r\n\t      symbolLeft = symbol.getLeft();\r\n\t\r\n\t  var isOnSameColumn = x === symbolX,\r\n\t      isOnSameLine = y === symbolY,\r\n\t      isUnder = y < symbolY,\r\n\t      isUpper = y > symbolY || this === symbol,\r\n\t      isLeft = x > symbolX,\r\n\t      isRight = x < symbolX;\r\n\t\r\n\t  var maxX = 0,\r\n\t      line,\r\n\t      yOffset,\r\n\t      lineLength = this.getAttr('line-length'),\r\n\t      lineWith = this.getAttr('line-width');\r\n\t\r\n\t  if ((!origin || origin === 'bottom') && isOnSameColumn && isUnder) {\r\n\t    if (symbol.topLines.length === 0 && this.bottomLines.length === 0) {\r\n\t      line = drawLine(this.chart, bottom, symbolTop, text);\r\n\t    } else {\r\n\t      yOffset = Math.max(symbol.topLines.length, this.bottomLines.length) * 10;\r\n\t      line = drawLine(this.chart, bottom, [\r\n\t        {x: symbolTop.x, y: symbolTop.y - yOffset},\r\n\t        {x: symbolTop.x, y: symbolTop.y}\r\n\t      ], text);\r\n\t    }\r\n\t    this.bottomLines.push(line);\r\n\t    symbol.topLines.push(line);\r\n\t    this.bottomStart = true;\r\n\t    symbol.topEnd = true;\r\n\t    maxX = bottom.x;\r\n\t  } else if ((!origin || origin === 'right') && isOnSameLine && isRight) {\r\n\t    if (symbol.leftLines.length === 0 && this.rightLines.length === 0) {\r\n\t      line = drawLine(this.chart, right, symbolLeft, text);\r\n\t    } else {\r\n\t      yOffset = Math.max(symbol.leftLines.length, this.rightLines.length) * 10;\r\n\t      line = drawLine(this.chart, right, [\r\n\t        {x: right.x, y: right.y - yOffset},\r\n\t        {x: right.x, y: symbolLeft.y - yOffset},\r\n\t        {x: symbolLeft.x, y: symbolLeft.y - yOffset},\r\n\t        {x: symbolLeft.x, y: symbolLeft.y}\r\n\t      ], text);\r\n\t    }\r\n\t    this.rightLines.push(line);\r\n\t    symbol.leftLines.push(line);\r\n\t    this.rightStart = true;\r\n\t    symbol.leftEnd = true;\r\n\t    maxX = symbolLeft.x;\r\n\t  } else if ((!origin || origin === 'left') && isOnSameLine && isLeft) {\r\n\t    if (symbol.rightLines.length === 0 && this.leftLines.length === 0) {\r\n\t      line = drawLine(this.chart, left, symbolRight, text);\r\n\t    } else {\r\n\t      yOffset = Math.max(symbol.rightLines.length, this.leftLines.length) * 10;\r\n\t      line = drawLine(this.chart, right, [\r\n\t        {x: right.x, y: right.y - yOffset},\r\n\t        {x: right.x, y: symbolRight.y - yOffset},\r\n\t        {x: symbolRight.x, y: symbolRight.y - yOffset},\r\n\t        {x: symbolRight.x, y: symbolRight.y}\r\n\t      ], text);\r\n\t    }\r\n\t    this.leftLines.push(line);\r\n\t    symbol.rightLines.push(line);\r\n\t    this.leftStart = true;\r\n\t    symbol.rightEnd = true;\r\n\t    maxX = symbolRight.x;\r\n\t  } else if ((!origin || origin === 'right') && isOnSameColumn && isUpper) {\r\n\t    yOffset = Math.max(symbol.topLines.length, this.rightLines.length) * 10;\r\n\t    line = drawLine(this.chart, right, [\r\n\t      {x: right.x + lineLength/2, y: right.y - yOffset},\r\n\t      {x: right.x + lineLength/2, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y}\r\n\t    ], text);\r\n\t    this.rightLines.push(line);\r\n\t    symbol.topLines.push(line);\r\n\t    this.rightStart = true;\r\n\t    symbol.topEnd = true;\r\n\t    maxX = right.x + lineLength/2;\r\n\t  } else if ((!origin || origin === 'right') && isOnSameColumn && isUnder) {\r\n\t    yOffset = Math.max(symbol.topLines.length, this.rightLines.length) * 10;\r\n\t    line = drawLine(this.chart, right, [\r\n\t      {x: right.x + lineLength/2, y: right.y - yOffset},\r\n\t      {x: right.x + lineLength/2, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y}\r\n\t    ], text);\r\n\t    this.rightLines.push(line);\r\n\t    symbol.topLines.push(line);\r\n\t    this.rightStart = true;\r\n\t    symbol.topEnd = true;\r\n\t    maxX = right.x + lineLength/2;\r\n\t  } else if ((!origin || origin === 'bottom') && isLeft) {\r\n\t    yOffset = Math.max(symbol.topLines.length, this.bottomLines.length) * 10;\r\n\t    if (this.leftEnd && isUpper) {\r\n\t      line = drawLine(this.chart, bottom, [\r\n\t        {x: bottom.x, y: bottom.y + lineLength/2 - yOffset},\r\n\t        {x: bottom.x + (bottom.x - symbolTop.x)/2, y: bottom.y + lineLength/2 - yOffset},\r\n\t        {x: bottom.x + (bottom.x - symbolTop.x)/2, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t        {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t        {x: symbolTop.x, y: symbolTop.y}\r\n\t      ], text);\r\n\t    } else {\r\n\t      line = drawLine(this.chart, bottom, [\r\n\t        {x: bottom.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t        {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t        {x: symbolTop.x, y: symbolTop.y}\r\n\t      ], text);\r\n\t    }\r\n\t    this.bottomLines.push(line);\r\n\t    symbol.topLines.push(line);\r\n\t    this.bottomStart = true;\r\n\t    symbol.topEnd = true;\r\n\t    maxX = bottom.x + (bottom.x - symbolTop.x)/2;\r\n\t  } else if ((!origin || origin === 'bottom') && isRight && isUnder) {\r\n\t    yOffset = Math.max(symbol.topLines.length, this.bottomLines.length) * 10;\r\n\t    line = drawLine(this.chart, bottom, [\r\n\t      {x: bottom.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y}\r\n\t    ], text);\r\n\t    this.bottomLines.push(line);\r\n\t    symbol.topLines.push(line);\r\n\t    this.bottomStart = true;\r\n\t    symbol.topEnd = true;\r\n\t    maxX = bottom.x;\r\n\t    if (symbolTop.x > maxX) maxX = symbolTop.x;\r\n\t  } else if ((!origin || origin === 'bottom') && isRight) {\r\n\t    yOffset = Math.max(symbol.topLines.length, this.bottomLines.length) * 10;\r\n\t    line = drawLine(this.chart, bottom, [\r\n\t      {x: bottom.x, y: bottom.y + lineLength/2 - yOffset},\r\n\t      {x: bottom.x + (bottom.x - symbolTop.x)/2, y: bottom.y + lineLength/2 - yOffset},\r\n\t      {x: bottom.x + (bottom.x - symbolTop.x)/2, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y}\r\n\t    ], text);\r\n\t    this.bottomLines.push(line);\r\n\t    symbol.topLines.push(line);\r\n\t    this.bottomStart = true;\r\n\t    symbol.topEnd = true;\r\n\t    maxX = bottom.x + (bottom.x - symbolTop.x)/2;\r\n\t  } else if ((origin && origin === 'right') && isLeft) {\r\n\t    yOffset = Math.max(symbol.topLines.length, this.rightLines.length) * 10;\r\n\t    line = drawLine(this.chart, right, [\r\n\t      {x: right.x + lineLength/2, y: right.y},\r\n\t      {x: right.x + lineLength/2, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y}\r\n\t    ], text);\r\n\t    this.rightLines.push(line);\r\n\t    symbol.topLines.push(line);\r\n\t    this.rightStart = true;\r\n\t    symbol.topEnd = true;\r\n\t    maxX = right.x + lineLength/2;\r\n\t  } else if ((origin && origin === 'right') && isRight) {\r\n\t    yOffset = Math.max(symbol.topLines.length, this.rightLines.length) * 10;\r\n\t    line = drawLine(this.chart, right, [\r\n\t      {x: symbolTop.x, y: right.y - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y - yOffset}\r\n\t    ], text);\r\n\t    this.rightLines.push(line);\r\n\t    symbol.topLines.push(line);\r\n\t    this.rightStart = true;\r\n\t    symbol.topEnd = true;\r\n\t    maxX = right.x + lineLength/2;\r\n\t  } else if ((origin && origin === 'bottom') && isOnSameColumn && isUpper) {\r\n\t    yOffset = Math.max(symbol.topLines.length, this.bottomLines.length) * 10;\r\n\t    line = drawLine(this.chart, bottom, [\r\n\t      {x: bottom.x, y: bottom.y + lineLength/2 - yOffset},\r\n\t      {x: right.x + lineLength/2, y: bottom.y + lineLength/2 - yOffset},\r\n\t      {x: right.x + lineLength/2, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y}\r\n\t    ], text);\r\n\t    this.bottomLines.push(line);\r\n\t    symbol.topLines.push(line);\r\n\t    this.bottomStart = true;\r\n\t    symbol.topEnd = true;\r\n\t    maxX = bottom.x + lineLength/2;\r\n\t  } else if ((origin === 'left') && isOnSameColumn && isUpper) {\r\n\t    var diffX = left.x - lineLength/2;\r\n\t    if (symbolLeft.x < left.x) {\r\n\t      diffX = symbolLeft.x - lineLength/2;\r\n\t    }\r\n\t    yOffset = Math.max(symbol.topLines.length, this.leftLines.length) * 10;\r\n\t    line = drawLine(this.chart, left, [\r\n\t      {x: diffX, y: left.y - yOffset},\r\n\t      {x: diffX, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y}\r\n\t    ], text);\r\n\t    this.leftLines.push(line);\r\n\t    symbol.topLines.push(line);\r\n\t    this.leftStart = true;\r\n\t    symbol.topEnd = true;\r\n\t    maxX = left.x;\r\n\t  } else if ((origin === 'left')) {\r\n\t    yOffset = Math.max(symbol.topLines.length, this.leftLines.length) * 10;\r\n\t    line = drawLine(this.chart, left, [\r\n\t      {x: symbolTop.x + (left.x - symbolTop.x)/2, y: left.y},\r\n\t      {x: symbolTop.x + (left.x - symbolTop.x)/2, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y}\r\n\t    ], text);\r\n\t    this.leftLines.push(line);\r\n\t    symbol.topLines.push(line);\r\n\t    this.leftStart = true;\r\n\t    symbol.topEnd = true;\r\n\t    maxX = left.x;\r\n\t  } else if ((origin === 'top')) {\r\n\t    yOffset = Math.max(symbol.topLines.length, this.topLines.length) * 10;\r\n\t    line = drawLine(this.chart, top, [\r\n\t      {x: top.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n\t      {x: symbolTop.x, y: symbolTop.y}\r\n\t    ], text);\r\n\t    this.topLines.push(line);\r\n\t    symbol.topLines.push(line);\r\n\t    this.topStart = true;\r\n\t    symbol.topEnd = true;\r\n\t    maxX = top.x;\r\n\t  }\r\n\t\r\n\t  //update line style\r\n\t  if (this.lineStyle[symbol.key] && line){\r\n\t    line.attr(this.lineStyle[symbol.key]);\r\n\t  }\r\n\t\r\n\t  if (line) {\r\n\t    for (var l = 0, llen = this.chart.lines.length; l < llen; l++) {\r\n\t      var otherLine = this.chart.lines[l];\r\n\t\r\n\t      var ePath = otherLine.attr('path'),\r\n\t          lPath = line.attr('path');\r\n\t\r\n\t      for (var iP = 0, lenP = ePath.length - 1; iP < lenP; iP++) {\r\n\t        var newPath = [];\r\n\t        newPath.push(['M', ePath[iP][1], ePath[iP][2]]);\r\n\t        newPath.push(['L', ePath[iP + 1][1], ePath[iP + 1][2]]);\r\n\t\r\n\t        var line1_from_x = newPath[0][1];\r\n\t        var line1_from_y = newPath[0][2];\r\n\t        var line1_to_x = newPath[1][1];\r\n\t        var line1_to_y = newPath[1][2];\r\n\t\r\n\t        for (var lP = 0, lenlP = lPath.length - 1; lP < lenlP; lP++) {\r\n\t          var newLinePath = [];\r\n\t          newLinePath.push(['M', lPath[lP][1], lPath[lP][2]]);\r\n\t          newLinePath.push(['L', lPath[lP + 1][1], lPath[lP + 1][2]]);\r\n\t\r\n\t          var line2_from_x = newLinePath[0][1];\r\n\t          var line2_from_y = newLinePath[0][2];\r\n\t          var line2_to_x = newLinePath[1][1];\r\n\t          var line2_to_y = newLinePath[1][2];\r\n\t\r\n\t          var res = checkLineIntersection(line1_from_x, line1_from_y, line1_to_x, line1_to_y, line2_from_x, line2_from_y, line2_to_x, line2_to_y);\r\n\t          if (res.onLine1 && res.onLine2) {\r\n\t\r\n\t            var newSegment;\r\n\t            if (line2_from_y === line2_to_y) {\r\n\t              if (line2_from_x > line2_to_x) {\r\n\t                newSegment = ['L', res.x + lineWith * 2,  line2_from_y];\r\n\t                lPath.splice(lP + 1, 0, newSegment);\r\n\t                newSegment = ['C', res.x + lineWith * 2,  line2_from_y, res.x, line2_from_y - lineWith * 4, res.x - lineWith * 2, line2_from_y];\r\n\t                lPath.splice(lP + 2, 0, newSegment);\r\n\t                line.attr('path', lPath);\r\n\t              } else {\r\n\t                newSegment = ['L', res.x - lineWith * 2,  line2_from_y];\r\n\t                lPath.splice(lP + 1, 0, newSegment);\r\n\t                newSegment = ['C', res.x - lineWith * 2,  line2_from_y, res.x, line2_from_y - lineWith * 4, res.x + lineWith * 2, line2_from_y];\r\n\t                lPath.splice(lP + 2, 0, newSegment);\r\n\t                line.attr('path', lPath);\r\n\t              }\r\n\t            } else {\r\n\t              if (line2_from_y > line2_to_y) {\r\n\t                newSegment = ['L', line2_from_x, res.y + lineWith * 2];\r\n\t                lPath.splice(lP + 1, 0, newSegment);\r\n\t                newSegment = ['C', line2_from_x, res.y + lineWith * 2, line2_from_x + lineWith * 4, res.y, line2_from_x, res.y - lineWith * 2];\r\n\t                lPath.splice(lP + 2, 0, newSegment);\r\n\t                line.attr('path', lPath);\r\n\t              } else {\r\n\t                newSegment = ['L', line2_from_x, res.y - lineWith * 2];\r\n\t                lPath.splice(lP + 1, 0, newSegment);\r\n\t                newSegment = ['C', line2_from_x, res.y - lineWith * 2, line2_from_x + lineWith * 4, res.y, line2_from_x, res.y + lineWith * 2];\r\n\t                lPath.splice(lP + 2, 0, newSegment);\r\n\t                line.attr('path', lPath);\r\n\t              }\r\n\t            }\r\n\t\r\n\t            lP += 2;\r\n\t          }\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t\r\n\t    this.chart.lines.push(line);\r\n\t    if (this.chart.minXFromSymbols === undefined || this.chart.minXFromSymbols > left.x) {\r\n\t      this.chart.minXFromSymbols = left.x;\r\n\t    }\r\n\t  }\r\n\t\r\n\t  if (!this.chart.maxXFromLine || (this.chart.maxXFromLine && maxX > this.chart.maxXFromLine)) {\r\n\t    this.chart.maxXFromLine = maxX;\r\n\t  }\r\n\t};\r\n\t\r\n\tmodule.exports = Symbol;\r\n\n\n/***/ }),\n/* 3 */\n/*!************************************!*\\\n  !*** ./src/flowchart.functions.js ***!\n  \\************************************/\n/***/ (function(module, exports) {\n\n\tfunction drawPath(chart, location, points) {\r\n\t  var i, len;\r\n\t  var path = 'M{0},{1}';\r\n\t  for (i = 2, len = 2 * points.length + 2; i < len; i+=2) {\r\n\t    path += ' L{' + i + '},{' + (i + 1) + '}';\r\n\t  }\r\n\t  var pathValues = [location.x, location.y];\r\n\t  for (i = 0, len = points.length; i < len; i++) {\r\n\t    pathValues.push(points[i].x);\r\n\t    pathValues.push(points[i].y);\r\n\t  }\r\n\t  var symbol = chart.paper.path(path, pathValues);\r\n\t  symbol.attr('stroke', chart.options['element-color']);\r\n\t  symbol.attr('stroke-width', chart.options['line-width']);\r\n\t\r\n\t  var font = chart.options.font;\r\n\t  var fontF = chart.options['font-family'];\r\n\t  var fontW = chart.options['font-weight'];\r\n\t\r\n\t  if (font) symbol.attr({ 'font': font });\r\n\t  if (fontF) symbol.attr({ 'font-family': fontF });\r\n\t  if (fontW) symbol.attr({ 'font-weight': fontW });\r\n\t\r\n\t  return symbol;\r\n\t}\r\n\t\r\n\tfunction drawLine(chart, from, to, text) {\r\n\t  var i, len;\r\n\t\r\n\t  if (Object.prototype.toString.call(to) !== '[object Array]') {\r\n\t    to = [to];\r\n\t  }\r\n\t\r\n\t  var path = 'M{0},{1}';\r\n\t  for (i = 2, len = 2 * to.length + 2; i < len; i+=2) {\r\n\t    path += ' L{' + i + '},{' + (i + 1) + '}';\r\n\t  }\r\n\t  var pathValues = [from.x, from.y];\r\n\t  for (i = 0, len = to.length; i < len; i++) {\r\n\t    pathValues.push(to[i].x);\r\n\t    pathValues.push(to[i].y);\r\n\t  }\r\n\t\r\n\t  var line = chart.paper.path(path, pathValues);\r\n\t  line.attr({\r\n\t    stroke: chart.options['line-color'],\r\n\t    'stroke-width': chart.options['line-width'],\r\n\t    'arrow-end': chart.options['arrow-end']\r\n\t  });\r\n\t\r\n\t  var font = chart.options.font;\r\n\t  var fontF = chart.options['font-family'];\r\n\t  var fontW = chart.options['font-weight'];\r\n\t\r\n\t  if (font) line.attr({ 'font': font });\r\n\t  if (fontF) line.attr({ 'font-family': fontF });\r\n\t  if (fontW) line.attr({ 'font-weight': fontW });\r\n\t\r\n\t  if (text) {\r\n\t\r\n\t    var centerText = false;\r\n\t\r\n\t    var textPath = chart.paper.text(0, 0, text);\r\n\t    var textAnchor = 'start';\r\n\t\r\n\t    var isHorizontal = false;\r\n\t    var firstTo = to[0];\r\n\t\r\n\t    if (from.y === firstTo.y) {\r\n\t      isHorizontal = true;\r\n\t    }\r\n\t\r\n\t    var x = 0,\r\n\t        y = 0;\r\n\t\r\n\t    if (centerText) {\r\n\t      if (from.x > firstTo.x) {\r\n\t        x = from.x - (from.x - firstTo.x)/2;\r\n\t      } else {\r\n\t        x = firstTo.x - (firstTo.x - from.x)/2;\r\n\t      }\r\n\t\r\n\t      if (from.y > firstTo.y) {\r\n\t        y = from.y - (from.y - firstTo.y)/2;\r\n\t      } else {\r\n\t        y = firstTo.y - (firstTo.y - from.y)/2;\r\n\t      }\r\n\t\r\n\t      if (isHorizontal) {\r\n\t        x -= textPath.getBBox().width/2;\r\n\t        y -= chart.options['text-margin'];\r\n\t      } else {\r\n\t        x += chart.options['text-margin'];\r\n\t        y -= textPath.getBBox().height/2;\r\n\t      }\r\n\t    } else {\r\n\t      x = from.x;\r\n\t      y = from.y;\r\n\t\r\n\t      if (isHorizontal) {\r\n\t        if (from.x > firstTo.x) {\r\n\t          x -= chart.options['text-margin']/2;\r\n\t          textAnchor = 'end';\r\n\t        } else {\r\n\t          x += chart.options['text-margin']/2;\r\n\t        }\r\n\t        y -= chart.options['text-margin'];\r\n\t      } else {\r\n\t        x += chart.options['text-margin']/2;\r\n\t        y += chart.options['text-margin'];\r\n\t        if (from.y > firstTo.y) {\r\n\t          y -= chart.options['text-margin']*2;\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t\r\n\t    textPath.attr({\r\n\t      'text-anchor': textAnchor,\r\n\t      'font-size': chart.options['font-size'],\r\n\t      'fill': chart.options['font-color'],\r\n\t      x: x,\r\n\t      y: y\r\n\t    });\r\n\t\r\n\t    if (font) textPath.attr({ 'font': font });\r\n\t    if (fontF) textPath.attr({ 'font-family': fontF });\r\n\t    if (fontW) textPath.attr({ 'font-weight': fontW });\r\n\t  }\r\n\t\r\n\t  return line;\r\n\t}\r\n\t\r\n\tfunction checkLineIntersection(line1StartX, line1StartY, line1EndX, line1EndY, line2StartX, line2StartY, line2EndX, line2EndY) {\r\n\t  // if the lines intersect, the result contains the x and y of the intersection (treating the lines as infinite) and booleans for whether line segment 1 or line segment 2 contain the point\r\n\t  var denominator, a, b, numerator1, numerator2, result = {\r\n\t    x: null,\r\n\t    y: null,\r\n\t    onLine1: false,\r\n\t    onLine2: false\r\n\t  };\r\n\t  denominator = ((line2EndY - line2StartY) * (line1EndX - line1StartX)) - ((line2EndX - line2StartX) * (line1EndY - line1StartY));\r\n\t  if (denominator === 0) {\r\n\t    return result;\r\n\t  }\r\n\t  a = line1StartY - line2StartY;\r\n\t  b = line1StartX - line2StartX;\r\n\t  numerator1 = ((line2EndX - line2StartX) * a) - ((line2EndY - line2StartY) * b);\r\n\t  numerator2 = ((line1EndX - line1StartX) * a) - ((line1EndY - line1StartY) * b);\r\n\t  a = numerator1 / denominator;\r\n\t  b = numerator2 / denominator;\r\n\t\r\n\t  // if we cast these lines infinitely in both directions, they intersect here:\r\n\t  result.x = line1StartX + (a * (line1EndX - line1StartX));\r\n\t  result.y = line1StartY + (a * (line1EndY - line1StartY));\r\n\t  /*\r\n\t  // it is worth noting that this should be the same as:\r\n\t  x = line2StartX + (b * (line2EndX - line2StartX));\r\n\t  y = line2StartX + (b * (line2EndY - line2StartY));\r\n\t  */\r\n\t  // if line1 is a segment and line2 is infinite, they intersect if:\r\n\t  if (a > 0 && a < 1) {\r\n\t    result.onLine1 = true;\r\n\t  }\r\n\t  // if line2 is a segment and line1 is infinite, they intersect if:\r\n\t  if (b > 0 && b < 1) {\r\n\t    result.onLine2 = true;\r\n\t  }\r\n\t  // if line1 and line2 are segments, they intersect if both of the above are true\r\n\t  return result;\r\n\t}\r\n\t\r\n\tmodule.exports = {\r\n\t\tdrawPath: drawPath,\r\n\t\tdrawLine: drawLine,\r\n\t\tcheckLineIntersection: checkLineIntersection\r\n\t};\r\n\n\n/***/ }),\n/* 4 */\n/*!********************************!*\\\n  !*** ./src/flowchart.parse.js ***!\n  \\********************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar FlowChart = __webpack_require__(/*! ./flowchart.chart */ 7);\r\n\tvar Start = __webpack_require__(/*! ./flowchart.symbol.start */ 13);\r\n\tvar End = __webpack_require__(/*! ./flowchart.symbol.end */ 10);\r\n\tvar Operation = __webpack_require__(/*! ./flowchart.symbol.operation */ 12);\r\n\tvar InputOutput = __webpack_require__(/*! ./flowchart.symbol.inputoutput */ 11);\r\n\tvar Subroutine = __webpack_require__(/*! ./flowchart.symbol.subroutine */ 14);\r\n\tvar Condition = __webpack_require__(/*! ./flowchart.symbol.condition */ 5);\r\n\tvar Parallel = __webpack_require__(/*! ./flowchart.symbol.parallel */ 6);\r\n\t\r\n\tfunction parse(input) {\r\n\t  input = input || '';\r\n\t  input = input.trim();\r\n\t\r\n\t  var chart = {\r\n\t    symbols: {},\r\n\t    start: null,\r\n\t    drawSVG: function(container, options) {\r\n\t      var self = this;\r\n\t\r\n\t      if (this.diagram) {\r\n\t        this.diagram.clean();\r\n\t      }\r\n\t\r\n\t      var diagram = new FlowChart(container, options);\r\n\t      this.diagram = diagram;\r\n\t      var dispSymbols = {};\r\n\t\r\n\t      function getDisplaySymbol(s) {\r\n\t        if (dispSymbols[s.key]) {\r\n\t          return dispSymbols[s.key];\r\n\t        }\r\n\t\r\n\t        switch (s.symbolType) {\r\n\t          case 'start':\r\n\t            dispSymbols[s.key] = new Start(diagram, s);\r\n\t            break;\r\n\t          case 'end':\r\n\t            dispSymbols[s.key] = new End(diagram, s);\r\n\t            break;\r\n\t          case 'operation':\r\n\t            dispSymbols[s.key] = new Operation(diagram, s);\r\n\t            break;\r\n\t          case 'inputoutput':\r\n\t            dispSymbols[s.key] = new InputOutput(diagram, s);\r\n\t            break;\r\n\t          case 'subroutine':\r\n\t            dispSymbols[s.key] = new Subroutine(diagram, s);\r\n\t            break;\r\n\t          case 'condition':\r\n\t            dispSymbols[s.key] = new Condition(diagram, s);\r\n\t            break;\r\n\t          case 'parallel':\r\n\t            dispSymbols[s.key] = new Parallel(diagram, s);\r\n\t            break;\r\n\t          default:\r\n\t            return new Error('Wrong symbol type!');\r\n\t        }\r\n\t\r\n\t        return dispSymbols[s.key];\r\n\t      }\r\n\t\r\n\t      (function constructChart(s, prevDisp, prev) {\r\n\t        var dispSymb = getDisplaySymbol(s);\r\n\t\r\n\t        if (self.start === s) {\r\n\t          diagram.startWith(dispSymb);\r\n\t        } else if (prevDisp && prev && !prevDisp.pathOk) {\r\n\t          if (prevDisp instanceof(Condition)) {\r\n\t            if (prev.yes === s) {\r\n\t              prevDisp.yes(dispSymb);\r\n\t            }\r\n\t            if (prev.no === s) {\r\n\t              prevDisp.no(dispSymb);\r\n\t            }\r\n\t          } else if (prevDisp instanceof(Parallel)) {\r\n\t            if (prev.path1 === s) {\r\n\t              prevDisp.path1(dispSymb);\r\n\t            }\r\n\t            if (prev.path2 === s) {\r\n\t              prevDisp.path2(dispSymb);\r\n\t            }\r\n\t            if (prev.path3 === s) {\r\n\t              prevDisp.path3(dispSymb);\r\n\t            }\r\n\t          } else {\r\n\t            prevDisp.then(dispSymb);\r\n\t          }\r\n\t        }\r\n\t\r\n\t        if (dispSymb.pathOk) {\r\n\t          return dispSymb;\r\n\t        }\r\n\t\r\n\t        if (dispSymb instanceof(Condition)) {\r\n\t          if (s.yes) {\r\n\t            constructChart(s.yes, dispSymb, s);\r\n\t          }\r\n\t          if (s.no) {\r\n\t            constructChart(s.no, dispSymb, s);\r\n\t          }\r\n\t        } else if (dispSymb instanceof(Parallel)) {\r\n\t          if (s.path1) {\r\n\t            constructChart(s.path1, dispSymb, s);\r\n\t          }\r\n\t          if (s.path2) {\r\n\t            constructChart(s.path2, dispSymb, s);\r\n\t          }\r\n\t          if (s.path3) {\r\n\t            constructChart(s.path3, dispSymb, s);\r\n\t          }\r\n\t        } else if (s.next) {\r\n\t          constructChart(s.next, dispSymb, s);\r\n\t        }\r\n\t\r\n\t        return dispSymb;\r\n\t      })(this.start);\r\n\t\r\n\t      diagram.render();\r\n\t    },\r\n\t    clean: function() {\r\n\t      this.diagram.clean();\r\n\t    },\r\n\t    options: function() {\r\n\t      return this.diagram.options;\r\n\t    }\r\n\t  };\r\n\t\r\n\t  var lines = [];\r\n\t  var prevBreak = 0;\r\n\t  for (var i0 = 1, i0len = input.length; i0 < i0len; i0++) {\r\n\t    if(input[i0] === '\\n' && input[i0 - 1] !== '\\\\') {\r\n\t      var line0 = input.substring(prevBreak, i0);\r\n\t      prevBreak = i0 + 1;\r\n\t      lines.push(line0.replace(/\\\\\\n/g, '\\n'));\r\n\t    }\r\n\t  }\r\n\t\r\n\t  if (prevBreak < input.length) {\r\n\t    lines.push(input.substr(prevBreak));\r\n\t  }\r\n\t\r\n\t  for (var l = 1, len = lines.length; l < len;) {\r\n\t    var currentLine = lines[l];\r\n\t\r\n\t    if (currentLine.indexOf('->') < 0 && currentLine.indexOf('=>') < 0 && currentLine.indexOf('@>') < 0) {\r\n\t      lines[l - 1] += '\\n' + currentLine;\r\n\t      lines.splice(l, 1);\r\n\t      len--;\r\n\t    } else {\r\n\t      l++;\r\n\t    }\r\n\t  }\r\n\t\r\n\t  function getStyle(s){\r\n\t    var startIndex = s.indexOf('(') + 1;\r\n\t    var endIndex = s.indexOf(')');\r\n\t    if (startIndex >= 0 && endIndex >= 0) {\r\n\t      return s.substring(startIndex,endIndex);\r\n\t    }\r\n\t    return '{}';\r\n\t  }\r\n\t\r\n\t  function getSymbValue(s){\r\n\t    var startIndex = s.indexOf('(') + 1;\r\n\t    var endIndex = s.indexOf(')');\r\n\t    if (startIndex >= 0 && endIndex >= 0) {\r\n\t      return s.substring(startIndex,endIndex);\r\n\t    }\r\n\t    return '';\r\n\t  }\r\n\t\r\n\t  function getSymbol(s) {\r\n\t    var startIndex = s.indexOf('(') + 1;\r\n\t    var endIndex = s.indexOf(')');\r\n\t    if (startIndex >= 0 && endIndex >= 0) {\r\n\t      return chart.symbols[s.substring(0, startIndex - 1)];\r\n\t    }\r\n\t    return chart.symbols[s];\r\n\t  }\r\n\t\r\n\t  function getNextPath(s) {\r\n\t    var next = 'next';\r\n\t    var startIndex = s.indexOf('(') + 1;\r\n\t    var endIndex = s.indexOf(')');\r\n\t    if (startIndex >= 0 && endIndex >= 0) {\r\n\t      next = flowSymb.substring(startIndex, endIndex);\r\n\t      if (next.indexOf(',') < 0) {\r\n\t        if (next !== 'yes' && next !== 'no') {\r\n\t          next = 'next, ' + next;\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t    return next;\r\n\t  }\r\n\t  \r\n\t  function getAnnotation(s) {\r\n\t\tvar startIndex = s.indexOf(\"(\") + 1, endIndex = s.indexOf(\")\");\r\n\t\tvar tmp = s.substring(startIndex, endIndex);\r\n\t\tif(tmp.indexOf(\",\") > 0) { tmp = tmp.substring(0, tmp.indexOf(\",\")); }\r\n\t\tvar tmp_split = tmp.split(\"@\");\r\n\t\tif(tmp_split.length > 1)\r\n\t\t\treturn startIndex >= 0 && endIndex >= 0 ? tmp_split[1] : \"\";\r\n\t  }\r\n\t\r\n\t  while (lines.length > 0) {\r\n\t    var line = lines.splice(0, 1)[0].trim();\r\n\t\r\n\t    if (line.indexOf('=>') >= 0) {\r\n\t      // definition\r\n\t      var parts = line.split('=>');\r\n\t      var symbol = {\r\n\t        key: parts[0].replace(/\\(.*\\)/, ''),\r\n\t        symbolType: parts[1],\r\n\t        text: null,\r\n\t        link: null,\r\n\t        target: null,\r\n\t        flowstate: null,\r\n\t        function: null,\r\n\t        lineStyle: {},\r\n\t        params: {}\r\n\t      };\r\n\t\r\n\t      //parse parameters\r\n\t      var params = parts[0].match(/\\((.*)\\)/);\r\n\t      if (params && params.length > 1){\r\n\t        var entries = params[1].split(',');\r\n\t        for(var i = 0; i < entries.length; i++) {\r\n\t          var entry = entries[i].split('=');\r\n\t          if (entry.length == 2) {\r\n\t            symbol.params[entry[0]] = entry[1];\r\n\t          }\r\n\t        }\r\n\t      }\r\n\t\r\n\t      var sub;\r\n\t\r\n\t      if (symbol.symbolType.indexOf(': ') >= 0) {\r\n\t        sub = symbol.symbolType.split(': ');\r\n\t        symbol.symbolType = sub.shift();\r\n\t        symbol.text = sub.join(': ');\r\n\t      }\r\n\t\r\n\t      if (symbol.text && symbol.text.indexOf(':$') >= 0) {\r\n\t        sub = symbol.text.split(':$');\r\n\t        symbol.text = sub.shift();\r\n\t        symbol.function = sub.join(':$');\r\n\t      } else if (symbol.symbolType.indexOf(':$') >= 0) {\r\n\t        sub = symbol.symbolType.split(':$');\r\n\t        symbol.symbolType = sub.shift();\r\n\t        symbol.function = sub.join(':$');\r\n\t      } else if (symbol.text && symbol.text.indexOf(':>') >= 0) {\r\n\t        sub = symbol.text.split(':>');\r\n\t        symbol.text = sub.shift();\r\n\t        symbol.link = sub.join(':>');\r\n\t      } else if (symbol.symbolType.indexOf(':>') >= 0) {\r\n\t        sub = symbol.symbolType.split(':>');\r\n\t        symbol.symbolType = sub.shift();\r\n\t        symbol.link = sub.join(':>');\r\n\t      }\r\n\t\r\n\t      if (symbol.symbolType.indexOf('\\n') >= 0) {\r\n\t        symbol.symbolType = symbol.symbolType.split('\\n')[0];\r\n\t      }\r\n\t\r\n\t      /* adding support for links */\r\n\t      if (symbol.link) {\r\n\t        var startIndex = symbol.link.indexOf('[') + 1;\r\n\t        var endIndex = symbol.link.indexOf(']');\r\n\t        if (startIndex >= 0 && endIndex >= 0) {\r\n\t          symbol.target = symbol.link.substring(startIndex, endIndex);\r\n\t          symbol.link = symbol.link.substring(0, startIndex - 1);\r\n\t        }\r\n\t      }\r\n\t      /* end of link support */\r\n\t\r\n\t      /* adding support for flowstates */\r\n\t      if (symbol.text) {\r\n\t        if (symbol.text.indexOf('|') >= 0) {\r\n\t          var txtAndState = symbol.text.split('|');\r\n\t          symbol.flowstate = txtAndState.pop().trim();\r\n\t          symbol.text = txtAndState.join('|');\r\n\t        }\r\n\t      }\r\n\t      /* end of flowstate support */\r\n\t\r\n\t      chart.symbols[symbol.key] = symbol;\r\n\t\r\n\t    } else if (line.indexOf('->') >= 0) {\r\n\t      var ann = getAnnotation(line);\r\n\t      if (ann) {\r\n\t        line = line.replace('@' + ann, ''); \r\n\t      }\r\n\t      // flow\r\n\t      var flowSymbols = line.split('->');\r\n\t      for (var iS = 0, lenS = flowSymbols.length; iS < lenS; iS++) {\r\n\t        var flowSymb = flowSymbols[iS];\r\n\t        var symbVal = getSymbValue(flowSymb);\r\n\t\r\n\t        if (symbVal === 'true' || symbVal === 'false') {\r\n\t          // map true or false to yes or no respectively\r\n\t          flowSymb = flowSymb.replace('true', 'yes');\r\n\t          flowSymb = flowSymb.replace('false', 'no');\r\n\t        }\r\n\t        \r\n\t        var next = getNextPath(flowSymb);\r\n\t        var realSymb = getSymbol(flowSymb);\r\n\t\r\n\t        var direction = null;\r\n\t        if (next.indexOf(',') >= 0) {\r\n\t          var condOpt = next.split(',');\r\n\t          next = condOpt[0];\r\n\t          direction = condOpt[1].trim();\r\n\t        }\r\n\t\r\n\t        if (ann) {\r\n\t          if (next == \"yes\" || next == \"true\")\r\n\t            realSymb.yes_annotation = ann;\r\n\t          else\r\n\t            realSymb.no_annotation = ann;\r\n\t          ann = null;\r\n\t        }\r\n\t\r\n\t        if (!chart.start) {\r\n\t          chart.start = realSymb;\r\n\t        }\r\n\t\r\n\t        if (iS + 1 < lenS) {\r\n\t          var nextSymb = flowSymbols[iS + 1];\r\n\t          realSymb[next] = getSymbol(nextSymb);\r\n\t          realSymb['direction_' + next] = direction;\r\n\t          direction = null;\r\n\t        }\r\n\t      }\r\n\t    } else if (line.indexOf('@>') >= 0) {\r\n\t\r\n\t      // line style\r\n\t      var lineStyleSymbols = line.split('@>');\r\n\t      for (var iSS = 0, lenSS = lineStyleSymbols.length; iSS < lenSS; iSS++) {\r\n\t        if ((iSS + 1) !== lenSS) {\r\n\t          var curSymb = getSymbol(lineStyleSymbols[iSS]);\r\n\t          var nextSymbol = getSymbol(lineStyleSymbols[iSS+1]);\r\n\t\r\n\t          curSymb['lineStyle'][nextSymbol.key] = JSON.parse(getStyle(lineStyleSymbols[iSS + 1]));\r\n\t        }\r\n\t      }\r\n\t    }\r\n\t\r\n\t  }\r\n\t  return chart;\r\n\t}\r\n\t\r\n\tmodule.exports = parse;\r\n\n\n/***/ }),\n/* 5 */\n/*!*******************************************!*\\\n  !*** ./src/flowchart.symbol.condition.js ***!\n  \\*******************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar Symbol = __webpack_require__(/*! ./flowchart.symbol */ 2);\r\n\tvar inherits = __webpack_require__(/*! ./flowchart.helpers */ 1).inherits;\r\n\tvar drawAPI = __webpack_require__(/*! ./flowchart.functions */ 3);\r\n\tvar drawPath = drawAPI.drawPath;\r\n\t\r\n\tfunction Condition(chart, options) {\r\n\t  options = options || {};\r\n\t  Symbol.call(this, chart, options);\r\n\t  this.yes_annotation = options.yes_annotation;\r\n\t  this.no_annotation = options.no_annotation;\r\n\t  this.textMargin = this.getAttr('text-margin');\r\n\t  this.yes_direction = options.direction_yes;\r\n\t  this.no_direction = options.direction_no;\r\n\t  if (!this.no_direction && this.yes_direction === 'right') {\r\n\t    this.no_direction = 'bottom';\r\n\t  } else if (!this.yes_direction && this.no_direction === 'bottom') {\r\n\t    this.yes_direction = 'right'\r\n\t  }\r\n\t  this.yes_direction = this.yes_direction || 'bottom';\r\n\t  this.no_direction = this.no_direction || 'right';\r\n\t\r\n\t  var width = 200;\r\n\t  var height = 100;\r\n\t  var startX = 0;\r\n\t  var startY = 0;\r\n\t\r\n\t  this.text.attr({\r\n\t    x: 100,\r\n\t    y: 50,\r\n\t    'text-anchor':'middle',\r\n\t    'dominant-baseline': 'middle'\r\n\t  });\r\n\t\r\n\t  var start = {x: startX, y: startY};\r\n\t \r\n\t  var points = [\r\n\t    {x: startX, y: startY},\r\n\t    {x: startX + width, y: startY},\r\n\t    {x: startX + width, y: startY + height},\r\n\t    {x: startX, y: startY + height},\r\n\t    {x: startX, y: startY}\r\n\t  ];\r\n\t\r\n\t  var symbol = drawPath(chart, start, points);\r\n\t\r\n\t  symbol.attr({\r\n\t    stroke: this.getAttr('element-color'),\r\n\t    'stroke-width': this.getAttr('line-width'),\r\n\t    fill: this.getAttr('fill')\r\n\t  });\r\n\t  if (options.link) { symbol.attr('href', options.link); }\r\n\t  if (options.target) { symbol.attr('target', options.target); }\r\n\t  if (options.key) { symbol.node.id = options.key; }\r\n\t  symbol.node.setAttribute('class', this.getAttr('class'));\r\n\t\r\n\t  this.group.push(symbol);\r\n\t  symbol.insertBefore(this.text);\r\n\t  this.symbol = symbol\r\n\t\r\n\t  this.initialize();\r\n\t}\r\n\tinherits(Condition, Symbol);\r\n\t\r\n\tCondition.prototype.render = function() {\r\n\t\r\n\t  if (this.yes_direction) {\r\n\t    this[this.yes_direction + '_symbol'] = this.yes_symbol;\r\n\t  }\r\n\t\r\n\t  if (this.no_direction) {\r\n\t    this[this.no_direction + '_symbol'] = this.no_symbol;\r\n\t  }\r\n\t\r\n\t  var lineLength = this.getAttr('line-length');\r\n\t\r\n\t  if (this.bottom_symbol) {\r\n\t    var bottomPoint = this.getBottom();\r\n\t\r\n\t    if (!this.bottom_symbol.isPositioned) {\r\n\t      this.bottom_symbol.shiftY(this.getY() + this.height + lineLength);\r\n\t      this.bottom_symbol.setX(bottomPoint.x - this.bottom_symbol.width/2);\r\n\t      this.bottom_symbol.isPositioned = true;\r\n\t\r\n\t      this.bottom_symbol.render();\r\n\t    }\r\n\t  }\r\n\t\r\n\t  if (this.right_symbol) {\r\n\t    var rightPoint = this.getRight();\r\n\t\r\n\t    if (!this.right_symbol.isPositioned) {\r\n\t\r\n\t      this.right_symbol.setY(rightPoint.y - this.right_symbol.height/2);\r\n\t      this.right_symbol.shiftX(this.group.getBBox().x + this.width + lineLength);\r\n\t\r\n\t      var self = this;\r\n\t      (function shift() {\r\n\t        var hasSymbolUnder = false;\r\n\t        var symb;\r\n\t        for (var i = 0, len = self.chart.symbols.length; i < len; i++) {\r\n\t          symb = self.chart.symbols[i];\r\n\t\r\n\t          if (!self.params['align-next'] || self.params['align-next'] !== 'no') { \r\n\t            var diff = Math.abs(symb.getCenter().x - self.right_symbol.getCenter().x);\r\n\t            if (symb.getCenter().y > self.right_symbol.getCenter().y && diff <= self.right_symbol.width/2) {\r\n\t              hasSymbolUnder = true;\r\n\t              break;\r\n\t            }\r\n\t          }\r\n\t        }\r\n\t\r\n\t        if (hasSymbolUnder) {\r\n\t          if (self.right_symbol.symbolType === 'end') return;\r\n\t          self.right_symbol.setX(symb.getX() + symb.width + lineLength);\r\n\t          shift();\r\n\t        }\r\n\t      })();\r\n\t\r\n\t      this.right_symbol.isPositioned = true;\r\n\t\r\n\t      this.right_symbol.render();\r\n\t    }\r\n\t  }\r\n\t  \r\n\t  if (this.left_symbol) {\r\n\t    var leftPoint = this.getLeft();\r\n\t  \r\n\t    if (!this.left_symbol.isPositioned) {\r\n\t      this.left_symbol.setY(leftPoint.y - this.left_symbol.height / 2);\r\n\t      this.left_symbol.shiftX(-(this.group.getBBox().x + this.width + lineLength));\r\n\t      var self = this;\r\n\t      (function shift() {\r\n\t        var hasSymbolUnder = false;\r\n\t        var symb;\r\n\t        for (var i = 0, len = self.chart.symbols.length; i < len; i++) {\r\n\t          symb = self.chart.symbols[i];\r\n\t    \r\n\t          if (!self.params['align-next'] || self.params['align-next'] !== 'no') {\r\n\t            var diff = Math.abs(symb.getCenter().x - self.left_symbol.getCenter().x);\r\n\t            if (symb.getCenter().y > self.left_symbol.getCenter().y && diff <= self.left_symbol.width / 2) {\r\n\t              hasSymbolUnder = true;\r\n\t              break;\r\n\t            }\r\n\t          }\r\n\t        }\r\n\t    \r\n\t        if (hasSymbolUnder) {\r\n\t          if (self.left_symbol.symbolType === 'end') return;\r\n\t          self.left_symbol.setX(symb.getX() + symb.width + lineLength);\r\n\t          shift();\r\n\t        }\r\n\t      })();\r\n\t  \r\n\t      this.left_symbol.isPositioned = true;\r\n\t  \r\n\t      this.left_symbol.render();\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\tCondition.prototype.renderLines = function() {\r\n\t  if (this.yes_symbol) {\r\n\t    this.drawLineTo(this.yes_symbol, this.yes_annotation ? this.yes_annotation : this.getAttr('yes-text'), this.yes_direction);\r\n\t  }\r\n\t\r\n\t  if (this.no_symbol) {\r\n\t    this.drawLineTo(this.no_symbol, this.no_annotation ? this.no_annotation : this.getAttr('no-text'), this.no_direction);\r\n\t  }\r\n\t};\r\n\t\r\n\tmodule.exports = Condition;\r\n\n\n/***/ }),\n/* 6 */\n/*!******************************************!*\\\n  !*** ./src/flowchart.symbol.parallel.js ***!\n  \\******************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar Symbol = __webpack_require__(/*! ./flowchart.symbol */ 2);\r\n\tvar inherits = __webpack_require__(/*! ./flowchart.helpers */ 1).inherits;\r\n\t\r\n\tfunction Parallel(chart, options) {\r\n\t  var symbol = chart.paper.rect(0, 0, 0, 0);\r\n\t  options = options || {};\r\n\t  Symbol.call(this, chart, options, symbol);\r\n\t  this.textMargin = this.getAttr('text-margin');\r\n\t  this.path1_direction = 'bottom';\r\n\t  this.path2_direction = 'right';\r\n\t  this.path3_direction = 'top';\r\n\t  this.params = options.params;\r\n\t  if (options.direction_next === 'path1' && !options[options.direction_next] && options.next) {\r\n\t    options[options.direction_next] = options.next;\r\n\t  }\r\n\t  if (options.direction_next === 'path2' && !options[options.direction_next] && options.next) {\r\n\t    options[options.direction_next] = options.next;\r\n\t  }\r\n\t  if (options.direction_next === 'path3' && !options[options.direction_next] && options.next) {\r\n\t    options[options.direction_next] = options.next;\r\n\t  }\r\n\t\r\n\t  if (options.path1 && options.direction_path1 && options.path2 && !options.direction_path2 && options.path3 && !options.direction_path3) {\r\n\t    if (options.direction_path1 === 'right') {\r\n\t      this.path2_direction = 'bottom';\r\n\t      this.path1_direction = 'right';\r\n\t      this.path3_direction = 'top';\r\n\t    } else if (options.direction_path1 === 'top') {\r\n\t      this.path2_direction = 'right';\r\n\t      this.path1_direction = 'top';\r\n\t      this.path3_direction = 'bottom';\r\n\t    } else if (options.direction_path1 === 'left') {\r\n\t      this.path2_direction = 'right';\r\n\t      this.path1_direction = 'left';\r\n\t      this.path3_direction = 'bottom';\r\n\t    } else {\r\n\t      this.path2_direction = 'right';\r\n\t      this.path1_direction = 'bottom';\r\n\t      this.path3_direction = 'top';\r\n\t    }\r\n\t  } else if (options.path1 && !options.direction_path1 && options.path2 && options.direction_path2 && options.path3 && !options.direction_path3) {\r\n\t    if (options.direction_path2 === 'right') {\r\n\t      this.path1_direction = 'bottom';\r\n\t      this.path2_direction = 'right';\r\n\t      this.path3_direction = 'top';\r\n\t    } else if (options.direction_path2 === 'left') {\r\n\t      this.path1_direction = 'bottom';\r\n\t      this.path2_direction = 'left';\r\n\t      this.path3_direction = 'right';\r\n\t    } else {\r\n\t      this.path1_direction = 'right';\r\n\t      this.path2_direction = 'bottom';\r\n\t      this.path3_direction = 'top';\r\n\t    }\r\n\t  } else if (options.path1 && !options.direction_path1 && options.path2 && !options.direction_path2 && options.path3 && options.direction_path3) {\r\n\t    if (options.direction_path2 === 'right') {\r\n\t      this.path1_direction = 'bottom';\r\n\t      this.path2_direction = 'top';\r\n\t      this.path3_direction = 'right';\r\n\t    } else if (options.direction_path2 === 'left') {\r\n\t      this.path1_direction = 'bottom';\r\n\t      this.path2_direction = 'right';\r\n\t      this.path3_direction = 'left';\r\n\t    } else {\r\n\t      this.path1_direction = 'right';\r\n\t      this.path2_direction = 'bottom';\r\n\t      this.path3_direction = 'top';\r\n\t    }\r\n\t  } else {\r\n\t    this.path1_direction = options.direction_path1;\r\n\t    this.path2_direction = options.direction_path2;\r\n\t    this.path3_direction = options.direction_path3;\r\n\t  }\r\n\t\r\n\t  this.path1_direction = this.path1_direction || 'bottom';\r\n\t  this.path2_direction = this.path2_direction || 'right';\r\n\t  this.path3_direction = this.path3_direction || 'top';\r\n\t\r\n\t  this.initialize();\r\n\t}\r\n\tinherits(Parallel, Symbol);\r\n\t\r\n\tParallel.prototype.render = function() {\r\n\t\r\n\t  if (this.path1_direction) {\r\n\t    this[this.path1_direction + '_symbol'] = this.path1_symbol;\r\n\t  }\r\n\t\r\n\t  if (this.path2_direction) {\r\n\t    this[this.path2_direction + '_symbol'] = this.path2_symbol;\r\n\t  }\r\n\t\r\n\t  if (this.path3_direction) {\r\n\t    this[this.path3_direction + '_symbol'] = this.path3_symbol;\r\n\t  }\r\n\t\r\n\t  var lineLength = this.getAttr('line-length');\r\n\t\r\n\t  if (this.bottom_symbol) {\r\n\t    var bottomPoint = this.getBottom();\r\n\t\r\n\t    if (!this.bottom_symbol.isPositioned) {\r\n\t      this.bottom_symbol.shiftY(this.getY() + this.height + lineLength);\r\n\t      this.bottom_symbol.setX(bottomPoint.x - this.bottom_symbol.width / 2);\r\n\t      this.bottom_symbol.isPositioned = true;\r\n\t\r\n\t      this.bottom_symbol.render();\r\n\t    }\r\n\t  }\r\n\t\r\n\t  if (this.top_symbol) {\r\n\t    var topPoint = this.getTop();\r\n\t\r\n\t    if (!this.top_symbol.isPositioned) {\r\n\t      this.top_symbol.shiftY(this.getY() - this.top_symbol.height - lineLength);\r\n\t      this.top_symbol.setX(topPoint.x + this.top_symbol.width);\r\n\t      this.top_symbol.isPositioned = true;\r\n\t\r\n\t      this.top_symbol.render();\r\n\t    }\r\n\t  }\r\n\t\r\n\t  var self = this;\r\n\t\r\n\t  if (this.left_symbol) {\r\n\t    var leftPoint = this.getLeft();\r\n\t\r\n\t    if (!this.left_symbol.isPositioned) {\r\n\t      this.left_symbol.setY(leftPoint.y - this.left_symbol.height / 2);\r\n\t      this.left_symbol.shiftX(-(this.group.getBBox().x + this.width + lineLength));\r\n\t      (function shift() {\r\n\t        var hasSymbolUnder = false;\r\n\t        var symb;\r\n\t        for (var i = 0, len = self.chart.symbols.length; i < len; i++) {\r\n\t          symb = self.chart.symbols[i];\r\n\t\r\n\t          if (!self.params['align-next'] || self.params['align-next'] !== 'no') {\r\n\t            var diff = Math.abs(symb.getCenter().x - self.left_symbol.getCenter().x);\r\n\t            if (symb.getCenter().y > self.left_symbol.getCenter().y && diff <= self.left_symbol.width / 2) {\r\n\t              hasSymbolUnder = true;\r\n\t              break;\r\n\t            }\r\n\t          }\r\n\t        }\r\n\t\r\n\t        if (hasSymbolUnder) {\r\n\t          if (self.left_symbol.symbolType === 'end') return;\r\n\t          self.left_symbol.setX(symb.getX() + symb.width + lineLength);\r\n\t          shift();\r\n\t        }\r\n\t      })();\r\n\t\r\n\t      this.left_symbol.isPositioned = true;\r\n\t\r\n\t      this.left_symbol.render();\r\n\t    }\r\n\t  }\r\n\t\r\n\t  if (this.right_symbol) {\r\n\t    var rightPoint = this.getRight();\r\n\t\r\n\t    if (!this.right_symbol.isPositioned) {\r\n\t      this.right_symbol.setY(rightPoint.y - this.right_symbol.height / 2);\r\n\t      this.right_symbol.shiftX(this.group.getBBox().x + this.width + lineLength);\r\n\t      (function shift() {\r\n\t        var hasSymbolUnder = false;\r\n\t        var symb;\r\n\t        for (var i = 0, len = self.chart.symbols.length; i < len; i++) {\r\n\t          symb = self.chart.symbols[i];\r\n\t\r\n\t          if (!self.params['align-next'] || self.params['align-next'] !== 'no') {\r\n\t            var diff = Math.abs(symb.getCenter().x - self.right_symbol.getCenter().x);\r\n\t            if (symb.getCenter().y > self.right_symbol.getCenter().y && diff <= self.right_symbol.width / 2) {\r\n\t              hasSymbolUnder = true;\r\n\t              break;\r\n\t            }\r\n\t          }\r\n\t        }\r\n\t\r\n\t        if (hasSymbolUnder) {\r\n\t          if (self.right_symbol.symbolType === 'end') return;\r\n\t          self.right_symbol.setX(symb.getX() + symb.width + lineLength);\r\n\t          shift();\r\n\t        }\r\n\t      })();\r\n\t\r\n\t      this.right_symbol.isPositioned = true;\r\n\t\r\n\t      this.right_symbol.render();\r\n\t    }\r\n\t  }\r\n\t};\r\n\t\r\n\tParallel.prototype.renderLines = function() {\r\n\t  if (this.path1_symbol) {\r\n\t    this.drawLineTo(this.path1_symbol, '', this.path1_direction);\r\n\t  }\r\n\t\r\n\t  if (this.path2_symbol) {\r\n\t    this.drawLineTo(this.path2_symbol, '', this.path2_direction);\r\n\t  }\r\n\t\r\n\t  if (this.path3_symbol) {\r\n\t    this.drawLineTo(this.path3_symbol, '', this.path3_direction);\r\n\t  }\r\n\t};\r\n\t\r\n\tmodule.exports = Parallel;\n\n/***/ }),\n/* 7 */\n/*!********************************!*\\\n  !*** ./src/flowchart.chart.js ***!\n  \\********************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar Raphael = __webpack_require__(/*! raphael */ 16);\r\n\tvar defaults = __webpack_require__(/*! ./flowchart.helpers */ 1).defaults;\r\n\tvar defaultOptions = __webpack_require__(/*! ./flowchart.defaults */ 8);\r\n\tvar Condition = __webpack_require__(/*! ./flowchart.symbol.condition */ 5);\r\n\tvar Parallel = __webpack_require__(/*! ./flowchart.symbol.parallel */ 6);\r\n\t\r\n\tfunction FlowChart(container, options) {\r\n\t  options = options || {};\r\n\t\r\n\t  this.paper = new Raphael(container);\r\n\t\r\n\t  this.options = defaults(options, defaultOptions);\r\n\t\r\n\t  this.symbols = [];\r\n\t  this.lines = [];\r\n\t  this.start = null;\r\n\t}\r\n\t\r\n\tFlowChart.prototype.handle = function(symbol) {\r\n\t  if (this.symbols.indexOf(symbol) <= -1) {\r\n\t    this.symbols.push(symbol);\r\n\t  }\r\n\t\r\n\t  var flowChart = this;\r\n\t\r\n\t  if (symbol instanceof(Condition)) {\r\n\t    symbol.yes = function(nextSymbol) {\r\n\t      symbol.yes_symbol = nextSymbol;\r\n\t      if(symbol.no_symbol) {\r\n\t        symbol.pathOk = true;\r\n\t      }\r\n\t      return flowChart.handle(nextSymbol);\r\n\t    };\r\n\t    symbol.no = function(nextSymbol) {\r\n\t      symbol.no_symbol = nextSymbol;\r\n\t      if (symbol.yes_symbol) {\r\n\t        symbol.pathOk = true;\r\n\t      }\r\n\t      return flowChart.handle(nextSymbol);\r\n\t    };\r\n\t  } else if (symbol instanceof(Parallel)) {\r\n\t    symbol.path1 = function(nextSymbol) {\r\n\t      symbol.path1_symbol = nextSymbol;\r\n\t      if (symbol.path2_symbol) {\r\n\t        symbol.pathOk = true;\r\n\t      }\r\n\t      return flowChart.handle(nextSymbol);\r\n\t    };\r\n\t    symbol.path2 = function(nextSymbol) {\r\n\t      symbol.path2_symbol = nextSymbol;\r\n\t      if (symbol.path3_symbol) {\r\n\t        symbol.pathOk = true;\r\n\t      }\r\n\t      return flowChart.handle(nextSymbol);\r\n\t    };\r\n\t    symbol.path3 = function(nextSymbol) {\r\n\t      symbol.path3_symbol = nextSymbol;\r\n\t      if (symbol.path1_symbol) {\r\n\t        symbol.pathOk = true;\r\n\t      }\r\n\t      return flowChart.handle(nextSymbol);\r\n\t    };\r\n\t  } else {\r\n\t    symbol.then = function(nextSymbol) {\r\n\t      symbol.next = nextSymbol;\r\n\t      symbol.pathOk = true;\r\n\t      return flowChart.handle(nextSymbol);\r\n\t    };\r\n\t  }\r\n\t\r\n\t  return symbol;\r\n\t};\r\n\t\r\n\tFlowChart.prototype.startWith = function(symbol) {\r\n\t  this.start = symbol;\r\n\t  return this.handle(symbol);\r\n\t};\r\n\t\r\n\tFlowChart.prototype.render = function() {\r\n\t  var maxWidth = 0,\r\n\t    maxHeight = 0,\r\n\t    i = 0,\r\n\t    len = 0,\r\n\t    maxX = 0,\r\n\t    maxY = 0,\r\n\t    minX = 0,\r\n\t    minY = 0,\r\n\t    symbol,\r\n\t    line;\r\n\t\r\n\t  for (i = 0, len = this.symbols.length; i < len; i++) {\r\n\t    symbol = this.symbols[i];\r\n\t    if (symbol.width > maxWidth) {\r\n\t      maxWidth = symbol.width;\r\n\t    }\r\n\t    if (symbol.height > maxHeight) {\r\n\t      maxHeight = symbol.height;\r\n\t    }\r\n\t  }\r\n\t\r\n\t  for (i = 0, len = this.symbols.length; i < len; i++) {\r\n\t    symbol = this.symbols[i];\r\n\t    symbol.shiftX(this.options.x + (maxWidth - symbol.width)/2 + this.options['line-width']);\r\n\t    symbol.shiftY(this.options.y + (maxHeight - symbol.height)/2 + this.options['line-width']);\r\n\t  }\r\n\t\r\n\t  this.start.render();\r\n\t  // for (i = 0, len = this.symbols.length; i < len; i++) {\r\n\t  //   symbol = this.symbols[i];\r\n\t  //   symbol.render();\r\n\t  // }\r\n\t\r\n\t  for (i = 0, len = this.symbols.length; i < len; i++) {\r\n\t    symbol = this.symbols[i];\r\n\t    symbol.renderLines();\r\n\t  }\r\n\t\r\n\t  maxX = this.maxXFromLine;\r\n\t\r\n\t  var x;\r\n\t  var y;\r\n\t\r\n\t  for (i = 0, len = this.symbols.length; i < len; i++) {\r\n\t    symbol = this.symbols[i];\r\n\t    var leftX = symbol.getX()\r\n\t    x = leftX + symbol.width;\r\n\t    y = symbol.getY() + symbol.height;\r\n\t    if (leftX < minX) {\r\n\t      minX = leftX;\r\n\t    }\r\n\t    if (x > maxX) {\r\n\t      maxX = x;\r\n\t    }\r\n\t    if (y > maxY) {\r\n\t      maxY = y;\r\n\t    }\r\n\t  }\r\n\t\r\n\t  for (i = 0, len = this.lines.length; i < len; i++) {\r\n\t    line = this.lines[i].getBBox();\r\n\t    x = line.x;\r\n\t    y = line.y;\r\n\t    var x2 = line.x2;\r\n\t    var y2 = line.y2;\r\n\t    if (x < minX) {\r\n\t      minX = x;\r\n\t    }\r\n\t    if (y < minY) {\r\n\t      minY = y;\r\n\t    }\r\n\t    if (x2 > maxX) {\r\n\t      maxX = x2;\r\n\t    }\r\n\t    if (y2 > maxY) {\r\n\t      maxY = y2;\r\n\t    }\r\n\t  }\r\n\t\r\n\t  var scale = this.options['scale'];\r\n\t  var lineWidth = this.options['line-width'];\r\n\t\r\n\t  if (this.minXFromSymbols < minX) minX = this.minXFromSymbols;\r\n\t\r\n\t  if (minX < 0) minX -= lineWidth;\r\n\t  if (minY < 0) minY -= lineWidth;\r\n\t\r\n\t  var width = maxX + lineWidth - minX;\r\n\t  var height = maxY + lineWidth - minY;\r\n\t\r\n\t  this.paper.setSize(width * scale, height * scale);\r\n\t  this.paper.setViewBox(minX, minY, width, height, true);\r\n\t};\r\n\t\r\n\tFlowChart.prototype.clean = function() {\r\n\t  if (this.paper) {\r\n\t    var paperDom = this.paper.canvas;\r\n\t    paperDom.parentNode && paperDom.parentNode.removeChild(paperDom);\r\n\t  }\r\n\t};\r\n\t\r\n\tmodule.exports = FlowChart;\n\n/***/ }),\n/* 8 */\n/*!***********************************!*\\\n  !*** ./src/flowchart.defaults.js ***!\n  \\***********************************/\n/***/ (function(module, exports) {\n\n\t// defaults\r\n\tmodule.exports = {\r\n\t  'x': 0,\r\n\t  'y': 0,\r\n\t  'line-width': 3,\r\n\t  'line-length': 50,\r\n\t  'text-margin': 10,\r\n\t  'font-size': 14,\r\n\t  'font-color': 'black',\r\n\t  // 'font': 'normal',\r\n\t  // 'font-family': 'calibri',\r\n\t  // 'font-weight': 'normal',\r\n\t  'line-color': 'black',\r\n\t  'element-color': 'black',\r\n\t  'fill': 'white',\r\n\t  'yes-text': 'yes',\r\n\t  'no-text': 'no',\r\n\t  'arrow-end': 'block',\r\n\t  'class': 'flowchart',\r\n\t  'scale': 1,\r\n\t  'symbols': {\r\n\t    'start': {},\r\n\t    'end': {},\r\n\t    'condition': {},\r\n\t    'inputoutput': {},\r\n\t    'operation': {},\r\n\t    'subroutine': {},\r\n\t    'parallel': {}\r\n\t  } //,\r\n\t  // 'flowstate' : {\r\n\t  //   'past' : { 'fill': '#CCCCCC', 'font-size': 12},\r\n\t  //   'current' : {'fill': 'yellow', 'font-color': 'red', 'font-weight': 'bold'},\r\n\t  //   'future' : { 'fill': '#FFFF99'},\r\n\t  //   'invalid': {'fill': '#444444'}\r\n\t  // }\r\n\t};\n\n/***/ }),\n/* 9 */\n/*!*******************************!*\\\n  !*** ./src/flowchart.shim.js ***!\n  \\*******************************/\n/***/ (function(module, exports) {\n\n\t// add indexOf to non ECMA-262 standard compliant browsers\r\n\tif (!Array.prototype.indexOf) {\r\n\t  Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {\r\n\t    \"use strict\";\r\n\t    if (this === null) {\r\n\t      throw new TypeError();\r\n\t    }\r\n\t    var t = Object(this);\r\n\t    var len = t.length >>> 0;\r\n\t    if (len === 0) {\r\n\t      return -1;\r\n\t    }\r\n\t    var n = 0;\r\n\t    if (arguments.length > 0) {\r\n\t      n = Number(arguments[1]);\r\n\t      if (n != n) { // shortcut for verifying if it's NaN\r\n\t        n = 0;\r\n\t      } else if (n !== 0 && n != Infinity && n != -Infinity) {\r\n\t        n = (n > 0 || -1) * Math.floor(Math.abs(n));\r\n\t      }\r\n\t    }\r\n\t    if (n >= len) {\r\n\t      return -1;\r\n\t    }\r\n\t    var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\r\n\t    for (; k < len; k++) {\r\n\t      if (k in t && t[k] === searchElement) {\r\n\t        return k;\r\n\t      }\r\n\t    }\r\n\t    return -1;\r\n\t  };\r\n\t}\r\n\t\r\n\t// add lastIndexOf to non ECMA-262 standard compliant browsers\r\n\tif (!Array.prototype.lastIndexOf) {\r\n\t  Array.prototype.lastIndexOf = function(searchElement /*, fromIndex*/) {\r\n\t    \"use strict\";\r\n\t    if (this === null) {\r\n\t      throw new TypeError();\r\n\t    }\r\n\t    var t = Object(this);\r\n\t    var len = t.length >>> 0;\r\n\t    if (len === 0) {\r\n\t      return -1;\r\n\t    }\r\n\t    var n = len;\r\n\t    if (arguments.length > 1) {\r\n\t      n = Number(arguments[1]);\r\n\t      if (n != n) {\r\n\t        n = 0;\r\n\t      } else if (n !== 0 && n != (1 / 0) && n != -(1 / 0)) {\r\n\t        n = (n > 0 || -1) * Math.floor(Math.abs(n));\r\n\t      }\r\n\t    }\r\n\t    var k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n);\r\n\t    for (; k >= 0; k--) {\r\n\t      if (k in t && t[k] === searchElement) {\r\n\t        return k;\r\n\t      }\r\n\t    }\r\n\t    return -1;\r\n\t  };\r\n\t}\r\n\t\r\n\tif (!String.prototype.trim) {\r\n\t  String.prototype.trim = function() {\r\n\t    return this.replace(/^\\s+|\\s+$/g, '');\r\n\t  };\r\n\t}\n\n/***/ }),\n/* 10 */\n/*!*************************************!*\\\n  !*** ./src/flowchart.symbol.end.js ***!\n  \\*************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar Symbol = __webpack_require__(/*! ./flowchart.symbol */ 2);\r\n\tvar inherits = __webpack_require__(/*! ./flowchart.helpers */ 1).inherits;\r\n\t\r\n\tfunction End(chart, options) {\r\n\t  var symbol = chart.paper.rect(0, 0, 0, 0, 20);\r\n\t  options = options || {};\r\n\t  options.text = options.text || 'End';\r\n\t  Symbol.call(this, chart, options, symbol);\r\n\t}\r\n\tinherits(End, Symbol);\r\n\t\r\n\tmodule.exports = End;\r\n\n\n/***/ }),\n/* 11 */\n/*!*********************************************!*\\\n  !*** ./src/flowchart.symbol.inputoutput.js ***!\n  \\*********************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar Symbol = __webpack_require__(/*! ./flowchart.symbol */ 2);\r\n\tvar inherits = __webpack_require__(/*! ./flowchart.helpers */ 1).inherits;\r\n\tvar drawAPI = __webpack_require__(/*! ./flowchart.functions */ 3);\r\n\tvar drawPath = drawAPI.drawPath;\r\n\t\r\n\tfunction InputOutput(chart, options) {\r\n\t  options = options || {};\r\n\t  Symbol.call(this, chart, options);\r\n\t  this.textMargin = this.getAttr('text-margin');\r\n\t\r\n\t  this.text.attr({\r\n\t    x: this.textMargin * 3\r\n\t  });\r\n\t\r\n\t  var width = this.text.getBBox().width + 4 * this.textMargin;\r\n\t  var height = this.text.getBBox().height + 2 * this.textMargin;\r\n\t  var startX = this.textMargin;\r\n\t  var startY = height/2;\r\n\t\r\n\t  var start = {x: startX, y: startY};\r\n\t  var points = [\r\n\t    {x: startX - this.textMargin, y: height},\r\n\t    {x: startX - this.textMargin + width, y: height},\r\n\t    {x: startX - this.textMargin + width + 2 * this.textMargin, y: 0},\r\n\t    {x: startX - this.textMargin + 2 * this.textMargin, y: 0},\r\n\t    {x: startX, y: startY}\r\n\t  ];\r\n\t\r\n\t  var symbol = drawPath(chart, start, points);\r\n\t\r\n\t  symbol.attr({\r\n\t    stroke: this.getAttr('element-color'),\r\n\t    'stroke-width': this.getAttr('line-width'),\r\n\t    fill: this.getAttr('fill')\r\n\t  });\r\n\t  if (options.link) { symbol.attr('href', options.link); }\r\n\t  if (options.target) { symbol.attr('target', options.target); }\r\n\t  if (options.key) { symbol.node.id = options.key; }\r\n\t  symbol.node.setAttribute('class', this.getAttr('class'));\r\n\t\r\n\t  this.text.attr({\r\n\t    y: symbol.getBBox().height/2\r\n\t  });\r\n\t\r\n\t  this.group.push(symbol);\r\n\t  symbol.insertBefore(this.text);\r\n\t  this.symbol = symbol\r\n\t\r\n\t  this.initialize();\r\n\t}\r\n\tinherits(InputOutput, Symbol);\r\n\t\r\n\tInputOutput.prototype.getLeft = function() {\r\n\t  var y = this.getY() + this.group.getBBox().height/2;\r\n\t  var x = this.getX() + this.textMargin;\r\n\t  return {x: x, y: y};\r\n\t};\r\n\t\r\n\tInputOutput.prototype.getRight = function() {\r\n\t  var y = this.getY() + this.group.getBBox().height/2;\r\n\t  var x = this.getX() + this.group.getBBox().width - this.textMargin;\r\n\t  return {x: x, y: y};\r\n\t};\r\n\t\r\n\tmodule.exports = InputOutput;\r\n\n\n/***/ }),\n/* 12 */\n/*!*******************************************!*\\\n  !*** ./src/flowchart.symbol.operation.js ***!\n  \\*******************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar Symbol = __webpack_require__(/*! ./flowchart.symbol */ 2);\r\n\tvar inherits = __webpack_require__(/*! ./flowchart.helpers */ 1).inherits;\r\n\t\r\n\tfunction Operation(chart, options) {\r\n\t  var symbol = chart.paper.rect(0, 0, 0, 0);\r\n\t  options = options || {};\r\n\t  Symbol.call(this, chart, options, symbol);\r\n\t}\r\n\tinherits(Operation, Symbol);\r\n\t\r\n\tmodule.exports = Operation;\r\n\n\n/***/ }),\n/* 13 */\n/*!***************************************!*\\\n  !*** ./src/flowchart.symbol.start.js ***!\n  \\***************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar Symbol = __webpack_require__(/*! ./flowchart.symbol */ 2);\r\n\tvar inherits = __webpack_require__(/*! ./flowchart.helpers */ 1).inherits;\r\n\t\r\n\tfunction Start(chart, options) {\r\n\t  var symbol = chart.paper.rect(0, 0, 0, 0, 20);\r\n\t  options = options || {};\r\n\t  options.text = options.text || 'Start';\r\n\t  Symbol.call(this, chart, options, symbol);\r\n\t}\r\n\tinherits(Start, Symbol);\r\n\t\r\n\tmodule.exports = Start;\r\n\t\r\n\t// Start.prototype.render = function() {\r\n\t//   if (this.next) {\r\n\t//     var lineLength = this.chart.options.symbols[this.symbolType]['line-length'] || this.chart.options['line-length'];\r\n\t\r\n\t//     var bottomPoint = this.getBottom();\r\n\t//     var topPoint = this.next.getTop();\r\n\t\r\n\t//     if (!this.next.isPositioned) {\r\n\t//       this.next.shiftY(this.getY() + this.height + lineLength);\r\n\t//       this.next.setX(bottomPoint.x - this.next.width/2);\r\n\t//       this.next.isPositioned = true;\r\n\t\r\n\t//       this.next.render();\r\n\t//     }\r\n\t//   }\r\n\t// };\r\n\t\r\n\t// Start.prototype.renderLines = function() {\r\n\t//   if (this.next) {\r\n\t//     this.drawLineTo(this.next);\r\n\t//   }\r\n\t// };\r\n\n\n/***/ }),\n/* 14 */\n/*!********************************************!*\\\n  !*** ./src/flowchart.symbol.subroutine.js ***!\n  \\********************************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar Symbol = __webpack_require__(/*! ./flowchart.symbol */ 2);\r\n\tvar inherits = __webpack_require__(/*! ./flowchart.helpers */ 1).inherits;\r\n\t\r\n\tfunction Subroutine(chart, options) {\r\n\t  var symbol = chart.paper.rect(0, 0, 0, 0);\r\n\t  options = options || {};\r\n\t  Symbol.call(this, chart, options, symbol);\r\n\t\r\n\t  symbol.attr({\r\n\t    width: this.text.getBBox().width + 4 * this.getAttr('text-margin')\r\n\t  });\r\n\t\r\n\t  this.text.attr({\r\n\t    'x': 2 * this.getAttr('text-margin')\r\n\t  });\r\n\t\r\n\t  var innerWrap = chart.paper.rect(0, 0, 0, 0);\r\n\t  innerWrap.attr({\r\n\t    x: this.getAttr('text-margin'),\r\n\t    stroke: this.getAttr('element-color'),\r\n\t    'stroke-width': this.getAttr('line-width'),\r\n\t    width: this.text.getBBox().width + 2 * this.getAttr('text-margin'),\r\n\t    height: this.text.getBBox().height + 2 * this.getAttr('text-margin'),\r\n\t    fill: this.getAttr('fill')\r\n\t  });\r\n\t  if (options.key) { innerWrap.node.id = options.key + 'i'; }\r\n\t\r\n\t  var font = this.getAttr('font');\r\n\t  var fontF = this.getAttr('font-family');\r\n\t  var fontW = this.getAttr('font-weight');\r\n\t\r\n\t  if (font) innerWrap.attr({ 'font': font });\r\n\t  if (fontF) innerWrap.attr({ 'font-family': fontF });\r\n\t  if (fontW) innerWrap.attr({ 'font-weight': fontW });\r\n\t\r\n\t  if (options.link) { innerWrap.attr('href', options.link); }\r\n\t  if (options.target) { innerWrap.attr('target', options.target); }\r\n\t  this.group.push(innerWrap);\r\n\t  innerWrap.insertBefore(this.text);\r\n\t\r\n\t  this.initialize();\r\n\t}\r\n\tinherits(Subroutine, Symbol);\r\n\t\r\n\tmodule.exports = Subroutine;\r\n\n\n/***/ }),\n/* 15 */\n/*!******************************!*\\\n  !*** ./src/jquery-plugin.js ***!\n  \\******************************/\n/***/ (function(module, exports, __webpack_require__) {\n\n\tif (typeof jQuery != 'undefined') {\r\n\t\tvar parse = __webpack_require__(/*! ./flowchart.parse */ 4);\r\n\t\r\n\t\t(function( $ ) {\r\n\t\t\tfunction paramFit(needle, haystack) {\r\n\t\t\t\treturn needle == haystack ||\r\n\t\t\t\t( Array.isArray(haystack) && (haystack.includes(needle) || haystack.includes(Number(needle)) ))\r\n\t\t\t}\r\n\t\t\tvar methods = {\r\n\t\t\t\tinit : function(options) {\r\n\t\t\t\t\treturn this.each(function() {\r\n\t\t\t\t\t\tvar $this = $(this);\r\n\t\t\t\t\t\tthis.chart = parse($this.text());\r\n\t\t\t\t\t\t$this.html('');\r\n\t\t\t\t\t\tthis.chart.drawSVG(this, options);\r\n\t\t\t\t\t});\r\n\t\t\t\t},\r\n\t\t\t\tsetFlowStateByParam : function(param, paramValue, newFlowState) {\r\n\t\t\t\t\treturn this.each(function() {\r\n\t\t\t\t\t\tvar chart = this.chart;\r\n\t\r\n\t\t\t\t\t\t// @todo this should be part of Symbol API\r\n\t\t\t\t\t\tvar nextSymbolKeys = ['next', 'yes', 'no', 'path1', 'path2', 'path3'];\r\n\t\r\n\t\t\t\t\t\tfor (var property in chart.symbols) {\r\n\t\t\t\t\t\t\tif (chart.symbols.hasOwnProperty(property)) {\r\n\t\t\t\t\t\t\t\tvar symbol = chart.symbols[property];\r\n\t\t\t\t\t\t\t\tvar val = symbol.params[param];\r\n\t\t\t\t\t\t\t\tif (paramFit(val, paramValue)) {\r\n\t\t\t\t\t\t\t\t\tsymbol.flowstate = newFlowState;\r\n\t\t\t\t\t\t\t\t\tfor (var nski = 0; nski < nextSymbolKeys.length; nski++) {\r\n\t\t\t\t\t\t\t\t\t\tvar nextSymbolKey = nextSymbolKeys[nski];\r\n\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\tsymbol[nextSymbolKey] &&\r\n\t\t\t\t\t\t\t\t\t\t\tsymbol[nextSymbolKey]['params'] &&\r\n\t\t\t\t\t\t\t\t\t\t\tsymbol[nextSymbolKey]['params'][param] &&\r\n\t\t\t\t\t\t\t\t\t\t\tparamFit(symbol[nextSymbolKey]['params'][param], paramValue)\r\n\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\tsymbol.lineStyle[symbol[nextSymbolKey]['key']] = {stroke: chart.options()['flowstate'][newFlowState]['fill']};\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tchart.clean();\r\n\t\t\t\t\t\tchart.drawSVG(this);\r\n\t\t\t\t\t});\r\n\t\r\n\t\t\t\t},\r\n\t\t\t\tclearFlowState: function () {\r\n\t\t\t\t\treturn this.each(function() {\r\n\t\t\t\t\t\tvar chart = this.chart;\r\n\t\r\n\t\t\t\t\t\tfor (var property in chart.symbols) {\r\n\t\t\t\t\t\t\tif (chart.symbols.hasOwnProperty(property)) {\r\n\t\t\t\t\t\t\t\tvar node = chart.symbols[property];\r\n\t\t\t\t\t\t\t\tnode.flowstate = '';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tchart.clean();\r\n\t\t\t\t\t\tchart.drawSVG(this);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\r\n\t\t\t$.fn.flowChart = function(methodOrOptions) {\r\n\t\t\t\tif ( methods[methodOrOptions] ) {\r\n\t\t\t\t\treturn methods[ methodOrOptions ].apply( this, Array.prototype.slice.call( arguments, 1 ));\r\n\t\t\t\t} else if ( typeof methodOrOptions === 'object' || ! methodOrOptions ) {\r\n\t\t\t\t\t// Default to \"init\"\r\n\t\t\t\t\treturn methods.init.apply( this, arguments );\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$.error( 'Method ' +  methodOrOptions + ' does not exist on jQuery.flowChart' );\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\r\n\t\t})(jQuery); // eslint-disable-line\r\n\t}\r\n\n\n/***/ }),\n/* 16 */\n/*!**************************!*\\\n  !*** external \"Raphael\" ***!\n  \\**************************/\n/***/ (function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_16__;\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// flowchart.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 7060ba7236a412e91d31","require('./src/flowchart.shim');\r\nvar parse = require('./src/flowchart.parse');\r\nrequire('./src/jquery-plugin');\r\n\r\nvar FlowChart = {\r\n\tparse: parse\r\n};\r\n\r\nif (typeof window !== 'undefined') {\r\n\twindow.flowchart = FlowChart;\r\n}\r\n\r\nmodule.exports = FlowChart;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./index.js\n// module id = 0\n// module chunks = 0","function _defaults(options, defaultOptions) {\r\n  if (!options || typeof options === 'function') {\r\n    return defaultOptions;\r\n  }\r\n\r\n  var merged = {};\r\n  for (var attrname in defaultOptions) {\r\n    merged[attrname] = defaultOptions[attrname];\r\n  }\r\n\r\n  for (attrname in options) {\r\n    if (options[attrname]) {\r\n      if (typeof merged[attrname] === 'object') {\r\n        merged[attrname] = _defaults(merged[attrname], options[attrname]);\r\n      } else {\r\n        merged[attrname] = options[attrname];\r\n      }\r\n    }\r\n  }\r\n  return merged;\r\n}\r\n\r\nfunction _inherits(ctor, superCtor) {\r\n  if (typeof(Object.create) === 'function') {\r\n    // implementation from standard node.js 'util' module\r\n    ctor.super_ = superCtor;\r\n    ctor.prototype = Object.create(superCtor.prototype, {\r\n      constructor: {\r\n        value: ctor,\r\n        enumerable: false,\r\n        writable: true,\r\n        configurable: true\r\n      }\r\n    });\r\n  } else {\r\n    // old school shim for old browsers\r\n    ctor.super_ = superCtor;\r\n    var TempCtor = function () {};\r\n    TempCtor.prototype = superCtor.prototype;\r\n    ctor.prototype = new TempCtor();\r\n    ctor.prototype.constructor = ctor;\r\n  }\r\n}\r\n\r\n// move dependent functions to a container so that\r\n// they can be overriden easier in no jquery environment (node.js)\r\nmodule.exports = {\r\n  defaults: _defaults,\r\n  inherits: _inherits\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/flowchart.helpers.js\n// module id = 1\n// module chunks = 0","var drawAPI = require('./flowchart.functions');\r\nvar drawLine = drawAPI.drawLine;\r\nvar checkLineIntersection = drawAPI.checkLineIntersection;\r\n\r\nfunction Symbol(chart, options, symbol) {\r\n  this.chart = chart;\r\n  this.group = this.chart.paper.set();\r\n  this.symbol = symbol;\r\n  this.connectedTo = [];\r\n  this.symbolType = options.symbolType;\r\n  this.flowstate = (options.flowstate || 'future');\r\n  this.lineStyle = (options.lineStyle || {});\r\n  this.key = (options.key || '');\r\n  this.leftLines = [];\r\n  this.rightLines = [];\r\n  this.topLines = [];\r\n  this.bottomLines = [];\r\n  this.params = options.params;\r\n\r\n  this.next_direction = options.next && options['direction_next'] ? options['direction_next'] : undefined;\r\n\r\n  this.text = this.chart.paper.text(0, 0, options.text);\r\n  //Raphael does not support the svg group tag so setting the text node id to the symbol node id plus t\r\n  if (options.key) { this.text.node.id = options.key + 't'; }\r\n  this.text.node.setAttribute('class', this.getAttr('class') + 't');\r\n\r\n  this.text.attr({\r\n    'text-anchor': 'start',\r\n    'x'          : this.getAttr('text-margin'),\r\n    'fill'       : this.getAttr('font-color'),\r\n    'font-size'  : this.getAttr('font-size')\r\n  });\r\n\r\n  var font  = this.getAttr('font');\r\n  var fontF = this.getAttr('font-family');\r\n  var fontW = this.getAttr('font-weight');\r\n\r\n  if (font) this.text.attr({ 'font': font });\r\n  if (fontF) this.text.attr({ 'font-family': fontF });\r\n  if (fontW) this.text.attr({ 'font-weight': fontW });\r\n\r\n  if (options.link) { this.text.attr('href', options.link); }\r\n  \r\n  //ndrqu Add click function with event and options params\r\n  if (options.function) { \r\n    this.text.attr({ 'cursor' : 'pointer' });\r\n\r\n    this.text.node.addEventListener(\"click\", function(evt) {\r\n        window[options.function](evt,options);\r\n    }, false);\r\n  }\r\n\r\n  if (options.target) { this.text.attr('target', options.target); }\r\n\r\n  var maxWidth = this.getAttr('maxWidth');\r\n  if (maxWidth) {\r\n    // using this approach: http://stackoverflow.com/a/3153457/22466\r\n    var words = options.text.split(' ');\r\n    var tempText = \"\";\r\n    for (var i=0, ii=words.length; i<ii; i++) {\r\n      var word = words[i];\r\n      this.text.attr(\"text\", tempText + \" \" + word);\r\n      if (this.text.getBBox().width > maxWidth) {\r\n        tempText += \"\\n\" + word;\r\n      } else {\r\n        tempText += \" \" + word;\r\n      }\r\n    }\r\n    this.text.attr(\"text\", tempText.substring(1));\r\n  }\r\n\r\n  this.group.push(this.text);\r\n\r\n  if (symbol) {\r\n    var tmpMargin = this.getAttr('text-margin');\r\n\r\n    symbol.attr({\r\n      'fill' : this.getAttr('fill'),\r\n      'stroke' : this.getAttr('element-color'),\r\n      'stroke-width' : this.getAttr('line-width'),\r\n      'width' : this.text.getBBox().width + 2 * tmpMargin,\r\n      'height' : this.text.getBBox().height + 2 * tmpMargin\r\n    });\r\n\r\n    symbol.node.setAttribute('class', this.getAttr('class'));\r\n\r\n    if (options.link) { symbol.attr('href', options.link); }\r\n    if (options.target) { symbol.attr('target', options.target); }\r\n\r\n    //ndrqu Add click function with event and options params\r\n    if (options.function) { \r\n        symbol.node.addEventListener(\"click\", function(evt) {\r\n          window[options.function](evt,options);\r\n        }, false);\r\n      symbol.attr({ 'cursor' : 'pointer' });\r\n    }\r\n    if (options.key) { symbol.node.id = options.key; }\r\n\r\n    this.group.push(symbol);\r\n    symbol.insertBefore(this.text);\r\n\r\n    this.text.attr({\r\n      'y': symbol.getBBox().height/2\r\n    });\r\n\r\n    this.initialize();\r\n  }\r\n\r\n}\r\n\r\n/* Gets the attribute based on Flowstate, Symbol-Name and default, first found wins */\r\nSymbol.prototype.getAttr = function(attName) {\r\n  if (!this.chart) {\r\n    return undefined;\r\n  }\r\n  var opt3 = (this.chart.options) ? this.chart.options[attName] : undefined;\r\n  var opt2 = (this.chart.options.symbols) ? this.chart.options.symbols[this.symbolType][attName] : undefined;\r\n  var opt1;\r\n  if (this.chart.options.flowstate && this.chart.options.flowstate[this.flowstate]) {\r\n    opt1 = this.chart.options.flowstate[this.flowstate][attName];\r\n  }\r\n  return (opt1 || opt2 || opt3);\r\n};\r\n\r\nSymbol.prototype.initialize = function() {\r\n  this.group.transform('t' + this.getAttr('line-width') + ',' + this.getAttr('line-width'));\r\n\r\n  this.width = this.group.getBBox().width;\r\n  this.height = this.group.getBBox().height;\r\n};\r\n\r\nSymbol.prototype.getCenter = function() {\r\n  return {x: this.getX() + this.width/2,\r\n          y: this.getY() + this.height/2};\r\n};\r\n\r\nSymbol.prototype.getX = function() {\r\n  return this.group.getBBox().x;\r\n};\r\n\r\nSymbol.prototype.getY = function() {\r\n  return this.group.getBBox().y;\r\n};\r\n\r\nSymbol.prototype.shiftX = function(x) {\r\n  this.group.transform('t' + (this.getX() + x) + ',' + this.getY());\r\n};\r\n\r\nSymbol.prototype.setX = function(x) {\r\n  this.group.transform('t' + x + ',' + this.getY());\r\n};\r\n\r\nSymbol.prototype.shiftY = function(y) {\r\n  this.group.transform('t' + this.getX() + ',' + (this.getY() + y));\r\n};\r\n\r\nSymbol.prototype.setY = function(y) {\r\n  this.group.transform('t' + this.getX() + ',' + y);\r\n};\r\n\r\nSymbol.prototype.getTop = function() {\r\n  var y = this.getY();\r\n  var x = this.getX() + this.width/2;\r\n  return {x: x, y: y};\r\n};\r\n\r\nSymbol.prototype.getBottom = function() {\r\n  var y = this.getY() + this.height;\r\n  var x = this.getX() + this.width/2;\r\n  return {x: x, y: y};\r\n};\r\n\r\nSymbol.prototype.getLeft = function() {\r\n  var y = this.getY() + this.group.getBBox().height/2;\r\n  var x = this.getX();\r\n  return {x: x, y: y};\r\n};\r\n\r\nSymbol.prototype.getRight = function() {\r\n  var y = this.getY() + this.group.getBBox().height/2;\r\n  var x = this.getX() + this.group.getBBox().width;\r\n  return {x: x, y: y};\r\n};\r\n\r\nSymbol.prototype.render = function() {\r\n  if (this.next) {\r\n\r\n    var self = this;\r\n    var lineLength = this.getAttr('line-length');\r\n\r\n    if (this.next_direction === 'right') {\r\n\r\n      var rightPoint = this.getRight();\r\n\r\n      if (!this.next.isPositioned) {\r\n        this.next.setY(rightPoint.y - this.next.height/2);\r\n        this.next.shiftX(this.group.getBBox().x + this.width + lineLength);\r\n\r\n        (function shift() {\r\n          var hasSymbolUnder = false;\r\n          var symb;\r\n          for (var i = 0, len = self.chart.symbols.length; i < len; i++) {\r\n            symb = self.chart.symbols[i];\r\n\r\n            var diff = Math.abs(symb.getCenter().x - self.next.getCenter().x);\r\n            if (symb.getCenter().y > self.next.getCenter().y && diff <= self.next.width/2) {\r\n              hasSymbolUnder = true;\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (hasSymbolUnder) {\r\n            if (self.next.symbolType === 'end') return;\r\n            self.next.setX(symb.getX() + symb.width + lineLength);\r\n            shift();\r\n          }\r\n        })();\r\n\r\n        this.next.isPositioned = true;\r\n\r\n        this.next.render();\r\n      }\r\n    } else if (this.next_direction === 'left') {\r\n\r\n      var leftPoint = this.getLeft();\r\n\r\n      if (!this.next.isPositioned) {\r\n        this.next.setY(leftPoint.y - this.next.height/2);\r\n        this.next.shiftX(-(this.group.getBBox().x + this.width + lineLength));\r\n\r\n        (function shift() {\r\n          var hasSymbolUnder = false;\r\n          var symb;\r\n          for (var i = 0, len = self.chart.symbols.length; i < len; i++) {\r\n            symb = self.chart.symbols[i];\r\n\r\n            var diff = Math.abs(symb.getCenter().x - self.next.getCenter().x);\r\n            if (symb.getCenter().y > self.next.getCenter().y && diff <= self.next.width/2) {\r\n              hasSymbolUnder = true;\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (hasSymbolUnder) {\r\n            if (self.next.symbolType === 'end') return;\r\n            self.next.setX(symb.getX() + symb.width + lineLength);\r\n            shift();\r\n          }\r\n        })();\r\n\r\n        this.next.isPositioned = true;\r\n\r\n        this.next.render();\r\n      }\r\n    } else {\r\n      var bottomPoint = this.getBottom();\r\n\r\n      if (!this.next.isPositioned) {\r\n        this.next.shiftY(this.getY() + this.height + lineLength);\r\n        this.next.setX(bottomPoint.x - this.next.width/2);\r\n        this.next.isPositioned = true;\r\n\r\n        this.next.render();\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nSymbol.prototype.renderLines = function() {\r\n  if (this.next) {\r\n    if (this.next_direction) {\r\n      this.drawLineTo(this.next, this.getAttr('arrow-text') || '', this.next_direction);\r\n    } else {\r\n      this.drawLineTo(this.next, this.getAttr('arrow-text') || '');\r\n    }\r\n  }\r\n};\r\n\r\nSymbol.prototype.drawLineTo = function(symbol, text, origin) {\r\n  if (this.connectedTo.indexOf(symbol) < 0) {\r\n    this.connectedTo.push(symbol);\r\n  }\r\n\r\n  var x = this.getCenter().x,\r\n      y = this.getCenter().y,\r\n      right = this.getRight(),\r\n      bottom = this.getBottom(),\r\n      top = this.getTop(),\r\n      left = this.getLeft();\r\n\r\n  var symbolX = symbol.getCenter().x,\r\n      symbolY = symbol.getCenter().y,\r\n      symbolTop = symbol.getTop(),\r\n      symbolRight = symbol.getRight(),\r\n      symbolLeft = symbol.getLeft();\r\n\r\n  var isOnSameColumn = x === symbolX,\r\n      isOnSameLine = y === symbolY,\r\n      isUnder = y < symbolY,\r\n      isUpper = y > symbolY || this === symbol,\r\n      isLeft = x > symbolX,\r\n      isRight = x < symbolX;\r\n\r\n  var maxX = 0,\r\n      line,\r\n      yOffset,\r\n      lineLength = this.getAttr('line-length'),\r\n      lineWith = this.getAttr('line-width');\r\n\r\n  if ((!origin || origin === 'bottom') && isOnSameColumn && isUnder) {\r\n    if (symbol.topLines.length === 0 && this.bottomLines.length === 0) {\r\n      line = drawLine(this.chart, bottom, symbolTop, text);\r\n    } else {\r\n      yOffset = Math.max(symbol.topLines.length, this.bottomLines.length) * 10;\r\n      line = drawLine(this.chart, bottom, [\r\n        {x: symbolTop.x, y: symbolTop.y - yOffset},\r\n        {x: symbolTop.x, y: symbolTop.y}\r\n      ], text);\r\n    }\r\n    this.bottomLines.push(line);\r\n    symbol.topLines.push(line);\r\n    this.bottomStart = true;\r\n    symbol.topEnd = true;\r\n    maxX = bottom.x;\r\n  } else if ((!origin || origin === 'right') && isOnSameLine && isRight) {\r\n    if (symbol.leftLines.length === 0 && this.rightLines.length === 0) {\r\n      line = drawLine(this.chart, right, symbolLeft, text);\r\n    } else {\r\n      yOffset = Math.max(symbol.leftLines.length, this.rightLines.length) * 10;\r\n      line = drawLine(this.chart, right, [\r\n        {x: right.x, y: right.y - yOffset},\r\n        {x: right.x, y: symbolLeft.y - yOffset},\r\n        {x: symbolLeft.x, y: symbolLeft.y - yOffset},\r\n        {x: symbolLeft.x, y: symbolLeft.y}\r\n      ], text);\r\n    }\r\n    this.rightLines.push(line);\r\n    symbol.leftLines.push(line);\r\n    this.rightStart = true;\r\n    symbol.leftEnd = true;\r\n    maxX = symbolLeft.x;\r\n  } else if ((!origin || origin === 'left') && isOnSameLine && isLeft) {\r\n    if (symbol.rightLines.length === 0 && this.leftLines.length === 0) {\r\n      line = drawLine(this.chart, left, symbolRight, text);\r\n    } else {\r\n      yOffset = Math.max(symbol.rightLines.length, this.leftLines.length) * 10;\r\n      line = drawLine(this.chart, right, [\r\n        {x: right.x, y: right.y - yOffset},\r\n        {x: right.x, y: symbolRight.y - yOffset},\r\n        {x: symbolRight.x, y: symbolRight.y - yOffset},\r\n        {x: symbolRight.x, y: symbolRight.y}\r\n      ], text);\r\n    }\r\n    this.leftLines.push(line);\r\n    symbol.rightLines.push(line);\r\n    this.leftStart = true;\r\n    symbol.rightEnd = true;\r\n    maxX = symbolRight.x;\r\n  } else if ((!origin || origin === 'right') && isOnSameColumn && isUpper) {\r\n    yOffset = Math.max(symbol.topLines.length, this.rightLines.length) * 10;\r\n    line = drawLine(this.chart, right, [\r\n      {x: right.x + lineLength/2, y: right.y - yOffset},\r\n      {x: right.x + lineLength/2, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y}\r\n    ], text);\r\n    this.rightLines.push(line);\r\n    symbol.topLines.push(line);\r\n    this.rightStart = true;\r\n    symbol.topEnd = true;\r\n    maxX = right.x + lineLength/2;\r\n  } else if ((!origin || origin === 'right') && isOnSameColumn && isUnder) {\r\n    yOffset = Math.max(symbol.topLines.length, this.rightLines.length) * 10;\r\n    line = drawLine(this.chart, right, [\r\n      {x: right.x + lineLength/2, y: right.y - yOffset},\r\n      {x: right.x + lineLength/2, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y}\r\n    ], text);\r\n    this.rightLines.push(line);\r\n    symbol.topLines.push(line);\r\n    this.rightStart = true;\r\n    symbol.topEnd = true;\r\n    maxX = right.x + lineLength/2;\r\n  } else if ((!origin || origin === 'bottom') && isLeft) {\r\n    yOffset = Math.max(symbol.topLines.length, this.bottomLines.length) * 10;\r\n    if (this.leftEnd && isUpper) {\r\n      line = drawLine(this.chart, bottom, [\r\n        {x: bottom.x, y: bottom.y + lineLength/2 - yOffset},\r\n        {x: bottom.x + (bottom.x - symbolTop.x)/2, y: bottom.y + lineLength/2 - yOffset},\r\n        {x: bottom.x + (bottom.x - symbolTop.x)/2, y: symbolTop.y - lineLength/2 - yOffset},\r\n        {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n        {x: symbolTop.x, y: symbolTop.y}\r\n      ], text);\r\n    } else {\r\n      line = drawLine(this.chart, bottom, [\r\n        {x: bottom.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n        {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n        {x: symbolTop.x, y: symbolTop.y}\r\n      ], text);\r\n    }\r\n    this.bottomLines.push(line);\r\n    symbol.topLines.push(line);\r\n    this.bottomStart = true;\r\n    symbol.topEnd = true;\r\n    maxX = bottom.x + (bottom.x - symbolTop.x)/2;\r\n  } else if ((!origin || origin === 'bottom') && isRight && isUnder) {\r\n    yOffset = Math.max(symbol.topLines.length, this.bottomLines.length) * 10;\r\n    line = drawLine(this.chart, bottom, [\r\n      {x: bottom.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y}\r\n    ], text);\r\n    this.bottomLines.push(line);\r\n    symbol.topLines.push(line);\r\n    this.bottomStart = true;\r\n    symbol.topEnd = true;\r\n    maxX = bottom.x;\r\n    if (symbolTop.x > maxX) maxX = symbolTop.x;\r\n  } else if ((!origin || origin === 'bottom') && isRight) {\r\n    yOffset = Math.max(symbol.topLines.length, this.bottomLines.length) * 10;\r\n    line = drawLine(this.chart, bottom, [\r\n      {x: bottom.x, y: bottom.y + lineLength/2 - yOffset},\r\n      {x: bottom.x + (bottom.x - symbolTop.x)/2, y: bottom.y + lineLength/2 - yOffset},\r\n      {x: bottom.x + (bottom.x - symbolTop.x)/2, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y}\r\n    ], text);\r\n    this.bottomLines.push(line);\r\n    symbol.topLines.push(line);\r\n    this.bottomStart = true;\r\n    symbol.topEnd = true;\r\n    maxX = bottom.x + (bottom.x - symbolTop.x)/2;\r\n  } else if ((origin && origin === 'right') && isLeft) {\r\n    yOffset = Math.max(symbol.topLines.length, this.rightLines.length) * 10;\r\n    line = drawLine(this.chart, right, [\r\n      {x: right.x + lineLength/2, y: right.y},\r\n      {x: right.x + lineLength/2, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y}\r\n    ], text);\r\n    this.rightLines.push(line);\r\n    symbol.topLines.push(line);\r\n    this.rightStart = true;\r\n    symbol.topEnd = true;\r\n    maxX = right.x + lineLength/2;\r\n  } else if ((origin && origin === 'right') && isRight) {\r\n    yOffset = Math.max(symbol.topLines.length, this.rightLines.length) * 10;\r\n    line = drawLine(this.chart, right, [\r\n      {x: symbolTop.x, y: right.y - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y - yOffset}\r\n    ], text);\r\n    this.rightLines.push(line);\r\n    symbol.topLines.push(line);\r\n    this.rightStart = true;\r\n    symbol.topEnd = true;\r\n    maxX = right.x + lineLength/2;\r\n  } else if ((origin && origin === 'bottom') && isOnSameColumn && isUpper) {\r\n    yOffset = Math.max(symbol.topLines.length, this.bottomLines.length) * 10;\r\n    line = drawLine(this.chart, bottom, [\r\n      {x: bottom.x, y: bottom.y + lineLength/2 - yOffset},\r\n      {x: right.x + lineLength/2, y: bottom.y + lineLength/2 - yOffset},\r\n      {x: right.x + lineLength/2, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y}\r\n    ], text);\r\n    this.bottomLines.push(line);\r\n    symbol.topLines.push(line);\r\n    this.bottomStart = true;\r\n    symbol.topEnd = true;\r\n    maxX = bottom.x + lineLength/2;\r\n  } else if ((origin === 'left') && isOnSameColumn && isUpper) {\r\n    var diffX = left.x - lineLength/2;\r\n    if (symbolLeft.x < left.x) {\r\n      diffX = symbolLeft.x - lineLength/2;\r\n    }\r\n    yOffset = Math.max(symbol.topLines.length, this.leftLines.length) * 10;\r\n    line = drawLine(this.chart, left, [\r\n      {x: diffX, y: left.y - yOffset},\r\n      {x: diffX, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y}\r\n    ], text);\r\n    this.leftLines.push(line);\r\n    symbol.topLines.push(line);\r\n    this.leftStart = true;\r\n    symbol.topEnd = true;\r\n    maxX = left.x;\r\n  } else if ((origin === 'left')) {\r\n    yOffset = Math.max(symbol.topLines.length, this.leftLines.length) * 10;\r\n    line = drawLine(this.chart, left, [\r\n      {x: symbolTop.x + (left.x - symbolTop.x)/2, y: left.y},\r\n      {x: symbolTop.x + (left.x - symbolTop.x)/2, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y}\r\n    ], text);\r\n    this.leftLines.push(line);\r\n    symbol.topLines.push(line);\r\n    this.leftStart = true;\r\n    symbol.topEnd = true;\r\n    maxX = left.x;\r\n  } else if ((origin === 'top')) {\r\n    yOffset = Math.max(symbol.topLines.length, this.topLines.length) * 10;\r\n    line = drawLine(this.chart, top, [\r\n      {x: top.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y - lineLength/2 - yOffset},\r\n      {x: symbolTop.x, y: symbolTop.y}\r\n    ], text);\r\n    this.topLines.push(line);\r\n    symbol.topLines.push(line);\r\n    this.topStart = true;\r\n    symbol.topEnd = true;\r\n    maxX = top.x;\r\n  }\r\n\r\n  //update line style\r\n  if (this.lineStyle[symbol.key] && line){\r\n    line.attr(this.lineStyle[symbol.key]);\r\n  }\r\n\r\n  if (line) {\r\n    for (var l = 0, llen = this.chart.lines.length; l < llen; l++) {\r\n      var otherLine = this.chart.lines[l];\r\n\r\n      var ePath = otherLine.attr('path'),\r\n          lPath = line.attr('path');\r\n\r\n      for (var iP = 0, lenP = ePath.length - 1; iP < lenP; iP++) {\r\n        var newPath = [];\r\n        newPath.push(['M', ePath[iP][1], ePath[iP][2]]);\r\n        newPath.push(['L', ePath[iP + 1][1], ePath[iP + 1][2]]);\r\n\r\n        var line1_from_x = newPath[0][1];\r\n        var line1_from_y = newPath[0][2];\r\n        var line1_to_x = newPath[1][1];\r\n        var line1_to_y = newPath[1][2];\r\n\r\n        for (var lP = 0, lenlP = lPath.length - 1; lP < lenlP; lP++) {\r\n          var newLinePath = [];\r\n          newLinePath.push(['M', lPath[lP][1], lPath[lP][2]]);\r\n          newLinePath.push(['L', lPath[lP + 1][1], lPath[lP + 1][2]]);\r\n\r\n          var line2_from_x = newLinePath[0][1];\r\n          var line2_from_y = newLinePath[0][2];\r\n          var line2_to_x = newLinePath[1][1];\r\n          var line2_to_y = newLinePath[1][2];\r\n\r\n          var res = checkLineIntersection(line1_from_x, line1_from_y, line1_to_x, line1_to_y, line2_from_x, line2_from_y, line2_to_x, line2_to_y);\r\n          if (res.onLine1 && res.onLine2) {\r\n\r\n            var newSegment;\r\n            if (line2_from_y === line2_to_y) {\r\n              if (line2_from_x > line2_to_x) {\r\n                newSegment = ['L', res.x + lineWith * 2,  line2_from_y];\r\n                lPath.splice(lP + 1, 0, newSegment);\r\n                newSegment = ['C', res.x + lineWith * 2,  line2_from_y, res.x, line2_from_y - lineWith * 4, res.x - lineWith * 2, line2_from_y];\r\n                lPath.splice(lP + 2, 0, newSegment);\r\n                line.attr('path', lPath);\r\n              } else {\r\n                newSegment = ['L', res.x - lineWith * 2,  line2_from_y];\r\n                lPath.splice(lP + 1, 0, newSegment);\r\n                newSegment = ['C', res.x - lineWith * 2,  line2_from_y, res.x, line2_from_y - lineWith * 4, res.x + lineWith * 2, line2_from_y];\r\n                lPath.splice(lP + 2, 0, newSegment);\r\n                line.attr('path', lPath);\r\n              }\r\n            } else {\r\n              if (line2_from_y > line2_to_y) {\r\n                newSegment = ['L', line2_from_x, res.y + lineWith * 2];\r\n                lPath.splice(lP + 1, 0, newSegment);\r\n                newSegment = ['C', line2_from_x, res.y + lineWith * 2, line2_from_x + lineWith * 4, res.y, line2_from_x, res.y - lineWith * 2];\r\n                lPath.splice(lP + 2, 0, newSegment);\r\n                line.attr('path', lPath);\r\n              } else {\r\n                newSegment = ['L', line2_from_x, res.y - lineWith * 2];\r\n                lPath.splice(lP + 1, 0, newSegment);\r\n                newSegment = ['C', line2_from_x, res.y - lineWith * 2, line2_from_x + lineWith * 4, res.y, line2_from_x, res.y + lineWith * 2];\r\n                lPath.splice(lP + 2, 0, newSegment);\r\n                line.attr('path', lPath);\r\n              }\r\n            }\r\n\r\n            lP += 2;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.chart.lines.push(line);\r\n    if (this.chart.minXFromSymbols === undefined || this.chart.minXFromSymbols > left.x) {\r\n      this.chart.minXFromSymbols = left.x;\r\n    }\r\n  }\r\n\r\n  if (!this.chart.maxXFromLine || (this.chart.maxXFromLine && maxX > this.chart.maxXFromLine)) {\r\n    this.chart.maxXFromLine = maxX;\r\n  }\r\n};\r\n\r\nmodule.exports = Symbol;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/flowchart.symbol.js\n// module id = 2\n// module chunks = 0","function drawPath(chart, location, points) {\r\n  var i, len;\r\n  var path = 'M{0},{1}';\r\n  for (i = 2, len = 2 * points.length + 2; i < len; i+=2) {\r\n    path += ' L{' + i + '},{' + (i + 1) + '}';\r\n  }\r\n  var pathValues = [location.x, location.y];\r\n  for (i = 0, len = points.length; i < len; i++) {\r\n    pathValues.push(points[i].x);\r\n    pathValues.push(points[i].y);\r\n  }\r\n  var symbol = chart.paper.path(path, pathValues);\r\n  symbol.attr('stroke', chart.options['element-color']);\r\n  symbol.attr('stroke-width', chart.options['line-width']);\r\n\r\n  var font = chart.options.font;\r\n  var fontF = chart.options['font-family'];\r\n  var fontW = chart.options['font-weight'];\r\n\r\n  if (font) symbol.attr({ 'font': font });\r\n  if (fontF) symbol.attr({ 'font-family': fontF });\r\n  if (fontW) symbol.attr({ 'font-weight': fontW });\r\n\r\n  return symbol;\r\n}\r\n\r\nfunction drawLine(chart, from, to, text) {\r\n  var i, len;\r\n\r\n  if (Object.prototype.toString.call(to) !== '[object Array]') {\r\n    to = [to];\r\n  }\r\n\r\n  var path = 'M{0},{1}';\r\n  for (i = 2, len = 2 * to.length + 2; i < len; i+=2) {\r\n    path += ' L{' + i + '},{' + (i + 1) + '}';\r\n  }\r\n  var pathValues = [from.x, from.y];\r\n  for (i = 0, len = to.length; i < len; i++) {\r\n    pathValues.push(to[i].x);\r\n    pathValues.push(to[i].y);\r\n  }\r\n\r\n  var line = chart.paper.path(path, pathValues);\r\n  line.attr({\r\n    stroke: chart.options['line-color'],\r\n    'stroke-width': chart.options['line-width'],\r\n    'arrow-end': chart.options['arrow-end']\r\n  });\r\n\r\n  var font = chart.options.font;\r\n  var fontF = chart.options['font-family'];\r\n  var fontW = chart.options['font-weight'];\r\n\r\n  if (font) line.attr({ 'font': font });\r\n  if (fontF) line.attr({ 'font-family': fontF });\r\n  if (fontW) line.attr({ 'font-weight': fontW });\r\n\r\n  if (text) {\r\n\r\n    var centerText = false;\r\n\r\n    var textPath = chart.paper.text(0, 0, text);\r\n    var textAnchor = 'start';\r\n\r\n    var isHorizontal = false;\r\n    var firstTo = to[0];\r\n\r\n    if (from.y === firstTo.y) {\r\n      isHorizontal = true;\r\n    }\r\n\r\n    var x = 0,\r\n        y = 0;\r\n\r\n    if (centerText) {\r\n      if (from.x > firstTo.x) {\r\n        x = from.x - (from.x - firstTo.x)/2;\r\n      } else {\r\n        x = firstTo.x - (firstTo.x - from.x)/2;\r\n      }\r\n\r\n      if (from.y > firstTo.y) {\r\n        y = from.y - (from.y - firstTo.y)/2;\r\n      } else {\r\n        y = firstTo.y - (firstTo.y - from.y)/2;\r\n      }\r\n\r\n      if (isHorizontal) {\r\n        x -= textPath.getBBox().width/2;\r\n        y -= chart.options['text-margin'];\r\n      } else {\r\n        x += chart.options['text-margin'];\r\n        y -= textPath.getBBox().height/2;\r\n      }\r\n    } else {\r\n      x = from.x;\r\n      y = from.y;\r\n\r\n      if (isHorizontal) {\r\n        if (from.x > firstTo.x) {\r\n          x -= chart.options['text-margin']/2;\r\n          textAnchor = 'end';\r\n        } else {\r\n          x += chart.options['text-margin']/2;\r\n        }\r\n        y -= chart.options['text-margin'];\r\n      } else {\r\n        x += chart.options['text-margin']/2;\r\n        y += chart.options['text-margin'];\r\n        if (from.y > firstTo.y) {\r\n          y -= chart.options['text-margin']*2;\r\n        }\r\n      }\r\n    }\r\n\r\n    textPath.attr({\r\n      'text-anchor': textAnchor,\r\n      'font-size': chart.options['font-size'],\r\n      'fill': chart.options['font-color'],\r\n      x: x,\r\n      y: y\r\n    });\r\n\r\n    if (font) textPath.attr({ 'font': font });\r\n    if (fontF) textPath.attr({ 'font-family': fontF });\r\n    if (fontW) textPath.attr({ 'font-weight': fontW });\r\n  }\r\n\r\n  return line;\r\n}\r\n\r\nfunction checkLineIntersection(line1StartX, line1StartY, line1EndX, line1EndY, line2StartX, line2StartY, line2EndX, line2EndY) {\r\n  // if the lines intersect, the result contains the x and y of the intersection (treating the lines as infinite) and booleans for whether line segment 1 or line segment 2 contain the point\r\n  var denominator, a, b, numerator1, numerator2, result = {\r\n    x: null,\r\n    y: null,\r\n    onLine1: false,\r\n    onLine2: false\r\n  };\r\n  denominator = ((line2EndY - line2StartY) * (line1EndX - line1StartX)) - ((line2EndX - line2StartX) * (line1EndY - line1StartY));\r\n  if (denominator === 0) {\r\n    return result;\r\n  }\r\n  a = line1StartY - line2StartY;\r\n  b = line1StartX - line2StartX;\r\n  numerator1 = ((line2EndX - line2StartX) * a) - ((line2EndY - line2StartY) * b);\r\n  numerator2 = ((line1EndX - line1StartX) * a) - ((line1EndY - line1StartY) * b);\r\n  a = numerator1 / denominator;\r\n  b = numerator2 / denominator;\r\n\r\n  // if we cast these lines infinitely in both directions, they intersect here:\r\n  result.x = line1StartX + (a * (line1EndX - line1StartX));\r\n  result.y = line1StartY + (a * (line1EndY - line1StartY));\r\n  /*\r\n  // it is worth noting that this should be the same as:\r\n  x = line2StartX + (b * (line2EndX - line2StartX));\r\n  y = line2StartX + (b * (line2EndY - line2StartY));\r\n  */\r\n  // if line1 is a segment and line2 is infinite, they intersect if:\r\n  if (a > 0 && a < 1) {\r\n    result.onLine1 = true;\r\n  }\r\n  // if line2 is a segment and line1 is infinite, they intersect if:\r\n  if (b > 0 && b < 1) {\r\n    result.onLine2 = true;\r\n  }\r\n  // if line1 and line2 are segments, they intersect if both of the above are true\r\n  return result;\r\n}\r\n\r\nmodule.exports = {\r\n\tdrawPath: drawPath,\r\n\tdrawLine: drawLine,\r\n\tcheckLineIntersection: checkLineIntersection\r\n};\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/flowchart.functions.js\n// module id = 3\n// module chunks = 0","var FlowChart = require('./flowchart.chart');\r\nvar Start = require('./flowchart.symbol.start');\r\nvar End = require('./flowchart.symbol.end');\r\nvar Operation = require('./flowchart.symbol.operation');\r\nvar InputOutput = require('./flowchart.symbol.inputoutput');\r\nvar Subroutine = require('./flowchart.symbol.subroutine');\r\nvar Condition = require('./flowchart.symbol.condition');\r\nvar Parallel = require('./flowchart.symbol.parallel');\r\n\r\nfunction parse(input) {\r\n  input = input || '';\r\n  input = input.trim();\r\n\r\n  var chart = {\r\n    symbols: {},\r\n    start: null,\r\n    drawSVG: function(container, options) {\r\n      var self = this;\r\n\r\n      if (this.diagram) {\r\n        this.diagram.clean();\r\n      }\r\n\r\n      var diagram = new FlowChart(container, options);\r\n      this.diagram = diagram;\r\n      var dispSymbols = {};\r\n\r\n      function getDisplaySymbol(s) {\r\n        if (dispSymbols[s.key]) {\r\n          return dispSymbols[s.key];\r\n        }\r\n\r\n        switch (s.symbolType) {\r\n          case 'start':\r\n            dispSymbols[s.key] = new Start(diagram, s);\r\n            break;\r\n          case 'end':\r\n            dispSymbols[s.key] = new End(diagram, s);\r\n            break;\r\n          case 'operation':\r\n            dispSymbols[s.key] = new Operation(diagram, s);\r\n            break;\r\n          case 'inputoutput':\r\n            dispSymbols[s.key] = new InputOutput(diagram, s);\r\n            break;\r\n          case 'subroutine':\r\n            dispSymbols[s.key] = new Subroutine(diagram, s);\r\n            break;\r\n          case 'condition':\r\n            dispSymbols[s.key] = new Condition(diagram, s);\r\n            break;\r\n          case 'parallel':\r\n            dispSymbols[s.key] = new Parallel(diagram, s);\r\n            break;\r\n          default:\r\n            return new Error('Wrong symbol type!');\r\n        }\r\n\r\n        return dispSymbols[s.key];\r\n      }\r\n\r\n      (function constructChart(s, prevDisp, prev) {\r\n        var dispSymb = getDisplaySymbol(s);\r\n\r\n        if (self.start === s) {\r\n          diagram.startWith(dispSymb);\r\n        } else if (prevDisp && prev && !prevDisp.pathOk) {\r\n          if (prevDisp instanceof(Condition)) {\r\n            if (prev.yes === s) {\r\n              prevDisp.yes(dispSymb);\r\n            }\r\n            if (prev.no === s) {\r\n              prevDisp.no(dispSymb);\r\n            }\r\n          } else if (prevDisp instanceof(Parallel)) {\r\n            if (prev.path1 === s) {\r\n              prevDisp.path1(dispSymb);\r\n            }\r\n            if (prev.path2 === s) {\r\n              prevDisp.path2(dispSymb);\r\n            }\r\n            if (prev.path3 === s) {\r\n              prevDisp.path3(dispSymb);\r\n            }\r\n          } else {\r\n            prevDisp.then(dispSymb);\r\n          }\r\n        }\r\n\r\n        if (dispSymb.pathOk) {\r\n          return dispSymb;\r\n        }\r\n\r\n        if (dispSymb instanceof(Condition)) {\r\n          if (s.yes) {\r\n            constructChart(s.yes, dispSymb, s);\r\n          }\r\n          if (s.no) {\r\n            constructChart(s.no, dispSymb, s);\r\n          }\r\n        } else if (dispSymb instanceof(Parallel)) {\r\n          if (s.path1) {\r\n            constructChart(s.path1, dispSymb, s);\r\n          }\r\n          if (s.path2) {\r\n            constructChart(s.path2, dispSymb, s);\r\n          }\r\n          if (s.path3) {\r\n            constructChart(s.path3, dispSymb, s);\r\n          }\r\n        } else if (s.next) {\r\n          constructChart(s.next, dispSymb, s);\r\n        }\r\n\r\n        return dispSymb;\r\n      })(this.start);\r\n\r\n      diagram.render();\r\n    },\r\n    clean: function() {\r\n      this.diagram.clean();\r\n    },\r\n    options: function() {\r\n      return this.diagram.options;\r\n    }\r\n  };\r\n\r\n  var lines = [];\r\n  var prevBreak = 0;\r\n  for (var i0 = 1, i0len = input.length; i0 < i0len; i0++) {\r\n    if(input[i0] === '\\n' && input[i0 - 1] !== '\\\\') {\r\n      var line0 = input.substring(prevBreak, i0);\r\n      prevBreak = i0 + 1;\r\n      lines.push(line0.replace(/\\\\\\n/g, '\\n'));\r\n    }\r\n  }\r\n\r\n  if (prevBreak < input.length) {\r\n    lines.push(input.substr(prevBreak));\r\n  }\r\n\r\n  for (var l = 1, len = lines.length; l < len;) {\r\n    var currentLine = lines[l];\r\n\r\n    if (currentLine.indexOf('->') < 0 && currentLine.indexOf('=>') < 0 && currentLine.indexOf('@>') < 0) {\r\n      lines[l - 1] += '\\n' + currentLine;\r\n      lines.splice(l, 1);\r\n      len--;\r\n    } else {\r\n      l++;\r\n    }\r\n  }\r\n\r\n  function getStyle(s){\r\n    var startIndex = s.indexOf('(') + 1;\r\n    var endIndex = s.indexOf(')');\r\n    if (startIndex >= 0 && endIndex >= 0) {\r\n      return s.substring(startIndex,endIndex);\r\n    }\r\n    return '{}';\r\n  }\r\n\r\n  function getSymbValue(s){\r\n    var startIndex = s.indexOf('(') + 1;\r\n    var endIndex = s.indexOf(')');\r\n    if (startIndex >= 0 && endIndex >= 0) {\r\n      return s.substring(startIndex,endIndex);\r\n    }\r\n    return '';\r\n  }\r\n\r\n  function getSymbol(s) {\r\n    var startIndex = s.indexOf('(') + 1;\r\n    var endIndex = s.indexOf(')');\r\n    if (startIndex >= 0 && endIndex >= 0) {\r\n      return chart.symbols[s.substring(0, startIndex - 1)];\r\n    }\r\n    return chart.symbols[s];\r\n  }\r\n\r\n  function getNextPath(s) {\r\n    var next = 'next';\r\n    var startIndex = s.indexOf('(') + 1;\r\n    var endIndex = s.indexOf(')');\r\n    if (startIndex >= 0 && endIndex >= 0) {\r\n      next = flowSymb.substring(startIndex, endIndex);\r\n      if (next.indexOf(',') < 0) {\r\n        if (next !== 'yes' && next !== 'no') {\r\n          next = 'next, ' + next;\r\n        }\r\n      }\r\n    }\r\n    return next;\r\n  }\r\n  \r\n  function getAnnotation(s) {\r\n\tvar startIndex = s.indexOf(\"(\") + 1, endIndex = s.indexOf(\")\");\r\n\tvar tmp = s.substring(startIndex, endIndex);\r\n\tif(tmp.indexOf(\",\") > 0) { tmp = tmp.substring(0, tmp.indexOf(\",\")); }\r\n\tvar tmp_split = tmp.split(\"@\");\r\n\tif(tmp_split.length > 1)\r\n\t\treturn startIndex >= 0 && endIndex >= 0 ? tmp_split[1] : \"\";\r\n  }\r\n\r\n  while (lines.length > 0) {\r\n    var line = lines.splice(0, 1)[0].trim();\r\n\r\n    if (line.indexOf('=>') >= 0) {\r\n      // definition\r\n      var parts = line.split('=>');\r\n      var symbol = {\r\n        key: parts[0].replace(/\\(.*\\)/, ''),\r\n        symbolType: parts[1],\r\n        text: null,\r\n        link: null,\r\n        target: null,\r\n        flowstate: null,\r\n        function: null,\r\n        lineStyle: {},\r\n        params: {}\r\n      };\r\n\r\n      //parse parameters\r\n      var params = parts[0].match(/\\((.*)\\)/);\r\n      if (params && params.length > 1){\r\n        var entries = params[1].split(',');\r\n        for(var i = 0; i < entries.length; i++) {\r\n          var entry = entries[i].split('=');\r\n          if (entry.length == 2) {\r\n            symbol.params[entry[0]] = entry[1];\r\n          }\r\n        }\r\n      }\r\n\r\n      var sub;\r\n\r\n      if (symbol.symbolType.indexOf(': ') >= 0) {\r\n        sub = symbol.symbolType.split(': ');\r\n        symbol.symbolType = sub.shift();\r\n        symbol.text = sub.join(': ');\r\n      }\r\n\r\n      if (symbol.text && symbol.text.indexOf(':$') >= 0) {\r\n        sub = symbol.text.split(':$');\r\n        symbol.text = sub.shift();\r\n        symbol.function = sub.join(':$');\r\n      } else if (symbol.symbolType.indexOf(':$') >= 0) {\r\n        sub = symbol.symbolType.split(':$');\r\n        symbol.symbolType = sub.shift();\r\n        symbol.function = sub.join(':$');\r\n      } else if (symbol.text && symbol.text.indexOf(':>') >= 0) {\r\n        sub = symbol.text.split(':>');\r\n        symbol.text = sub.shift();\r\n        symbol.link = sub.join(':>');\r\n      } else if (symbol.symbolType.indexOf(':>') >= 0) {\r\n        sub = symbol.symbolType.split(':>');\r\n        symbol.symbolType = sub.shift();\r\n        symbol.link = sub.join(':>');\r\n      }\r\n\r\n      if (symbol.symbolType.indexOf('\\n') >= 0) {\r\n        symbol.symbolType = symbol.symbolType.split('\\n')[0];\r\n      }\r\n\r\n      /* adding support for links */\r\n      if (symbol.link) {\r\n        var startIndex = symbol.link.indexOf('[') + 1;\r\n        var endIndex = symbol.link.indexOf(']');\r\n        if (startIndex >= 0 && endIndex >= 0) {\r\n          symbol.target = symbol.link.substring(startIndex, endIndex);\r\n          symbol.link = symbol.link.substring(0, startIndex - 1);\r\n        }\r\n      }\r\n      /* end of link support */\r\n\r\n      /* adding support for flowstates */\r\n      if (symbol.text) {\r\n        if (symbol.text.indexOf('|') >= 0) {\r\n          var txtAndState = symbol.text.split('|');\r\n          symbol.flowstate = txtAndState.pop().trim();\r\n          symbol.text = txtAndState.join('|');\r\n        }\r\n      }\r\n      /* end of flowstate support */\r\n\r\n      chart.symbols[symbol.key] = symbol;\r\n\r\n    } else if (line.indexOf('->') >= 0) {\r\n      var ann = getAnnotation(line);\r\n      if (ann) {\r\n        line = line.replace('@' + ann, ''); \r\n      }\r\n      // flow\r\n      var flowSymbols = line.split('->');\r\n      for (var iS = 0, lenS = flowSymbols.length; iS < lenS; iS++) {\r\n        var flowSymb = flowSymbols[iS];\r\n        var symbVal = getSymbValue(flowSymb);\r\n\r\n        if (symbVal === 'true' || symbVal === 'false') {\r\n          // map true or false to yes or no respectively\r\n          flowSymb = flowSymb.replace('true', 'yes');\r\n          flowSymb = flowSymb.replace('false', 'no');\r\n        }\r\n        \r\n        var next = getNextPath(flowSymb);\r\n        var realSymb = getSymbol(flowSymb);\r\n\r\n        var direction = null;\r\n        if (next.indexOf(',') >= 0) {\r\n          var condOpt = next.split(',');\r\n          next = condOpt[0];\r\n          direction = condOpt[1].trim();\r\n        }\r\n\r\n        if (ann) {\r\n          if (next == \"yes\" || next == \"true\")\r\n            realSymb.yes_annotation = ann;\r\n          else\r\n            realSymb.no_annotation = ann;\r\n          ann = null;\r\n        }\r\n\r\n        if (!chart.start) {\r\n          chart.start = realSymb;\r\n        }\r\n\r\n        if (iS + 1 < lenS) {\r\n          var nextSymb = flowSymbols[iS + 1];\r\n          realSymb[next] = getSymbol(nextSymb);\r\n          realSymb['direction_' + next] = direction;\r\n          direction = null;\r\n        }\r\n      }\r\n    } else if (line.indexOf('@>') >= 0) {\r\n\r\n      // line style\r\n      var lineStyleSymbols = line.split('@>');\r\n      for (var iSS = 0, lenSS = lineStyleSymbols.length; iSS < lenSS; iSS++) {\r\n        if ((iSS + 1) !== lenSS) {\r\n          var curSymb = getSymbol(lineStyleSymbols[iSS]);\r\n          var nextSymbol = getSymbol(lineStyleSymbols[iSS+1]);\r\n\r\n          curSymb['lineStyle'][nextSymbol.key] = JSON.parse(getStyle(lineStyleSymbols[iSS + 1]));\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n  return chart;\r\n}\r\n\r\nmodule.exports = parse;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/flowchart.parse.js\n// module id = 4\n// module chunks = 0","var Symbol = require('./flowchart.symbol');\r\nvar inherits = require('./flowchart.helpers').inherits;\r\nvar drawAPI = require('./flowchart.functions');\r\nvar drawPath = drawAPI.drawPath;\r\n\r\nfunction Condition(chart, options) {\r\n  options = options || {};\r\n  Symbol.call(this, chart, options);\r\n  this.yes_annotation = options.yes_annotation;\r\n  this.no_annotation = options.no_annotation;\r\n  this.textMargin = this.getAttr('text-margin');\r\n  this.yes_direction = options.direction_yes;\r\n  this.no_direction = options.direction_no;\r\n  if (!this.no_direction && this.yes_direction === 'right') {\r\n    this.no_direction = 'bottom';\r\n  } else if (!this.yes_direction && this.no_direction === 'bottom') {\r\n    this.yes_direction = 'right'\r\n  }\r\n  this.yes_direction = this.yes_direction || 'bottom';\r\n  this.no_direction = this.no_direction || 'right';\r\n\r\n  var width = 200;\r\n  var height = 100;\r\n  var startX = 0;\r\n  var startY = 0;\r\n\r\n  this.text.attr({\r\n    x: 100,\r\n    y: 50,\r\n    'text-anchor':'middle',\r\n    'dominant-baseline': 'middle'\r\n  });\r\n\r\n  var start = {x: startX, y: startY};\r\n \r\n  var points = [\r\n    {x: startX, y: startY},\r\n    {x: startX + width, y: startY},\r\n    {x: startX + width, y: startY + height},\r\n    {x: startX, y: startY + height},\r\n    {x: startX, y: startY}\r\n  ];\r\n\r\n  var symbol = drawPath(chart, start, points);\r\n\r\n  symbol.attr({\r\n    stroke: this.getAttr('element-color'),\r\n    'stroke-width': this.getAttr('line-width'),\r\n    fill: this.getAttr('fill')\r\n  });\r\n  if (options.link) { symbol.attr('href', options.link); }\r\n  if (options.target) { symbol.attr('target', options.target); }\r\n  if (options.key) { symbol.node.id = options.key; }\r\n  symbol.node.setAttribute('class', this.getAttr('class'));\r\n\r\n  this.group.push(symbol);\r\n  symbol.insertBefore(this.text);\r\n  this.symbol = symbol\r\n\r\n  this.initialize();\r\n}\r\ninherits(Condition, Symbol);\r\n\r\nCondition.prototype.render = function() {\r\n\r\n  if (this.yes_direction) {\r\n    this[this.yes_direction + '_symbol'] = this.yes_symbol;\r\n  }\r\n\r\n  if (this.no_direction) {\r\n    this[this.no_direction + '_symbol'] = this.no_symbol;\r\n  }\r\n\r\n  var lineLength = this.getAttr('line-length');\r\n\r\n  if (this.bottom_symbol) {\r\n    var bottomPoint = this.getBottom();\r\n\r\n    if (!this.bottom_symbol.isPositioned) {\r\n      this.bottom_symbol.shiftY(this.getY() + this.height + lineLength);\r\n      this.bottom_symbol.setX(bottomPoint.x - this.bottom_symbol.width/2);\r\n      this.bottom_symbol.isPositioned = true;\r\n\r\n      this.bottom_symbol.render();\r\n    }\r\n  }\r\n\r\n  if (this.right_symbol) {\r\n    var rightPoint = this.getRight();\r\n\r\n    if (!this.right_symbol.isPositioned) {\r\n\r\n      this.right_symbol.setY(rightPoint.y - this.right_symbol.height/2);\r\n      this.right_symbol.shiftX(this.group.getBBox().x + this.width + lineLength);\r\n\r\n      var self = this;\r\n      (function shift() {\r\n        var hasSymbolUnder = false;\r\n        var symb;\r\n        for (var i = 0, len = self.chart.symbols.length; i < len; i++) {\r\n          symb = self.chart.symbols[i];\r\n\r\n          if (!self.params['align-next'] || self.params['align-next'] !== 'no') { \r\n            var diff = Math.abs(symb.getCenter().x - self.right_symbol.getCenter().x);\r\n            if (symb.getCenter().y > self.right_symbol.getCenter().y && diff <= self.right_symbol.width/2) {\r\n              hasSymbolUnder = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (hasSymbolUnder) {\r\n          if (self.right_symbol.symbolType === 'end') return;\r\n          self.right_symbol.setX(symb.getX() + symb.width + lineLength);\r\n          shift();\r\n        }\r\n      })();\r\n\r\n      this.right_symbol.isPositioned = true;\r\n\r\n      this.right_symbol.render();\r\n    }\r\n  }\r\n  \r\n  if (this.left_symbol) {\r\n    var leftPoint = this.getLeft();\r\n  \r\n    if (!this.left_symbol.isPositioned) {\r\n      this.left_symbol.setY(leftPoint.y - this.left_symbol.height / 2);\r\n      this.left_symbol.shiftX(-(this.group.getBBox().x + this.width + lineLength));\r\n      var self = this;\r\n      (function shift() {\r\n        var hasSymbolUnder = false;\r\n        var symb;\r\n        for (var i = 0, len = self.chart.symbols.length; i < len; i++) {\r\n          symb = self.chart.symbols[i];\r\n    \r\n          if (!self.params['align-next'] || self.params['align-next'] !== 'no') {\r\n            var diff = Math.abs(symb.getCenter().x - self.left_symbol.getCenter().x);\r\n            if (symb.getCenter().y > self.left_symbol.getCenter().y && diff <= self.left_symbol.width / 2) {\r\n              hasSymbolUnder = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n    \r\n        if (hasSymbolUnder) {\r\n          if (self.left_symbol.symbolType === 'end') return;\r\n          self.left_symbol.setX(symb.getX() + symb.width + lineLength);\r\n          shift();\r\n        }\r\n      })();\r\n  \r\n      this.left_symbol.isPositioned = true;\r\n  \r\n      this.left_symbol.render();\r\n    }\r\n  }\r\n};\r\n\r\nCondition.prototype.renderLines = function() {\r\n  if (this.yes_symbol) {\r\n    this.drawLineTo(this.yes_symbol, this.yes_annotation ? this.yes_annotation : this.getAttr('yes-text'), this.yes_direction);\r\n  }\r\n\r\n  if (this.no_symbol) {\r\n    this.drawLineTo(this.no_symbol, this.no_annotation ? this.no_annotation : this.getAttr('no-text'), this.no_direction);\r\n  }\r\n};\r\n\r\nmodule.exports = Condition;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/flowchart.symbol.condition.js\n// module id = 5\n// module chunks = 0","var Symbol = require('./flowchart.symbol');\r\nvar inherits = require('./flowchart.helpers').inherits;\r\n\r\nfunction Parallel(chart, options) {\r\n  var symbol = chart.paper.rect(0, 0, 0, 0);\r\n  options = options || {};\r\n  Symbol.call(this, chart, options, symbol);\r\n  this.textMargin = this.getAttr('text-margin');\r\n  this.path1_direction = 'bottom';\r\n  this.path2_direction = 'right';\r\n  this.path3_direction = 'top';\r\n  this.params = options.params;\r\n  if (options.direction_next === 'path1' && !options[options.direction_next] && options.next) {\r\n    options[options.direction_next] = options.next;\r\n  }\r\n  if (options.direction_next === 'path2' && !options[options.direction_next] && options.next) {\r\n    options[options.direction_next] = options.next;\r\n  }\r\n  if (options.direction_next === 'path3' && !options[options.direction_next] && options.next) {\r\n    options[options.direction_next] = options.next;\r\n  }\r\n\r\n  if (options.path1 && options.direction_path1 && options.path2 && !options.direction_path2 && options.path3 && !options.direction_path3) {\r\n    if (options.direction_path1 === 'right') {\r\n      this.path2_direction = 'bottom';\r\n      this.path1_direction = 'right';\r\n      this.path3_direction = 'top';\r\n    } else if (options.direction_path1 === 'top') {\r\n      this.path2_direction = 'right';\r\n      this.path1_direction = 'top';\r\n      this.path3_direction = 'bottom';\r\n    } else if (options.direction_path1 === 'left') {\r\n      this.path2_direction = 'right';\r\n      this.path1_direction = 'left';\r\n      this.path3_direction = 'bottom';\r\n    } else {\r\n      this.path2_direction = 'right';\r\n      this.path1_direction = 'bottom';\r\n      this.path3_direction = 'top';\r\n    }\r\n  } else if (options.path1 && !options.direction_path1 && options.path2 && options.direction_path2 && options.path3 && !options.direction_path3) {\r\n    if (options.direction_path2 === 'right') {\r\n      this.path1_direction = 'bottom';\r\n      this.path2_direction = 'right';\r\n      this.path3_direction = 'top';\r\n    } else if (options.direction_path2 === 'left') {\r\n      this.path1_direction = 'bottom';\r\n      this.path2_direction = 'left';\r\n      this.path3_direction = 'right';\r\n    } else {\r\n      this.path1_direction = 'right';\r\n      this.path2_direction = 'bottom';\r\n      this.path3_direction = 'top';\r\n    }\r\n  } else if (options.path1 && !options.direction_path1 && options.path2 && !options.direction_path2 && options.path3 && options.direction_path3) {\r\n    if (options.direction_path2 === 'right') {\r\n      this.path1_direction = 'bottom';\r\n      this.path2_direction = 'top';\r\n      this.path3_direction = 'right';\r\n    } else if (options.direction_path2 === 'left') {\r\n      this.path1_direction = 'bottom';\r\n      this.path2_direction = 'right';\r\n      this.path3_direction = 'left';\r\n    } else {\r\n      this.path1_direction = 'right';\r\n      this.path2_direction = 'bottom';\r\n      this.path3_direction = 'top';\r\n    }\r\n  } else {\r\n    this.path1_direction = options.direction_path1;\r\n    this.path2_direction = options.direction_path2;\r\n    this.path3_direction = options.direction_path3;\r\n  }\r\n\r\n  this.path1_direction = this.path1_direction || 'bottom';\r\n  this.path2_direction = this.path2_direction || 'right';\r\n  this.path3_direction = this.path3_direction || 'top';\r\n\r\n  this.initialize();\r\n}\r\ninherits(Parallel, Symbol);\r\n\r\nParallel.prototype.render = function() {\r\n\r\n  if (this.path1_direction) {\r\n    this[this.path1_direction + '_symbol'] = this.path1_symbol;\r\n  }\r\n\r\n  if (this.path2_direction) {\r\n    this[this.path2_direction + '_symbol'] = this.path2_symbol;\r\n  }\r\n\r\n  if (this.path3_direction) {\r\n    this[this.path3_direction + '_symbol'] = this.path3_symbol;\r\n  }\r\n\r\n  var lineLength = this.getAttr('line-length');\r\n\r\n  if (this.bottom_symbol) {\r\n    var bottomPoint = this.getBottom();\r\n\r\n    if (!this.bottom_symbol.isPositioned) {\r\n      this.bottom_symbol.shiftY(this.getY() + this.height + lineLength);\r\n      this.bottom_symbol.setX(bottomPoint.x - this.bottom_symbol.width / 2);\r\n      this.bottom_symbol.isPositioned = true;\r\n\r\n      this.bottom_symbol.render();\r\n    }\r\n  }\r\n\r\n  if (this.top_symbol) {\r\n    var topPoint = this.getTop();\r\n\r\n    if (!this.top_symbol.isPositioned) {\r\n      this.top_symbol.shiftY(this.getY() - this.top_symbol.height - lineLength);\r\n      this.top_symbol.setX(topPoint.x + this.top_symbol.width);\r\n      this.top_symbol.isPositioned = true;\r\n\r\n      this.top_symbol.render();\r\n    }\r\n  }\r\n\r\n  var self = this;\r\n\r\n  if (this.left_symbol) {\r\n    var leftPoint = this.getLeft();\r\n\r\n    if (!this.left_symbol.isPositioned) {\r\n      this.left_symbol.setY(leftPoint.y - this.left_symbol.height / 2);\r\n      this.left_symbol.shiftX(-(this.group.getBBox().x + this.width + lineLength));\r\n      (function shift() {\r\n        var hasSymbolUnder = false;\r\n        var symb;\r\n        for (var i = 0, len = self.chart.symbols.length; i < len; i++) {\r\n          symb = self.chart.symbols[i];\r\n\r\n          if (!self.params['align-next'] || self.params['align-next'] !== 'no') {\r\n            var diff = Math.abs(symb.getCenter().x - self.left_symbol.getCenter().x);\r\n            if (symb.getCenter().y > self.left_symbol.getCenter().y && diff <= self.left_symbol.width / 2) {\r\n              hasSymbolUnder = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (hasSymbolUnder) {\r\n          if (self.left_symbol.symbolType === 'end') return;\r\n          self.left_symbol.setX(symb.getX() + symb.width + lineLength);\r\n          shift();\r\n        }\r\n      })();\r\n\r\n      this.left_symbol.isPositioned = true;\r\n\r\n      this.left_symbol.render();\r\n    }\r\n  }\r\n\r\n  if (this.right_symbol) {\r\n    var rightPoint = this.getRight();\r\n\r\n    if (!this.right_symbol.isPositioned) {\r\n      this.right_symbol.setY(rightPoint.y - this.right_symbol.height / 2);\r\n      this.right_symbol.shiftX(this.group.getBBox().x + this.width + lineLength);\r\n      (function shift() {\r\n        var hasSymbolUnder = false;\r\n        var symb;\r\n        for (var i = 0, len = self.chart.symbols.length; i < len; i++) {\r\n          symb = self.chart.symbols[i];\r\n\r\n          if (!self.params['align-next'] || self.params['align-next'] !== 'no') {\r\n            var diff = Math.abs(symb.getCenter().x - self.right_symbol.getCenter().x);\r\n            if (symb.getCenter().y > self.right_symbol.getCenter().y && diff <= self.right_symbol.width / 2) {\r\n              hasSymbolUnder = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (hasSymbolUnder) {\r\n          if (self.right_symbol.symbolType === 'end') return;\r\n          self.right_symbol.setX(symb.getX() + symb.width + lineLength);\r\n          shift();\r\n        }\r\n      })();\r\n\r\n      this.right_symbol.isPositioned = true;\r\n\r\n      this.right_symbol.render();\r\n    }\r\n  }\r\n};\r\n\r\nParallel.prototype.renderLines = function() {\r\n  if (this.path1_symbol) {\r\n    this.drawLineTo(this.path1_symbol, '', this.path1_direction);\r\n  }\r\n\r\n  if (this.path2_symbol) {\r\n    this.drawLineTo(this.path2_symbol, '', this.path2_direction);\r\n  }\r\n\r\n  if (this.path3_symbol) {\r\n    this.drawLineTo(this.path3_symbol, '', this.path3_direction);\r\n  }\r\n};\r\n\r\nmodule.exports = Parallel;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/flowchart.symbol.parallel.js\n// module id = 6\n// module chunks = 0","var Raphael = require('raphael');\r\nvar defaults = require('./flowchart.helpers').defaults;\r\nvar defaultOptions = require('./flowchart.defaults');\r\nvar Condition = require('./flowchart.symbol.condition');\r\nvar Parallel = require('./flowchart.symbol.parallel');\r\n\r\nfunction FlowChart(container, options) {\r\n  options = options || {};\r\n\r\n  this.paper = new Raphael(container);\r\n\r\n  this.options = defaults(options, defaultOptions);\r\n\r\n  this.symbols = [];\r\n  this.lines = [];\r\n  this.start = null;\r\n}\r\n\r\nFlowChart.prototype.handle = function(symbol) {\r\n  if (this.symbols.indexOf(symbol) <= -1) {\r\n    this.symbols.push(symbol);\r\n  }\r\n\r\n  var flowChart = this;\r\n\r\n  if (symbol instanceof(Condition)) {\r\n    symbol.yes = function(nextSymbol) {\r\n      symbol.yes_symbol = nextSymbol;\r\n      if(symbol.no_symbol) {\r\n        symbol.pathOk = true;\r\n      }\r\n      return flowChart.handle(nextSymbol);\r\n    };\r\n    symbol.no = function(nextSymbol) {\r\n      symbol.no_symbol = nextSymbol;\r\n      if (symbol.yes_symbol) {\r\n        symbol.pathOk = true;\r\n      }\r\n      return flowChart.handle(nextSymbol);\r\n    };\r\n  } else if (symbol instanceof(Parallel)) {\r\n    symbol.path1 = function(nextSymbol) {\r\n      symbol.path1_symbol = nextSymbol;\r\n      if (symbol.path2_symbol) {\r\n        symbol.pathOk = true;\r\n      }\r\n      return flowChart.handle(nextSymbol);\r\n    };\r\n    symbol.path2 = function(nextSymbol) {\r\n      symbol.path2_symbol = nextSymbol;\r\n      if (symbol.path3_symbol) {\r\n        symbol.pathOk = true;\r\n      }\r\n      return flowChart.handle(nextSymbol);\r\n    };\r\n    symbol.path3 = function(nextSymbol) {\r\n      symbol.path3_symbol = nextSymbol;\r\n      if (symbol.path1_symbol) {\r\n        symbol.pathOk = true;\r\n      }\r\n      return flowChart.handle(nextSymbol);\r\n    };\r\n  } else {\r\n    symbol.then = function(nextSymbol) {\r\n      symbol.next = nextSymbol;\r\n      symbol.pathOk = true;\r\n      return flowChart.handle(nextSymbol);\r\n    };\r\n  }\r\n\r\n  return symbol;\r\n};\r\n\r\nFlowChart.prototype.startWith = function(symbol) {\r\n  this.start = symbol;\r\n  return this.handle(symbol);\r\n};\r\n\r\nFlowChart.prototype.render = function() {\r\n  var maxWidth = 0,\r\n    maxHeight = 0,\r\n    i = 0,\r\n    len = 0,\r\n    maxX = 0,\r\n    maxY = 0,\r\n    minX = 0,\r\n    minY = 0,\r\n    symbol,\r\n    line;\r\n\r\n  for (i = 0, len = this.symbols.length; i < len; i++) {\r\n    symbol = this.symbols[i];\r\n    if (symbol.width > maxWidth) {\r\n      maxWidth = symbol.width;\r\n    }\r\n    if (symbol.height > maxHeight) {\r\n      maxHeight = symbol.height;\r\n    }\r\n  }\r\n\r\n  for (i = 0, len = this.symbols.length; i < len; i++) {\r\n    symbol = this.symbols[i];\r\n    symbol.shiftX(this.options.x + (maxWidth - symbol.width)/2 + this.options['line-width']);\r\n    symbol.shiftY(this.options.y + (maxHeight - symbol.height)/2 + this.options['line-width']);\r\n  }\r\n\r\n  this.start.render();\r\n  // for (i = 0, len = this.symbols.length; i < len; i++) {\r\n  //   symbol = this.symbols[i];\r\n  //   symbol.render();\r\n  // }\r\n\r\n  for (i = 0, len = this.symbols.length; i < len; i++) {\r\n    symbol = this.symbols[i];\r\n    symbol.renderLines();\r\n  }\r\n\r\n  maxX = this.maxXFromLine;\r\n\r\n  var x;\r\n  var y;\r\n\r\n  for (i = 0, len = this.symbols.length; i < len; i++) {\r\n    symbol = this.symbols[i];\r\n    var leftX = symbol.getX()\r\n    x = leftX + symbol.width;\r\n    y = symbol.getY() + symbol.height;\r\n    if (leftX < minX) {\r\n      minX = leftX;\r\n    }\r\n    if (x > maxX) {\r\n      maxX = x;\r\n    }\r\n    if (y > maxY) {\r\n      maxY = y;\r\n    }\r\n  }\r\n\r\n  for (i = 0, len = this.lines.length; i < len; i++) {\r\n    line = this.lines[i].getBBox();\r\n    x = line.x;\r\n    y = line.y;\r\n    var x2 = line.x2;\r\n    var y2 = line.y2;\r\n    if (x < minX) {\r\n      minX = x;\r\n    }\r\n    if (y < minY) {\r\n      minY = y;\r\n    }\r\n    if (x2 > maxX) {\r\n      maxX = x2;\r\n    }\r\n    if (y2 > maxY) {\r\n      maxY = y2;\r\n    }\r\n  }\r\n\r\n  var scale = this.options['scale'];\r\n  var lineWidth = this.options['line-width'];\r\n\r\n  if (this.minXFromSymbols < minX) minX = this.minXFromSymbols;\r\n\r\n  if (minX < 0) minX -= lineWidth;\r\n  if (minY < 0) minY -= lineWidth;\r\n\r\n  var width = maxX + lineWidth - minX;\r\n  var height = maxY + lineWidth - minY;\r\n\r\n  this.paper.setSize(width * scale, height * scale);\r\n  this.paper.setViewBox(minX, minY, width, height, true);\r\n};\r\n\r\nFlowChart.prototype.clean = function() {\r\n  if (this.paper) {\r\n    var paperDom = this.paper.canvas;\r\n    paperDom.parentNode && paperDom.parentNode.removeChild(paperDom);\r\n  }\r\n};\r\n\r\nmodule.exports = FlowChart;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/flowchart.chart.js\n// module id = 7\n// module chunks = 0","// defaults\r\nmodule.exports = {\r\n  'x': 0,\r\n  'y': 0,\r\n  'line-width': 3,\r\n  'line-length': 50,\r\n  'text-margin': 10,\r\n  'font-size': 14,\r\n  'font-color': 'black',\r\n  // 'font': 'normal',\r\n  // 'font-family': 'calibri',\r\n  // 'font-weight': 'normal',\r\n  'line-color': 'black',\r\n  'element-color': 'black',\r\n  'fill': 'white',\r\n  'yes-text': 'yes',\r\n  'no-text': 'no',\r\n  'arrow-end': 'block',\r\n  'class': 'flowchart',\r\n  'scale': 1,\r\n  'symbols': {\r\n    'start': {},\r\n    'end': {},\r\n    'condition': {},\r\n    'inputoutput': {},\r\n    'operation': {},\r\n    'subroutine': {},\r\n    'parallel': {}\r\n  } //,\r\n  // 'flowstate' : {\r\n  //   'past' : { 'fill': '#CCCCCC', 'font-size': 12},\r\n  //   'current' : {'fill': 'yellow', 'font-color': 'red', 'font-weight': 'bold'},\r\n  //   'future' : { 'fill': '#FFFF99'},\r\n  //   'invalid': {'fill': '#444444'}\r\n  // }\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/flowchart.defaults.js\n// module id = 8\n// module chunks = 0","// add indexOf to non ECMA-262 standard compliant browsers\r\nif (!Array.prototype.indexOf) {\r\n  Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {\r\n    \"use strict\";\r\n    if (this === null) {\r\n      throw new TypeError();\r\n    }\r\n    var t = Object(this);\r\n    var len = t.length >>> 0;\r\n    if (len === 0) {\r\n      return -1;\r\n    }\r\n    var n = 0;\r\n    if (arguments.length > 0) {\r\n      n = Number(arguments[1]);\r\n      if (n != n) { // shortcut for verifying if it's NaN\r\n        n = 0;\r\n      } else if (n !== 0 && n != Infinity && n != -Infinity) {\r\n        n = (n > 0 || -1) * Math.floor(Math.abs(n));\r\n      }\r\n    }\r\n    if (n >= len) {\r\n      return -1;\r\n    }\r\n    var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\r\n    for (; k < len; k++) {\r\n      if (k in t && t[k] === searchElement) {\r\n        return k;\r\n      }\r\n    }\r\n    return -1;\r\n  };\r\n}\r\n\r\n// add lastIndexOf to non ECMA-262 standard compliant browsers\r\nif (!Array.prototype.lastIndexOf) {\r\n  Array.prototype.lastIndexOf = function(searchElement /*, fromIndex*/) {\r\n    \"use strict\";\r\n    if (this === null) {\r\n      throw new TypeError();\r\n    }\r\n    var t = Object(this);\r\n    var len = t.length >>> 0;\r\n    if (len === 0) {\r\n      return -1;\r\n    }\r\n    var n = len;\r\n    if (arguments.length > 1) {\r\n      n = Number(arguments[1]);\r\n      if (n != n) {\r\n        n = 0;\r\n      } else if (n !== 0 && n != (1 / 0) && n != -(1 / 0)) {\r\n        n = (n > 0 || -1) * Math.floor(Math.abs(n));\r\n      }\r\n    }\r\n    var k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n);\r\n    for (; k >= 0; k--) {\r\n      if (k in t && t[k] === searchElement) {\r\n        return k;\r\n      }\r\n    }\r\n    return -1;\r\n  };\r\n}\r\n\r\nif (!String.prototype.trim) {\r\n  String.prototype.trim = function() {\r\n    return this.replace(/^\\s+|\\s+$/g, '');\r\n  };\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/flowchart.shim.js\n// module id = 9\n// module chunks = 0","var Symbol = require('./flowchart.symbol');\r\nvar inherits = require('./flowchart.helpers').inherits;\r\n\r\nfunction End(chart, options) {\r\n  var symbol = chart.paper.rect(0, 0, 0, 0, 20);\r\n  options = options || {};\r\n  options.text = options.text || 'End';\r\n  Symbol.call(this, chart, options, symbol);\r\n}\r\ninherits(End, Symbol);\r\n\r\nmodule.exports = End;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/flowchart.symbol.end.js\n// module id = 10\n// module chunks = 0","var Symbol = require('./flowchart.symbol');\r\nvar inherits = require('./flowchart.helpers').inherits;\r\nvar drawAPI = require('./flowchart.functions');\r\nvar drawPath = drawAPI.drawPath;\r\n\r\nfunction InputOutput(chart, options) {\r\n  options = options || {};\r\n  Symbol.call(this, chart, options);\r\n  this.textMargin = this.getAttr('text-margin');\r\n\r\n  this.text.attr({\r\n    x: this.textMargin * 3\r\n  });\r\n\r\n  var width = this.text.getBBox().width + 4 * this.textMargin;\r\n  var height = this.text.getBBox().height + 2 * this.textMargin;\r\n  var startX = this.textMargin;\r\n  var startY = height/2;\r\n\r\n  var start = {x: startX, y: startY};\r\n  var points = [\r\n    {x: startX - this.textMargin, y: height},\r\n    {x: startX - this.textMargin + width, y: height},\r\n    {x: startX - this.textMargin + width + 2 * this.textMargin, y: 0},\r\n    {x: startX - this.textMargin + 2 * this.textMargin, y: 0},\r\n    {x: startX, y: startY}\r\n  ];\r\n\r\n  var symbol = drawPath(chart, start, points);\r\n\r\n  symbol.attr({\r\n    stroke: this.getAttr('element-color'),\r\n    'stroke-width': this.getAttr('line-width'),\r\n    fill: this.getAttr('fill')\r\n  });\r\n  if (options.link) { symbol.attr('href', options.link); }\r\n  if (options.target) { symbol.attr('target', options.target); }\r\n  if (options.key) { symbol.node.id = options.key; }\r\n  symbol.node.setAttribute('class', this.getAttr('class'));\r\n\r\n  this.text.attr({\r\n    y: symbol.getBBox().height/2\r\n  });\r\n\r\n  this.group.push(symbol);\r\n  symbol.insertBefore(this.text);\r\n  this.symbol = symbol\r\n\r\n  this.initialize();\r\n}\r\ninherits(InputOutput, Symbol);\r\n\r\nInputOutput.prototype.getLeft = function() {\r\n  var y = this.getY() + this.group.getBBox().height/2;\r\n  var x = this.getX() + this.textMargin;\r\n  return {x: x, y: y};\r\n};\r\n\r\nInputOutput.prototype.getRight = function() {\r\n  var y = this.getY() + this.group.getBBox().height/2;\r\n  var x = this.getX() + this.group.getBBox().width - this.textMargin;\r\n  return {x: x, y: y};\r\n};\r\n\r\nmodule.exports = InputOutput;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/flowchart.symbol.inputoutput.js\n// module id = 11\n// module chunks = 0","var Symbol = require('./flowchart.symbol');\r\nvar inherits = require('./flowchart.helpers').inherits;\r\n\r\nfunction Operation(chart, options) {\r\n  var symbol = chart.paper.rect(0, 0, 0, 0);\r\n  options = options || {};\r\n  Symbol.call(this, chart, options, symbol);\r\n}\r\ninherits(Operation, Symbol);\r\n\r\nmodule.exports = Operation;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/flowchart.symbol.operation.js\n// module id = 12\n// module chunks = 0","var Symbol = require('./flowchart.symbol');\r\nvar inherits = require('./flowchart.helpers').inherits;\r\n\r\nfunction Start(chart, options) {\r\n  var symbol = chart.paper.rect(0, 0, 0, 0, 20);\r\n  options = options || {};\r\n  options.text = options.text || 'Start';\r\n  Symbol.call(this, chart, options, symbol);\r\n}\r\ninherits(Start, Symbol);\r\n\r\nmodule.exports = Start;\r\n\r\n// Start.prototype.render = function() {\r\n//   if (this.next) {\r\n//     var lineLength = this.chart.options.symbols[this.symbolType]['line-length'] || this.chart.options['line-length'];\r\n\r\n//     var bottomPoint = this.getBottom();\r\n//     var topPoint = this.next.getTop();\r\n\r\n//     if (!this.next.isPositioned) {\r\n//       this.next.shiftY(this.getY() + this.height + lineLength);\r\n//       this.next.setX(bottomPoint.x - this.next.width/2);\r\n//       this.next.isPositioned = true;\r\n\r\n//       this.next.render();\r\n//     }\r\n//   }\r\n// };\r\n\r\n// Start.prototype.renderLines = function() {\r\n//   if (this.next) {\r\n//     this.drawLineTo(this.next);\r\n//   }\r\n// };\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/flowchart.symbol.start.js\n// module id = 13\n// module chunks = 0","var Symbol = require('./flowchart.symbol');\r\nvar inherits = require('./flowchart.helpers').inherits;\r\n\r\nfunction Subroutine(chart, options) {\r\n  var symbol = chart.paper.rect(0, 0, 0, 0);\r\n  options = options || {};\r\n  Symbol.call(this, chart, options, symbol);\r\n\r\n  symbol.attr({\r\n    width: this.text.getBBox().width + 4 * this.getAttr('text-margin')\r\n  });\r\n\r\n  this.text.attr({\r\n    'x': 2 * this.getAttr('text-margin')\r\n  });\r\n\r\n  var innerWrap = chart.paper.rect(0, 0, 0, 0);\r\n  innerWrap.attr({\r\n    x: this.getAttr('text-margin'),\r\n    stroke: this.getAttr('element-color'),\r\n    'stroke-width': this.getAttr('line-width'),\r\n    width: this.text.getBBox().width + 2 * this.getAttr('text-margin'),\r\n    height: this.text.getBBox().height + 2 * this.getAttr('text-margin'),\r\n    fill: this.getAttr('fill')\r\n  });\r\n  if (options.key) { innerWrap.node.id = options.key + 'i'; }\r\n\r\n  var font = this.getAttr('font');\r\n  var fontF = this.getAttr('font-family');\r\n  var fontW = this.getAttr('font-weight');\r\n\r\n  if (font) innerWrap.attr({ 'font': font });\r\n  if (fontF) innerWrap.attr({ 'font-family': fontF });\r\n  if (fontW) innerWrap.attr({ 'font-weight': fontW });\r\n\r\n  if (options.link) { innerWrap.attr('href', options.link); }\r\n  if (options.target) { innerWrap.attr('target', options.target); }\r\n  this.group.push(innerWrap);\r\n  innerWrap.insertBefore(this.text);\r\n\r\n  this.initialize();\r\n}\r\ninherits(Subroutine, Symbol);\r\n\r\nmodule.exports = Subroutine;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/flowchart.symbol.subroutine.js\n// module id = 14\n// module chunks = 0","if (typeof jQuery != 'undefined') {\r\n\tvar parse = require('./flowchart.parse');\r\n\r\n\t(function( $ ) {\r\n\t\tfunction paramFit(needle, haystack) {\r\n\t\t\treturn needle == haystack ||\r\n\t\t\t( Array.isArray(haystack) && (haystack.includes(needle) || haystack.includes(Number(needle)) ))\r\n\t\t}\r\n\t\tvar methods = {\r\n\t\t\tinit : function(options) {\r\n\t\t\t\treturn this.each(function() {\r\n\t\t\t\t\tvar $this = $(this);\r\n\t\t\t\t\tthis.chart = parse($this.text());\r\n\t\t\t\t\t$this.html('');\r\n\t\t\t\t\tthis.chart.drawSVG(this, options);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tsetFlowStateByParam : function(param, paramValue, newFlowState) {\r\n\t\t\t\treturn this.each(function() {\r\n\t\t\t\t\tvar chart = this.chart;\r\n\r\n\t\t\t\t\t// @todo this should be part of Symbol API\r\n\t\t\t\t\tvar nextSymbolKeys = ['next', 'yes', 'no', 'path1', 'path2', 'path3'];\r\n\r\n\t\t\t\t\tfor (var property in chart.symbols) {\r\n\t\t\t\t\t\tif (chart.symbols.hasOwnProperty(property)) {\r\n\t\t\t\t\t\t\tvar symbol = chart.symbols[property];\r\n\t\t\t\t\t\t\tvar val = symbol.params[param];\r\n\t\t\t\t\t\t\tif (paramFit(val, paramValue)) {\r\n\t\t\t\t\t\t\t\tsymbol.flowstate = newFlowState;\r\n\t\t\t\t\t\t\t\tfor (var nski = 0; nski < nextSymbolKeys.length; nski++) {\r\n\t\t\t\t\t\t\t\t\tvar nextSymbolKey = nextSymbolKeys[nski];\r\n\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\tsymbol[nextSymbolKey] &&\r\n\t\t\t\t\t\t\t\t\t\tsymbol[nextSymbolKey]['params'] &&\r\n\t\t\t\t\t\t\t\t\t\tsymbol[nextSymbolKey]['params'][param] &&\r\n\t\t\t\t\t\t\t\t\t\tparamFit(symbol[nextSymbolKey]['params'][param], paramValue)\r\n\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\tsymbol.lineStyle[symbol[nextSymbolKey]['key']] = {stroke: chart.options()['flowstate'][newFlowState]['fill']};\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tchart.clean();\r\n\t\t\t\t\tchart.drawSVG(this);\r\n\t\t\t\t});\r\n\r\n\t\t\t},\r\n\t\t\tclearFlowState: function () {\r\n\t\t\t\treturn this.each(function() {\r\n\t\t\t\t\tvar chart = this.chart;\r\n\r\n\t\t\t\t\tfor (var property in chart.symbols) {\r\n\t\t\t\t\t\tif (chart.symbols.hasOwnProperty(property)) {\r\n\t\t\t\t\t\t\tvar node = chart.symbols[property];\r\n\t\t\t\t\t\t\tnode.flowstate = '';\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tchart.clean();\r\n\t\t\t\t\tchart.drawSVG(this);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t$.fn.flowChart = function(methodOrOptions) {\r\n\t\t\tif ( methods[methodOrOptions] ) {\r\n\t\t\t\treturn methods[ methodOrOptions ].apply( this, Array.prototype.slice.call( arguments, 1 ));\r\n\t\t\t} else if ( typeof methodOrOptions === 'object' || ! methodOrOptions ) {\r\n\t\t\t\t// Default to \"init\"\r\n\t\t\t\treturn methods.init.apply( this, arguments );\r\n\t\t\t} else {\r\n\t\t\t\t$.error( 'Method ' +  methodOrOptions + ' does not exist on jQuery.flowChart' );\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t})(jQuery); // eslint-disable-line\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/jquery-plugin.js\n// module id = 15\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_16__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"Raphael\"\n// module id = 16\n// module chunks = 0"],"sourceRoot":""}